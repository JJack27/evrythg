Springer Undergraduate Mathematics Series

Advisory Board
M.A.J. Chaplain University of Dundee
K. Erdmann Oxford University
L.C.G. Rogers University of Cambridge
E. Suli Oxford University
¨
J.F. Toland University of Bath

Other books in this series
A First Course in Discrete Mathematics I. Anderson
Analytic Methods for Partial Differential Equations G. Evans, J. Blackledge, P. Yardley
Basic Linear Algebra, Second Edition T.S. Blyth and E.F. Robertson
´
Basic Stochastic Processes Z. Brzezniak and T. Zastawniak
Complex Analysis J.M. Howie
Elementary Differential Geometry A. Pressley
Elementary Number Theory G.A. Jones and J.M. Jones
´
´
Elements of Abstract Analysis M. O Searcoid
Elements of Logic via Numbers and Sets D.L. Johnson
Essential Mathematical Biology N.F. Britton
Fields, Flows and Waves: An Introduction to Continuum Models D.F. Parker
Further Linear Algebra T.S. Blyth and E.F. Robertson
Geometry R. Fenn
Groups, Rings and Fields D.A.R. Wallace
Hyperbolic Geometry J.W. Anderson
Information and Coding Theory G.A. Jones and J.M. Jones
Introduction to Laplace Transforms and Fourier Series P.P.G. Dyke
Introduction to Ring Theory P.M. Cohn
Introductory Mathematics: Algebra and Analysis G. Smith
Linear Functional Analysis B.P. Rynne and M.A. Youngson
´
Mathematics for Finance: An Introduction to Financial Engineering M. Capinski and
T. Zastawniak
Matrix Groups: An Introduction to Lie Group Theory A. Baker
´
Measure, Integral and Probability, Second Edition M. Capinski and E. Kopp
Multivariate Calculus and Geometry, Second Edition S. Dineen
Numerical Methods for Partial Differential Equations G. Evans, J. Blackledge, P. Yardley
Probability Models J. Haigh
Real Analysis J.M. Howie
Sets, Logic and Categories P. Cameron
Special Relativity N.M.J. Woodhouse
Symmetries D.L. Johnson
Topics in Group Theory G. Smith and O. Tabachnikova
Vector Calculus P.C. Matthews

Duncan Marsh

Applied Geometry for
Computer Graphics
and CAD
Second Edition

With 127 Figures

Cover ilustration elements reproduced by kind permission of:
Aptech Systems, Inc., Publishers of the GAUSS Mathematical and Statistical System, 23804 S.E. Kent-Kangley Road, Maple Valley, WA
98038, USA. Tel: (206) 432-7855 Fax (206) 432-7832 email: info@aptech.com URL: www.aptech.com.
American Statistical Association: Chance Vol 8 No 1, 1995 article by KS and KW Heiner ‘Tree Rings of the Northern Shawangunks’ page
32 fig 2.
Springer-Verlag: Mathematica in Education and Research Vol 4 Issue 3 1995 article by Roman E Maeder, Beatrice Amrhein and Oliver
Gloor ‘Illustrated Mathematics: Visualization of Mathematical Objects’ page 9 fig 11, originally published as a CD Rom ‘Illustrated
Mathematics’ by TELOS: ISBN 0-387-14222-3, German edition by Birkhauser: ISBN 3-7643-5100-4.
Mathematica in Education and Research Vol 4 Issue 3 1995 article by Richard J Gaylord and Kazume Nishidate ‘Traffic Engineering
with Cellular Automata’ page 35 fig 2. Mathematica in Education and Research Vol 5 Issue 2 1996 article by Michael Trott ‘The
Implicitization of a Trefoil Knot’ page 14.
Mathematica in Education and Research Vol 5 Issue 2 1996 article by Lee de Cola ‘Coins, Trees, Bars and Bells: Simulation of the
Binomial Process’ page 19 fig 3. Mathematica in Education and Research Vol 5 Issue 2 1996 article by Richard Gaylord and Kazume
nishidate ‘Contagious Spreading’ page 33 fig 1. Mathematica in Education and Research Vol 5 Issue 2 1996 article by Joe Buhler and
Stan Wagon ‘Secrets of the Madelung Constant’ page 50 fig 1.

British Library Cataloguing in Publication Data
Marsh, Duncan
Applied geometry for computer graphics and CAD. — 2nd ed. —
(Springer undergraduate mathematics series)
1. Geometry — Data processing 2. Computer graphics —
Mathematics 3. Computer-aided design — Mathematics
I. Title
516′.0028566
ISBN 1852338016
Library of Congress Cataloging-in-Publication Data
Marsh, Duncan
Applied geometry for computer graphics and CAD / Duncan Marsh.—2nd ed.
p. cm. — (Springer undergraduate mathematics series)
Includes bibliographical references and index.
ISBN 1-85233-801-6 (alk. paper)
1. Computer graphics. 2. Computer-aided design. 3. Geometry—Data processing. I.
Title. II. Series.
T385.M3648 2004
516—dc22
2004054958
Apart from any fair dealing for the purposes of research or private study, or criticism or review, as permitted under
the Copyright, Designs and Patents Act 1988, this publication may only be reproduced, stored or transmitted, in any
form or by any means, with the prior permission in writing of the publishers, or in the case of reprographic reproduction in accordance with the terms of licences issued by the Copyright Licensing Agency. Enquiries concerning
reproduction outside those terms should be sent to the publishers.
Springer Undergraduate Mathematics Series ISSN 1615-2085
ISBN 1-85233-801-6 2nd edition Springer-Verlag London Berlin Heidelberg
ISBN 1-85233-080-1 1st edition Springer-Verlag London Berlin Heidelberg
Springer Science+Business Media
springeronline.com
© Springer-Verlag London Limited 2005
Printed and bound in the United States of America
First published 1999
Second edition 2005
The use of registered names, trademarks etc. in this publication does not imply, even in the absence of a specific
statement, that such names are exempt from the relevant laws and regulations and therefore free for general use.
The publisher makes no representation, express or implied, with regard to the accuracy of the information contained
in this book and cannot accept any legal responsibility or liability for any errors or omissions that may be made.
Typesetting: Camera ready by the author
12/3830-543210 Printed on acid-free paper SPIN 10946442

To Tine and Emma

Preface to the Second Edition

The second edition of Applied Geometry for Computer Graphics and CAD
features three substantial new sections and an additional chapter. The new
topics, which include discussions of quaternions, surfaces, solid modelling and
rendering, give further insight into the applications of geometry in computer
graphics and CAD. The text has been revised throughout, and supplemented
with further examples and exercises: the second addition contains more than
300 exercises and over 120 illustrations.
In Chapter 3, a new section introduces quaternions, an important method
of representing orientation that is used in computer graphics animation.
Chapter 9 has been expanded to provide two new sections that focus on
the applications of surfaces in CAD: Section 9.6 describes skin and loft surfaces (including Gordon–Coons surfaces), and Section 9.7 discusses geometric
modelling. The chapter also beneﬁts from additional examples of applications
of surfaces; for example, oﬀset and blend surfaces, and shelling and thickening
operations.
A new ﬁnal chapter addresses rendering methods in computer graphics and
CAD, and presents an introduction to silhouettes and shadows.
There is a web site for the book which contains additional information and
further web links:
www.springeronline.com/1-85233-801-6/

Cambridgeshire, UK

Duncan Marsh

vii

Preface to the First Edition

Applied Geometry for Computer Graphics and CAD explores the application of
geometry to computer graphics and computer-aided design (CAD). The textbook considers two aspects: the manipulation and the representation of geometric objects. The ﬁrst three chapters describe how points and lines can be
represented by Cartesian (aﬃne) and homogeneous coordinates. Planar and
spatial transformations are introduced to construct objects from geometric
primitives, and to manipulate existing objects. Chapter 4 describes the method
of rendering three-dimensional objects on a computer screen by application of
a linear projection, and the construction of the complete viewing pipeline. The
material then develops into a study of planar and spatial curves. Conics are
described in some detail, but the main emphasis is a discussion of the two
main curve representations used in CAD packages and in computer graphics,
namely, B´zier and B-spline curves. The techniques of the earlier chapters are
e
applied to these curves in order to manipulate and view them. The important
de Casteljau and de Boor algorithms, for (integral and rational) B´zier and
e
B-spline curves respectively, are derived and applied. The representations of
curves lead naturally into surface representations, namely B´zier, B-spline and
e
NURBS surfaces. The transition is relatively painless since many properties of
the curve representations correspond to similar surface properties. The ﬁnal
chapter introduces curvature for curves and surfaces.
The book includes more than 250 exercises. Some exercises encourage the
reader to implement a number of the techniques and algorithms which are
discussed. These exercises can be carried out using a computer algebra package in order to avoid the complexity of computer programming. Certainly this
is the most accessible route to obtaining quality graphics. Alternatively, the
algorithms can be implemented using the reader’s favourite programming language together with a library of graphics routines (e.g. PHIGS, OpenGL, or
ix

x

Preface to the First Edition

GKS). The two approaches can be mixed as some computer algebra packages
can make use of procedures written in programming languages such as C and
FORTRAN. A number of exercises indicate investigations which would be suitable for coursework, labs or projects.
The book assumes a knowledge of vectors, matrices, and calculus. However,
the course has been taught to engineering and computing students with only
a little knowledge of these topics; with some additional material, these topics
can be taught on a need to know basis. Indeed, the material in the book provides a source of motivation for teaching elementary algebra and calculus to
non-mathematics students. Prerequisite reading on vectors, matrices and continuity of functions can be found in Chapters 4 and 7 of the SUMS series text
Introductory Mathematics: Algebra and Analysis by Geoﬀ Smith.
The author would like to thank a number of people. First, the mathematics,
computing and engineering students at Napier University who took the modules
on which this book is based. Second, my colleagues at Napier University; in
particular, Dr. Winston Sweatman who shares an oﬃce with me (need I say
more!). Finally, my wife Tine and daughter Emma for their continuing love and
support.
Edinburgh, UK

Duncan Marsh

Contents

1.

Transformations of the Plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2 Translations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3 Scaling about the Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.4 Reﬂections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.5 Rotation about the Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.6 Shears . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.7 Concatenation of Transformations . . . . . . . . . . . . . . . . . . . . . . . . .
1.8 Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.8.1 Instancing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.8.2 Robotics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1
1
5
6
8
9
11
13
15
15
17

2.

Homogeneous Coordinates and Transformations
of the Plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.1.1 Homogeneous Coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Points at Inﬁnity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 Visualization of the Projective Plane . . . . . . . . . . . . . . . . . . . . . . .
2.3.1 Line Model of the Projective Plane . . . . . . . . . . . . . . . . . . .
2.3.2 Spherical Model of the Projective Plane . . . . . . . . . . . . . . .
2.4 Transformations in Homogeneous Coordinates . . . . . . . . . . . . . . . .
2.4.1 Translations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4.2 Scaling about the Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4.3 Rotation about the Origin . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.5 Concatenation of Transformations . . . . . . . . . . . . . . . . . . . . . . . . .
2.5.1 Inverse Transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . .

19
19
21
23
24
24
26
27
27
28
29
30
31

xi

xii

Contents

2.5.2 Rotation about an Arbitrary Point . . . . . . . . . . . . . . . . . . .
2.5.3 Reﬂection in an Arbitrary Line . . . . . . . . . . . . . . . . . . . . . .
2.6 Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.6.1 Instancing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.6.2 Device Coordinate Transformation . . . . . . . . . . . . . . . . . . . .
2.7 Point and Line Geometry in Homogeneous Coordinates . . . . . . . .

33
34
36
36
37
38

3.

Homogeneous Coordinates and Transformations of Space . . .
3.1 Homogeneous Coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 Transformations of Space . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2.1 Translations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2.2 Scalings and Reﬂections . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2.3 Rotations about the Coordinate Axes . . . . . . . . . . . . . . . . .
3.2.4 Rotation about an Arbitrary Line . . . . . . . . . . . . . . . . . . . .
3.2.5 Reﬂection in an Arbitrary Plane . . . . . . . . . . . . . . . . . . . . .
3.3 Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.3.1 Computer-aided Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.3.2 Orientation of a Rigid Body . . . . . . . . . . . . . . . . . . . . . . . . .
3.4 Geometric Methods for Lines and Planes in Space . . . . . . . . . . . .
3.5 Quaternions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

41
41
42
42
43
43
45
47
49
49
50
52
56

4.

Projections and the Viewing Pipeline . . . . . . . . . . . . . . . . . . . . . . .
4.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.2 Projections of the Plane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.3 Projections of Three-dimensional Space . . . . . . . . . . . . . . . . . . . . .
4.4 The Viewplane Coordinate Mapping . . . . . . . . . . . . . . . . . . . . . . . .
4.5 The Viewing Pipeline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.6 Classiﬁcation of Projections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.6.1 Classiﬁcation of Parallel Projections . . . . . . . . . . . . . . . . . .
4.6.2 Classiﬁcation of Perspective Projections . . . . . . . . . . . . . . .

67
67
68
72
76
80
85
85
90

5.

Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
5.2 Curve Rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
5.3 Parametric Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
5.4 Arclength and Reparametrization . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
5.5 Application: Numerical Controlled Machining and Oﬀsets . . . . . . 107
5.6 Conics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
5.6.1 Classiﬁcation of Conics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
5.6.2 Conics in Standard Form . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
5.6.3 Intersections of a Conic with a Line . . . . . . . . . . . . . . . . . . . 121
5.6.4 Parametrization of an Irreducible Conic . . . . . . . . . . . . . . 124

Contents

xiii

5.6.5 Converting from Parametric Form to Implicit Form . . . . . 127
5.7 Conics in Space . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
5.8 Applications of Conics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
6.

B´zier Curves I . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
e
6.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
6.2 B´zier Curves of Low Degree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
e
6.2.1 Linear B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
e
6.2.2 Quadratic B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
e
6.2.3 Cubic B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
e
6.3 The Eﬀect of Adjusting a Control Point . . . . . . . . . . . . . . . . . . . . . 140
6.4 The General B´zier Curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
e
6.5 Properties of the Bernstein Polynomials . . . . . . . . . . . . . . . . . . . . . 144
6.6 Convex Hulls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
6.7 Properties of B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
e
6.8 The de Casteljau Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
6.9 Subdivision of a B´zier Curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
e
6.10 Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
6.10.1 Rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
6.10.2 Intersection of a Planar B´zier Curve and a Line . . . . . . . 158
e
6.10.3 Intersection of Two B´zier Curves . . . . . . . . . . . . . . . . . . . . 159
e

7.

B´zier Curves II . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
e
7.1 Spatial B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
e
7.2 Derivatives of B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
e
7.3 Conversions Between Representations . . . . . . . . . . . . . . . . . . . . . . . 166
7.4 Piecewise B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
e
7.5 Rational B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
e
7.5.1 Properties of Rational B´zier Curves . . . . . . . . . . . . . . . . . . 177
e
7.5.2 de Casteljau Algorithm for Rational Curves . . . . . . . . . . . . 180
7.5.3 Projections of Rational B´zier Curves . . . . . . . . . . . . . . . . . 181
e
7.5.4 Derivatives of Rational B´zier Curves . . . . . . . . . . . . . . . . . 185
e

8.

B-splines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
8.1 Integral B-spline Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
8.1.1 Properties of the B-spline Curve . . . . . . . . . . . . . . . . . . . . . . 194
8.1.2 B-spline Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
8.1.3 Application: Font Design . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
8.1.4 Application: Morphing or Soft Object Animation . . . . . . 203
8.1.5 The de Boor Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
8.1.6 Derivatives of a B-spline . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
8.2 Non-uniform Rational B-Splines (NURBS) . . . . . . . . . . . . . . . . . . 212

xiv

Contents

8.2.1
8.2.2
8.2.3
8.3 Knot
9.

Projections of NURBS Curves . . . . . . . . . . . . . . . . . . . . . . . 214
Derivatives of NURBS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
Rational de Boor Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . 218
Insertion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221

Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
9.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
9.2 Quadric Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
9.2.1 Oﬀset Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
9.3 B´zier and B-spline Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
e
9.3.1 Properties of B´zier and B-spline Surfaces . . . . . . . . . . . . . 235
e
9.3.2 Derivatives of B´zier and B-spline Surfaces . . . . . . . . . . . . 238
e
9.4 Surface Constructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
9.4.1 Extruded Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
9.4.2 Ruled Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
9.4.3 Translationally Swept Surfaces . . . . . . . . . . . . . . . . . . . . . . . 244
9.4.4 Surfaces of Revolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
9.5 Surface Subdivision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
9.6 Skin and Loft Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
9.7 Geometric Modelling and CAD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
9.7.1 Wireframe Modeller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
9.7.2 Surface Modeller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
9.7.3 Constructive Solid Geometry (CSG) Modellers . . . . . . . . . 261
9.7.4 Boundary Representations (B-rep) . . . . . . . . . . . . . . . . . . . . 263

10. Curve and Surface Curvatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
10.1 Curvature of a Plane Curve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
10.2 Curvature and Torsion of a Space Curve . . . . . . . . . . . . . . . . . . . . 275
10.3 Curvature of B´zier Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
e
10.4 Surface Curvatures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285
11. Rendering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
11.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
11.2 Colour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
11.3 An Illumination Model for Reﬂected Light . . . . . . . . . . . . . . . . . . . 299
11.3.1 Diﬀuse Reﬂection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
11.3.2 Specular Reﬂection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
11.3.3 Ambient Reﬂection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
11.3.4 Attenuation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
11.3.5 Total Intensity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
11.4 Shading Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306
11.4.1 Flat Shading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307

Contents

xv

11.4.2 Gouraud Shading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307
11.4.3 Phong Shading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
11.5 Silhouettes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
11.6 Shadows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
Solutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347

1

Transformations of the Plane

1.1 Introduction
The two main areas of application which are considered in this textbook are
computer graphics and computer-aided design (CAD). In computer graphics
applications, geometric objects are deﬁned in terms of a number of basic building blocks called graphical primitives. There are primitives which correspond
to points, lines, curves, and surfaces. For example, a rectangle can be deﬁned
by its four sides. Each side is constructed from a line segment primitive by
applying a number of geometric operations, called transformations, which position, orientate or scale the line primitive. Five types of transformation are
particularly relevant in applications, namely, translations, scalings, reﬂections,
rotations, and shears. These are introduced in Sections 1.2–1.6. Applications
of transformations are considered in Section 1.8. In particular, Section 1.8.1
exempliﬁes, in more detail, how objects can be deﬁned by applying transformations to graphical primitives by a process called instancing. Each primitive
has a mathematical representation which can be expressed as a data or type
structure for storage and manipulation by a computer. The mathematical representation of primitives is discussed in Chapters 5–9.
Given a ﬁxed unit of length, and two perpendicular lines of reference called
the x-axis and the y-axis, each point P of the plane is represented by an ordered
pair of real numbers (x, y) such that the perpendicular distance of P from the
y-axis is x units and the distance of P from the x-axis is y units. The ordered
pair (x, y) is called the Cartesian or aﬃne coordinates of P, and the set of all

1

2

Applied Geometry for Computer Graphics and CAD

ordered pairs of real numbers (x, y) is called the Cartesian or aﬃne plane and
denoted R2 . The axes intersect in a point O, with coordinates (0, 0), called the
origin. The point P with coordinates (x, y) will be denoted P(x, y). For the
purposes of computation the point may also be represented by the row vector
(x, y) or the row matrix x y .
For constants A, B, C (A and B not both zero) the set of points (x, y)
satisfying the equation
Ax + By + C = 0
is a line which is said to be deﬁned in implicit form. The line through a point
(p1 , p2 ) in the direction of the vector (v1 , v2 ) can be deﬁned parametrically by
(x(t), y(t)) = (p1 + v1 t, p2 + v2 t) .
Each value of the parameter t corresponds to a point on the line. For instance, evaluating x(t) and y(t) at t = 0 yields the point (p1 , p2 ), and evaluating
at t = 1 yields the point (p1 +v1 , p2 +v2 ). Any parametrically deﬁned line can be
expressed in implicit form by eliminating t from x = p1 + v1 t and y = p2 + v2 t,
to give
v2 x − v1 y + (p2 v1 − p1 v2 ) = 0 .
It also follows that the line with equation Ax+By +C = 0 has the direction
of the vector ±(−B, A) and normal direction (the direction perpendicular to
the line) ±(A, B).
The line through the two points P and Q is denoted PQ. The line segment
PQ (with endpoints P and Q) is the portion of the line PQ between the points
P and Q.

Example 1.1
Consider the line passing through the point (a, b), and making an angle α
with the x-axis. By elementary trigonometry, a point (x, y) on the line satisﬁes
tan(α) = (y − b)/ (x − a). Hence the line is given in implicit form by tan(α)x −
y + b − tan(α)a = 0.

Example 1.2
Consider two lines A1 x + B1 y + C1 = 0 and A2 x + B2 y + C2 = 0 with directions
v =(−B1 , A1 ) and w =(−B2 , A2 ) respectively. Suppose θ is the angle between
the lines. Then the vector identity v · w = |v| |w| cos θ and the trigonometric
identity cos2 θ + sin2 θ = 1 give
cos θ =

A1 A2 +B1 B2
,
1/2
2 1/2
(A2 +B2 )
2

2
(A2 +B1 )
1

sin θ =

A1 B2 −B1 A2
1/2
2 1/2
(A2 +B2 )
2

2
(A2 +B1 )
1

.

1. Transformations of the Plane

3

Hence

A1 B2 − A2 B1
.
A1 A2 + B1 B2
It follows that the two lines are parallel if and only if θ = 0, that is, if and only
if A1 B2 = A2 B1 .
tan θ =

EXERCISES
1.1. Show that the angle α that the line Ax + By + C = 0 makes with
the x-axis is given by tan(α) = −A/B.
1.2. Determine an implicit equation for the line (2+3t, 5−4t). Determine
the angle that the line makes with the x-axis.
1.3. Show that, for points P(p1 , p2 ) and Q(q1 , q2 ), the line PQ has the
parametric form (1 − t)(p1 , p2 ) + t(q1 , q2 ), that is, (x(t), y(t)) = (p1 −
tp1 + tq1 , p2 − tp2 + tq2 ) for t ∈ R. Show also that the segment PQ
is given by the same equation for t ∈ [0, 1].
1.4. Show that A1 x + B1 y + C1 = 0 and A2 x + B2 y + C2 = 0 are perpendicular if and only if A1 A2 + B1 B2 = 0.

Deﬁnition 1.3
A (linear) transformation of the plane is a mapping L : R2 → R2 of the plane
to itself of the form
L(x, y) = (ax + by + c, dx + ey + f ) ,

(1.1)

for some constant real numbers a, b, c, d, e, f . The point P = L(P) is called
the image of P. If S is a subset of R2 , then the set of all points L(x, y), for
(x, y) ∈ S, is called the image of S and denoted L(S).

Example 1.4
Let L(x, y) = (2x + 3y + 4, 5x + 6y + 7). The images of the points (4, 2), (2, 1),
and (0, 0) are L(4, 2) = (18, 39) , L(2, 1) = (11, 23), and L(0, 0) = (4, 7).

Lemma 1.5
If aB − bA and dB − eA are not both zero, then the transformation L given by
(1.1) maps the line Ax + By + C = 0 (A and B not both zero) to the line
(eA − dB) x+(aB − bA) y+(bf − ce) A−(af − cd) B+(ae − bd) C = 0 . (1.2)

4

Applied Geometry for Computer Graphics and CAD

If aB − bA = 0 and eA − dB = 0, then ae − bd = 0 and L maps every point on
the line to the point ((cB − bC) /B, (f B − eC) /B).

Proof
Let L be the transformation given by (1.1). Consider the line Ax + By + C = 0,
and suppose B = 0. (The case B = 0 is left as an exercise to the reader.) Then
A
C
A
C
each point on the line has the form t, − B t − B . So L t, − B t − B = (x, y)
where
(dB − eA) t − eC + f B
(aB − bA) t − bC + cB
and y =
.
(1.3)
x=
B
B
If aB − bA = 0 or dB − eA = 0, then t can be eliminated from equations (1.3)
to give (1.2) and the ﬁrst part of the lemma is proved.
Suppose aB − bA = 0 and eA − dB = 0. Since A and B are not both
zero, it follows that ae − bd = 0. Every point on the line maps to the point
(X, Y ) = ((cB − bC) /B, (f B − eC) /B).

Deﬁnition 1.6
A transformation L given by (1.1) is said to be singular whenever
a b
d e

= ae − bd = 0 ,

(1.4)

and non-singular otherwise.

EXERCISES
1.5. The proof of Lemma 1.5 shows that whenever a linear transformation
L given by (1.1) maps a line to a point, then aB −bA = dB −eA = 0.
Hence ae − bd = 0, and L is singular. Show the converse, that if L is
singular (so that ae−bd = 0), then there exists a line Ax+By+C = 0
which is mapped by L to a point.
1.6. Suppose L is a non-singular transformation. Show that the line segment with endpoints P(p1 , p2 ) and Q(q1 , q2 ) maps to the line segment with endpoints L(P) and L(Q).

Remark 1.7
Throughout the book the term object is used rather vaguely. A planar object
is a subset of R2 , and a spatial object is a subset of R3 . In most applications

1. Transformations of the Plane

5

an object has a geometrical structure such as that of being a “point”, a “line”,
a “curve”, a “collection of curves”, or a “region of points”.

1.2 Translations
A translation is a transformation which maps a point P(x, y) to a point
P (x , y ) by adding a constant amount to each coordinate so that
x = x + h,

y =y+k ,

for some constants h and k. The translation has the eﬀect of moving P in the
direction of the x-axis by h units, and in the direction of the y-axis by k units.
If P and P are written as row vectors, then
(x , y ) = (x, y) + (h, k) .
To translate an object it is necessary to add the vector (h, k) to every point of
that object. The translation is denoted T (h, k). A translation can also be executed using matrix addition if (x, y) is represented as the row matrix x y .

5

5

4

4
D

3
1
0

1

2

2

3

3
2

B

A

1
0

B

A
0

4
C

3
C

2

5
D

4

5

0

6

(a) Original quadrilateral

D

1
0
1

2

3

4

5

6

C

A
0

(b) Eﬀect of a translation

1

2

B
3

4

5

6

(c) Eﬀect of a scaling

Figure 1.1

Example 1.8
Consider a quadrilateral with vertices A(1, 1), B(3, 1), C(2, 2), and D(1.5, 3).
Applying the translation T (2, 1) , the images of the vertices are
A

=

(1, 1) + (2, 1) = (3, 2) ,

B

=

(3, 1) + (2, 1) = (5, 2) ,

C

=

(2, 2) + (2, 1) = (4, 3) , and

D

=

(1.5, 3) + (2, 1) = (3.5, 4) .

Figure 1.1 shows (a) the original, and (b) the translated quadrilateral.

6

Applied Geometry for Computer Graphics and CAD

Deﬁnition 1.9
The transformation which leaves all points of the plane unchanged is called
the identity transformation and denoted I. The inverse transformation of L,
denoted L−1 , is the transformation such that (i) L−1 maps every image point
L(P) back to its original position P, and (ii) L maps every image point L−1 (P)
to P. Inverse transformations will be discussed further in Section 2.5.1.

Example 1.10
Consider the translation T (h, k) which maps a point P(x, y) to P (x+h, y +k).
The transformation T−1 required to map P back to P is the inverse translation
T (−h, −k). For instance, applying T (−2, −1) to the point A of Example 1.8
gives (3, 2) + (−2, −1) = (1, 1), and hence maps A back to A. The reader
can check that the same translation returns the other images to their original
locations.

Exercise 1.7
(a) Apply the translation T (3, −2) to the quadrilateral of Example 1.8,
and make a sketch of the transformed quadrilateral.
(b) Determine the inverse transformation of T (3, −2). Apply the inverse
to the transformed quadrilateral to verify that the inverse returns
the quadrilateral to its original position.

1.3 Scaling about the Origin
A scaling about the origin is a transformation which maps a point P(x, y) to
a point P (x , y ) by multiplying the x and y coordinates by non-zero constant
scaling factors sx and sy , respectively, to give
x = sx x and y = sy y .
A scaling factor s is said to be an enlargement if |s| > 1, and a contraction if
|s| < 1. A scaling transformation is said to be uniform whenever sx = sy . By
representing a point (x, y) as a row matrix x y , the scaling transformation
can be performed by a matrix multiplication
P =

x

y

sx
0

0
sy

=

sx x

sy y

.

1. Transformations of the Plane

7

The matrix
S(sx , sy ) =

sx
0

0
sy

is called the scaling transformation matrix .

Example 1.11
To apply the scaling transformation S(2, 0.5) to the quadrilateral of Example 1.8, the coordinates of the four vertices of the quadrilateral are represented
by the rows of the 4 × 2 matrix
⎛
⎞ ⎛
⎞
A
1
1
⎜ B ⎟ ⎜ 3
1 ⎟
⎜
⎟ ⎜
⎟ ,
⎝ C ⎠=⎝ 2
2 ⎠
D
1.5 3
and multiplied by the scaling transformation matrix
⎛
⎞ ⎛
⎞
⎛
A
1
1
⎜ B ⎟ ⎜ 3
⎜
1 ⎟ 2 0
⎜
⎟ ⎜
⎟
=⎜
⎝ C ⎠=⎝ 2
⎠ 0 0.5
⎝
2
D
1.5 3

2
6
4
3

⎞
0. 5
0. 5 ⎟
⎟ .
1 ⎠
1. 5

The rows of the resulting matrix are the coordinates of the images of the vertices. The original quadrilateral and its scaled image are shown in Figures 1.1(a)
and (c). The quadrilateral is scaled by a factor 2 in the x-direction and by a
factor 0.5 in the y-direction.

Remark 1.12
The quadrilateral of Example 1.11 has experienced a translation due to the
fact that scaling transformations are performed about the origin O. (Scalings
about an arbitrary point are considered in Section 2.4.2.) The true eﬀect of a
−→
−
scaling about the origin is to scale the position vectors OP of each point P
−→ −→ −→
−
−
−
−→
−
in the plane. For instance, in Example 1.11 vectors OA, OB, OC, and OD
have been scaled by the factors 2 and 0.5 in the x- and y-directions as shown in
Figure 1.2. Since the positions of all four points A, B, C, and D have changed,
there is a combined eﬀect of scaling and translating of the object. The origin
is the only point unaﬀected by a scaling about the origin.

8

Applied Geometry for Computer Graphics and CAD

5

5

4

4

D

3

3

C

2

0

2

A

1
0

B

1

2

3

D

1

4

5

6

0

C

A

0

1

2

B

3

4

5

6

Eﬀect of scaling on position vectors

Figure 1.2

EXERCISES
1.8. Apply the scaling transformation S(−1, 1) to the quadrilateral of
Example 1.8. Describe the eﬀect of the transformation.
1.9. Show that the inverse transformation S(sx , sy )−1 of a scaling S(sx , sy )
(with sx = 0 and sy = 0) is the scaling S(1/sx , 1/sy ).

1.4 Reﬂections
Two eﬀects which are commonly used in CAD or computer drawing packages
are the horizontal and vertical “ﬂip” or “mirror” eﬀects. Pictures which have
undergone a horizontal or vertical ﬂip are shown in Figure 1.3(a). A ﬂip of an
object is obtained by applying a transformation known as a reﬂection. Consider
a ﬁxed line in the plane. The reﬂected image of a point P, a distance d from
, is determined as follows. If d = 0 then P is a point on and the image is P.
Otherwise, take the unique line 1 through P and perpendicular to . Then, as
showed in Figure 1.3(b), there are two distinct points on 1 , P and P , which
are a distance d away from . The point P is the required image of P.
It is easily veriﬁed that the reﬂection Rx in the x-axis is the transformation
L(x, y) = (x, −y), and the reﬂection Ry in the y-axis is L(x, y) = (−x, y). The
reﬂection Rx can be computed by the matrix multiplication
Rx

x

y

=

x

y

1
0
0 −1

=

x −y

,

Ry

x

y

=

x

y

−1
0

=

−x

.

and Ry by
0
1

y

The reﬂection Ry was encountered in Exercise 1.8. Reﬂections in arbitrary lines
are discussed in Section 2.5.3.

1. Transformations of the Plane

siht peeK
pu edis

Horizontal
flip

9

Keep this
side up

Vertical
flip

l

5
4
P

3

l

2

P

siht peeK
pu edis

1
0

(a) Horizontal and vertical ﬂips

0

1

2

3

4

5

(b) Reﬂection in the line

Figure 1.3

EXERCISES
1.10. Apply the reﬂection Rx to the quadrilateral of Example 1.8.
1.11. Verify that Rx = S(1, −1) and Ry = S(−1, 1).
1.12. Show that the inverse of Rx is Rx , that is, R−1 = Rx . Similarly, show
x
that R−1 = Ry .
y

1.5 Rotation about the Origin
A rotation about the origin through an angle θ has the eﬀect that a point
P(x, y) is mapped to a point P (x , y ) so that the initial point P and its image
point P are the same distance from the origin, and the angle between lines
OP and OP is θ. There are two possible image points which satisfy these
properties depending on whether the rotation is carried out in a clockwise or
anticlockwise direction. It is the convention that a positive angle θ represents
an anticlockwise direction so that a π/2 rotation about the origin maps points
on the x-axis to points on the y-axis.
Referring to Figure 1.4, let P (x , y ) denote the image of a point P(x, y)
following a rotation about the origin through an angle θ (in an anticlockwise
direction). Suppose the line OP makes an angle φ with the x-axis, and that
P is a distance r from the origin. Then (x, y) = (r cos φ, r sin φ). P makes an
angle θ + φ with the x-axis, and therefore (x , y ) = (r cos(θ + φ), r sin(θ + φ)).
The addition formulae for trigonometric functions yield
x

= r cos(θ + φ) = r cos θ cos φ − r sin θ sin φ = x cos θ − y sin θ , and

y

= r sin(θ + φ) = r sin θ cos φ + r cos θ sin φ = x sin θ + y cos θ .

10

Applied Geometry for Computer Graphics and CAD

5

P

4
3

P

2

q

1
0

0

1

f

2

3

4

5

Rotation of a point P about the origin

Figure 1.4

The coordinates (x , y ) can be obtained from (x, y) by the matrix multiplication
P =

x

cos θ
− sin θ

y

sin θ
cos θ

=

x cos θ − y sin θ

x sin θ + y cos θ

.

The matrix
Rot (θ) =

cos θ
− sin θ

sin θ
cos θ

is called the rotation matrix.

Example 1.13
The rotation matrices of rotations about the origin through π/2, π, and 3π/2
radians are
0
−1

Rot (π/2) =

1
0

, Rot (π) =

−1
0

0
−1

, Rot (3π/2) =

0 −1
1
0

.

Example 1.14
Applying the rotation Rot (π/2) to the quadrilateral of Example 1.8, gives the
points
⎞ ⎛
⎞
⎛
⎛
⎞
1
1
A
−1 1
⎜ B ⎟ ⎜ 3
⎜ −1 3 ⎟
1 ⎟
0 1
⎟ ⎜
⎟
⎜
⎟
=⎜
⎝ C ⎠=⎝ 2
⎝ −2 2 ⎠ .
2 ⎠ −1 0
D

1.5

3

−3

The image of the quadrilateral is shown in Figure 1.5.

1. 5

1. Transformations of the Plane

11

C

B

4
D

3

C

A

D

2
1

A

B

0
-3

-2

-1

0

1

2

3

4

-1

Rotation of the quadrilateral about the origin through π/2

Figure 1.5

EXERCISES
1.13. Apply rotations about the origin through the angles π/3, 2π/3, and
π/4 to the triangle with vertices P(1, 1), Q(3, 1), and R(2, 2). Sketch
the resulting triangles.
−1

1.14. Show that Rot (θ)

= Rot (−θ).

1.15. Do the transformations Rot (π/2) and Ry have the same eﬀect?

1.6 Shears
Given a ﬁxed direction in the plane speciﬁed by a unit vector v = (v1 , v2 ),
consider the lines d with direction v and a distance d from the origin as shown
in Fig.ure 1.6. A shear about the origin of factor r in the direction v is deﬁned
to be the transformation which maps a point P on d to the point P = P+rdv.
Thus the points on d are translated along d (that is, in the direction of v)
through a distance of rd. Shears can be used to obtain italic fonts from normal
fonts (see Section 8.1.3).

Example 1.15
To determine a shear in the direction of the x-axis with factor r, let v = (1, 0).
The line in the direction of v through an arbitrary point P(x0 , y0 ) has the
equation y = y0 . The line is a distance y0 from the origin. Thus P is mapped
to P (x0 + ry0 , y0 ) and hence
x

y

=

x0 + ry0

y0

=

x

y

1 0
r 1

.

12

Applied Geometry for Computer Graphics and CAD

4

ld

3
2

v

1
-3 -2 -1 0 0
-1

1

2

3

5

4

d

-2

Figure 1.6

Shear in the direction v

The general shear transformation matrix is determined as follows. The line
through P(x0 , y0 ) with direction v = (v1 , v2 ) has the equation
v2 x − v1 y + (v1 y0 − v2 x0 ) = 0 .
Since v is a unit vector, the distance from this line to the origin is
d = v1 y0 − v2 x0 .
There are two lines a given distance away from the origin with a speciﬁed
direction, and the lines on either side of 0 (denoting the line through the
origin with direction v) are distinguished by the sign of v1 y0 − v2 x0 . It follows
that the shear transformation maps P(x0 , y0 ) to
P = P + rdv = (x0 + r(v1 y0 − v2 x0 )v1 , y0 + r(v1 y0 − v2 x0 )v2 ) .
Thus the shear has transformation matrix
Sh(v, r) =

1 − rv1 v2
2
rv1

2
−rv2
1 + rv1 v2

.

In particular,
Sh((1, 0), r) =

1
r

0
1

verifying the result of Example 1.15.

Example 1.16

√
√
The shear in the direction v = 2
5 ,1
5 with a factor r = 1.5 has transformation matrix
⎞
⎛
2
2
1
1
√
√
√
−1.5
√
√
⎟
⎜ 1 − 1.5
5
5
5
5 ,1
5 , 1.5 = ⎝
Sh 2
⎠
2
2
2
1
√
√
√
1.5
1 + 1.5
5
5
5
=

0. 4
1. 2

−0. 3
1. 6

.

1. Transformations of the Plane

13

Applying the shear to the quadrilateral of Example 1.8,
⎛
⎞
⎛
1
1
1. 6 1. 3
⎜ 3
⎟ 0. 4 −0. 3
⎜ 2. 4 0. 7
1 ⎟
⎜
=⎜
⎝ 2
⎝ 3. 2 2. 6
2 ⎠ 1. 2
1. 6
1.5 3
4. 2 4. 35

⎞
⎟
⎟ .
⎠

The eﬀect of the shear is shown in Figure 1.7.

5

D

4
D

3
2

A A

1
0

C

C

0

1

B

2

B

3

4

5

Figure 1.7

Exercise 1.16
Determine the transformation matrix for a shear with (a) direction
(3, −4) and factor r = 4, and (b) direction (8, 6) and factor r = −1.

1.7 Concatenation of Transformations
In many applications it is desirable to apply more than one transformation to
an object. For instance, a translation and a rotation may be required to position
and orientate an object. The process of following one transformation by another
to form a new transformation with a combined eﬀect is called concatenation or
composition of transformations. The term concatenation is the most commonly
used in computer graphics. All of the transformations described in the earlier
sections can be concatenated to obtain new transformations.

14

Applied Geometry for Computer Graphics and CAD

Example 1.17
A rotation about the origin through an angle π/3 is obtained by applying the
matrix Rot (π/3)
=

x y

=

y

x

x y

cos(π/3) sin(π/3)
− sin(π/3) cos(π/3)
√
3/2
1/2
√
.
1/2
− 3/2

Next apply a scaling by a factor of 6 in the x-direction and 2 in the y-direction
x

y

=
=

x

y

x y

6
0

0
2

√1/2
− 3/2

√

3/2
1/2

6
0

0
2

.

Hence, the concatenated transformation has transformation matrix
√
√
3/2
3
6 0
3
√1/2
√
.
=
1/2
− 3/2
−3 3 1
0 2
A problem is encountered whenever translations are concatenated with
other types of transformation since it is necessary to combine a matrix (or
vector) addition for the translation with a matrix multiplication for the other
transformations. This is an awkward procedure remedied only by the introduction of homogeneous coordinates, as discussed in Chapter 2. Thus concatenation will not be discussed any further, and the approach of using 2 × 2 matrix
multiplications will be abandoned. The homogeneous coordinate system oﬀers
the following advantages for the execution of transformations.
1. All transformations can be represented by matrices, and performed by matrix multiplication.
2. Concatenation of transformations is performed by matrix multiplication of
the transformation matrices.
3. Inverse transformations are obtained by taking a matrix inverse.
The eﬀort expended has not been in vain since the “homogeneous” transformation matrices are closely related to those described in this chapter.

1. Transformations of the Plane

15

1.8 Applications
1.8.1 Instancing
A geometric object is created by deﬁning the diﬀerent parts which make up
the object. For example, the front of a house in Figure 1.8 consists of a number of rectangles, or rather scaled squares, which form the walls, windows, and
door of the house. The square is an example of a picture element. For convenience, picture elements are deﬁned in their own local coordinate system called
the modelling coordinate system, and are constructed from graphical primitives
which are the basic building blocks. Picture elements are deﬁned once, but may
be used many times in the construction of objects. The number and type of
graphical primitives available depends on the computer graphics system.

5
4
3
2
1
0

Figure 1.8

0

1

2

3

4

5

Front of a house obtained from instances of Square and Point

For example, a square with vertices (0, 0), (1, 0), (1, 1), and (0, 1) can be
obtained using the graphical primitive for the line segment, denoted Line,
which joins the points (0, 0) and (1, 0). One possible construction of the square
is obtained in the following manner.
1. Draw Line. This produces the horizontal base of the square.
2. Apply a rotation about the origin through an angle π/2 to a copy of Line,
and then apply a translation of 1 unit in the x-direction. This gives the
right vertical edge of the square.
3. Apply a translation of 1 unit in the y-direction to a copy of Line. This
gives the top of the square.
4. Apply a rotation about the origin through an angle π/2 to a copy of Line.
This gives the left vertical edge of the square.

16

Applied Geometry for Computer Graphics and CAD

A transformed copy of a graphical primitive or picture element is called an
instance. The square, denoted Square, is deﬁned by four instances of Line as
depicted in Figure 1.9.
(0,1)

(0,0)

(0,0)

Figure 1.9

(1,1)

(1,0)

(1,0)

Square obtained from four instances of Line

The completed “real” object is deﬁned in world coordinates by applying
a modelling coordinate transformation to each picture element. The house of
Figure 1.8 is deﬁned by six instances of the picture element Square, and one
instance of the primitive Point (for the door handle). In particular, the front
door is obtained by applying a scaling of 0.5 unit in the x-direction, followed
by a translation of 3 units in the x-direction and 1 unit in the y-direction.
The line primitive of most graphics systems will be more sophisticated than
the one described above: the line primitive might be deﬁned by two arbitrary
points, or the system might have a polyline primitive consisting of a chain of
line segments connecting a sequence of user speciﬁed points.
In the above discussion, instancing has been described in words since without homogeneous coordinates the concatenation of transformations is awkward.
In the proposed homogeneous coordinate system described in the next chapter
each instance of a picture element or object can be represented by a single
modelling transformation matrix.

EXERCISES
1.17. Each window and the outline of the house is obtained by instances
of Square. Describe in words the sequence of transformations used
for each instance.
1.18. Investigate the graphical primitives available in graphics systems
such as PHIGS, GKS, and OpenGL. See for example [14] and the
web page for the book.

1. Transformations of the Plane

17

1.8.2 Robotics
The Denavit–Hartenberg notation, a standard representation used to deﬁne a
robotic mechanism, describes how each rigid link of a mechanism is related
to the neighbouring link (or links) by means of transformations. To exemplify
this, consider a planar 2R robot manipulator arm (Figure 1.10) consisting of
two links. The ﬁrst link is attached to the base by a revolute joint J1 . A revolute
joint permits the link to rotate about a point. The second link is attached to
the ﬁrst link by a second revolute joint J2 . The robot hand or end eﬀector is
attached to the second link. The position and orientation of the robot hand is
controlled by turning the links about the two joints.
y
X
Y
q2
J1

Figure 1.10

q1

J2
x

2R robot manipulator

Deﬁne an (x, y)-coordinate system with J1 as the origin as shown in Figure 1.10. The second link is given its own (X, Y )-coordinate system with J2 as
the origin. Let d be the distance between J1 and J2 , and let the angles between
links 1 and 2 and the x-axis be θ1 and θ2 respectively. The position and orientation of the second link is obtained by applying a rotation Rot(θ2 ) followed
by a translation T(d cos θ1 , d sin θ1 ). Given the (X, Y ) coordinates of a point P,
the (x, y)-coordinates of P are obtained by the transformation
y

cos θ2
− sin θ2

sin θ2
cos θ2

=

X

=

x

X cos θ2 − Y sin θ2 + d cos θ1

Y

+

d cos θ1

d sin θ1

X sin θ2 + Y cos θ2 + d sin θ1

.

The ultimate aim is to express such concatenations with one matrix multiplication with the assistance of homogeneous coordinates.

18

Applied Geometry for Computer Graphics and CAD

EXERCISES
1.19. Suppose an aﬃne transformation L(x, y) = (ax + by + c, dx + ey + f )
is applied to a triangle T with vertices A, B, C and area A. Show
that the area of L(T ) is (ad − bc) · A.
1.20. Prove that a transformation maps the midpoint of a line segment to
the midpoint of the image.
1.21. Write a computer program or use a computer package to implement
the various types of transformation. Apply the program to the examples of the chapter.

2

Homogeneous Coordinates and
Transformations of the Plane

2.1 Introduction
In Chapter 1 planar objects were manipulated by applying one or more transformations. Section 1.7 identiﬁed the problem that the concatenation of a translation with a rotation, scaling or shear requires an awkward combination of a
matrix addition and a matrix multiplication. The problem can be avoided by
using an alternative coordinate system for which computations are performed
by 3 × 3 matrix multiplications. Since
⎛
⎞
a d 0
=
x y 1 ⎝ b e 0 ⎠
x y 1
c f 1
=

ax + by + c

dx + ey + f

1

(2.1)

it follows that
x = ax + by + c and y = dx + ey + f .
To this end a new coordinate system is deﬁned in which the point with Cartesian coordinates (x, y) is represented by the homogeneous or projective coordinates (x, y, 1), or any multiple (rx, ry, r) with r = 0. The set of all homogeneous
coordinates (x, y, w) is called the projective plane and denoted P2 . In order to
carry out transformations using matrix computations the homogeneous coordinates (x, y, w) are represented by the row matrix (x y w). Equation (2.1)
19

20

Applied Geometry for Computer Graphics and CAD

implies that any planar transformation can be performed by a 3 × 3 matrix
multiplication and using homogeneous coordinates. Sometimes homogeneous
coordinates will be denoted by capitals (X, Y, W ) in order to distinguish them
from the aﬃne coordinates (x, y).

Example 2.1
1. (1, 2, 3), (2, 4, 6), and (−1, −2, −3) are all homogeneous coordinates of the
point (1/3, 2/3) since
(1/3, 2/3, 1) =

1
1
(1, 2, 3) = (2, 4, 6) = (−1)(−1, −2, −3) .
3
6

2. The Cartesian coordinates of the point with homogeneous coordinates
(X, Y, W ) = (6, 4, 2) are obtained by dividing the coordinates through by
W = 2 to give alternative homogeneous coordinates (3, 2, 1). Thus the
Cartesian coordinates of the point are (x, y) = (3, 2).

EXERCISES
2.1. Which of the following homogeneous coordinates (2, 6, 2), (2, 6, 4),
(1, 3, 1), (−1, −3, −2), (1, 3, 2), and (4, 12, 8) represent the point
(1/2, 3/2)?
2.2. Write down two sets of homogeneous coordinates of (2, −3).
2.3. A point has Cartesian coordinates (5, −20) and homogeneous coordinates (−5, ?, −1) and (10, −40, ?). Fill in the missing entries indicated by a “?”.

Deﬁnition 2.2
A (projective) transformation of the projective plane is a mapping L : P2 → P2
of the form
⎛
⎞
a d g
L(x, y, w) =
(2.2)
x y w ⎝ b e h ⎠
c f k
=

(ax + by + cw, dx + ey + f w, gx + hy + kw) ,

(2.3)

for some constant real numbers a, b, c, d, e, f , g, h, k. A matrix which represents a linear transformation of the projective plane is called a homogeneous
transformation matrix. When g = h = 0 and k = 0, L is said to be an aﬃne

Homogeneous Coordinates andTransformations of the Plane

21

transformation. Aﬃne transformations correspond to transformations of the
Cartesian plane.

Remark 2.3
If alternative homogeneous coordinates (rx, ry, rw) are taken in (2.2) then
L(rx, ry, rw) = (arx + bry + crw, drx + ery + f rw, grx + hry + krw) ,
and dividing through by r gives the homogeneous coordinates (2.3). Thus
L(rx, ry, rw) and L(x, y, w) map to the same point, and therefore the deﬁnition
of a transformation does not depend on the choice of homogeneous coordinates
for a given point.

2.1.1 Homogeneous Coordinates
A more formal deﬁnition of homogeneous coordinates is obtained in terms of
an equivalence relation.

Deﬁnition 2.4
A relation ∼ on a set S is a rule which determines whether two members of the
set S are considered related or not. If s1 is related to s2 , then this is expressed
by writing s1 ∼ s2 .

Example 2.5
“Greater than”, with its usual meaning, is a relation on R. The relationship
“3 is greater than 2” is written 3 ∼ 2. The relation “greater than” is generally
written 3 > 2 where the symbol ∼ is substituted by >. The number 2 is not
related to 3 since it is not true that 2 > 3.

Deﬁnition 2.6
A relation ∼ on a set S is said to be
1. reﬂexive if s ∼ s for all s in S;
2. symmetric if whenever s1 ∼ s2 , then s2 ∼ s1 ;
3. transitive if whenever s1 ∼ s2 and s2 ∼ s3 , then s1 ∼ s3 ;
4. an equivalence relation if ∼ is reﬂexive, symmetric, and transitive.

22

Applied Geometry for Computer Graphics and CAD

Example 2.7
The relation > on R is transitive, but not reﬂexive or symmetric. The relations
≥ and ≤ are both reﬂexive and transitive, but not symmetric. The most familiar
equivalence relation on R is =.

Deﬁnition 2.8
Let s1 be a member of S. The subset of S, consisting of every s in S which
is related to s1 , is called the equivalence class of s1 and denoted by [s1 ]. A
member of an equivalence class [s1 ] is called a representative of [s1 ]. Clearly, if
s is a representative of [s1 ] then s ∼ s1 .
Homogeneous coordinates arise as equivalence classes determined by the
following lemma which deﬁnes an equivalence relation on S = R3 \{(0, 0, 0)}
(that is, S consists of all R3 excluding the origin).

Lemma 2.9
The relation ∼ on the set S = R3 \{(0, 0, 0)} deﬁned by
(x0 , y0 , w0 ) ∼ (x1 , y1 , w1 ) ⇔ (x1 , y1 , w1 ) = r(x0 , y0 , w0 ) for some r = 0
is an equivalence relation.

Proof
1. The relation ∼ is reﬂexive since (x0 , y0 , w0 ) = 1(x0 , y0 , w0 ).
2. The relation ∼ is symmetric since if (x0 , y0 , w0 ) ∼ (x1 , y1 , w1 ), then
(x1 , y1 , w1 ) = r(x0 , y0 , w0 ) for some r = 0. Thus (x0 , y0 , w0 ) = 1 (x1 , y1 , w1 ),
r
and hence (x1 , y1 , w1 ) ∼ (x0 , y0 , w0 ).
3. Suppose (x0 , y0 , w0 ) ∼ (x1 , y1 , w1 ), and (x1 , y1 , w1 ) ∼ (x2 , y2 , w2 ). Then
(x1 , y1 , w1 ) = r1 (x0 , y0 , w0 ) for some r1 = 0, and (x2 , y2 , w2 ) = r2 (x1 , y1 , w1 )
for some r2 = 0. So
(x2 , y2 , w2 ) = r2 (x1 , y1 , w1 ) = r2 r1 (x0 , y0 , w0 ), for r2 r1 = 0 ,
and hence (x2 , y2 , w2 ) ∼ (x0 , y0 , w0 ). Hence ∼ is transitive.

The equivalence classes [(x, y, w)] are the sets
[(x, y, w)] = { r(x, y, w) | r ∈ R, r = 0 } .

Homogeneous Coordinates andTransformations of the Plane

23

The projective plane P2 is deﬁned to be the set of all equivalence classes. An
equivalence class is referred to as a point of the projective plane.
In practice, operations of the projective plane are carried out by taking a
representative for each equivalence class. Homogeneous coordinates (X, Y, W )
with W = 0 have a representative of the form (x, y, 1) where x = X/W , and
y = Y /W . Thus there is a 1 − 1 correspondence between points (x, y) of the
Cartesian plane and points (X, Y, W ) in the projective plane with W = 0.
Points with W = 0 are discussed in Section 2.2. Then, a transformation is a
mapping of equivalence classes, that is, a mapping of points in the projective
plane. Remark 2.3 states that the deﬁnition of a transformation does not depend
on the choice of the representative of an equivalence class.

Exercise 2.4
Deﬁne a relation ∼ on non-singular 3 × 3 matrices by M1 ∼ M2 if and
only if M1 = µM2 for some µ = 0. Show that ∼ is an equivalence relation.

2.2 Points at Inﬁnity
Homogeneous coordinates of the form (x, y, 0) do not correspond to a point in
the Cartesian plane, but represent the unique point at inﬁnity in the direction
(x y). To justify this remark, consider the line (x(t), y(t)) = (tx + a, ty + b)
through the point (a, b) with direction (x y). The point (tx + a, ty + b) has
homogeneous coordinates (tx + a, ty + b, 1) and multiplying through by 1/t
(for t = 0) gives alternative homogeneous coordinates (x + a/t, y + b/t, 1/t).
Points on the line an inﬁnite distance away from the origin in the Cartesian
plane may be obtained by letting t tend to inﬁnity. The limiting point of (x +
a/t, y + b/t, 1/t) as t → ∞ is (x, y, 0). Therefore, it is natural to interpret the
homogeneous coordinates (x, y, 0) as the point at inﬁnity in the direction (x, y).
The projective plane may be interpreted as the Cartesian plane together with
all the points at inﬁnity.
The projective plane also makes sense of the intuitive notion that two parallel lines intersect at inﬁnity. For instance, consider the parallel lines
x + 2y

=

1 , and

(2.4)

x + 2y

=

2.

(2.5)

Let (X, Y, W ) be homogeneous coordinates of a point (x, y) on the line (2.4).
Then (x, y) = (X/W, Y /W ) and hence
(X/W ) + 2 (Y /W ) = 1 .

24

Applied Geometry for Computer Graphics and CAD

Multiplying through by W , yields the homogeneous equation of the line
X + 2Y = W .

(2.6)

Similarly, the homogeneous equation of (2.5) is
X + 2Y = 2W .

(2.7)

Equations (2.6) and (2.7) have common solutions of the form (−2r, r, 0). The
solutions are all homogeneous coordinates of the point (−2, 1, 0) which is the
unique point of intersection of the parallel lines. It is easily veriﬁed that
(−2, 1, 0) is the point at inﬁnity in the direction of the lines. A similar argument yields that all parallel lines intersect in a unique point at inﬁnity.

EXERCISES
2.5. Find the point at inﬁnity in the direction of the vector (6, −3).
2.6. Find the point at inﬁnity on the line 4x − 3y + 1 = 0.
2.7. Determine the homogeneous equation of the line 3x + 4y = 5.
2.8. Determine the homogeneous coordinates of the point at inﬁnity
which is the intersection of the lines 2x − 9y = 5 and 2x − 9y = 7.
Verify that the intersection is the point at inﬁnity in the direction
of the lines.
2.9. Determine the point at inﬁnity on the line ax + by + c = 0. Conclude
that all lines in the direction (−b, a) intersect in a unique point at
inﬁnity.

2.3 Visualization of the Projective Plane
There are two models that interpret homogeneous coordinates geometrically,
and hence enable the projective plane to be visualized.

2.3.1 Line Model of the Projective Plane
The line model of the projective plane is obtained by representing the point
with homogeneous coordinates µ(X, Y, W ), µ = 0, by the line through the origin
with direction (X, Y, W ) in (X, Y, W )-space. Since the point with Cartesian coordinates (x, y) has homogeneous coordinates of the form (X, Y, W ) = r(x, y, 1)

Homogeneous Coordinates andTransformations of the Plane

25

for r = 0, there is a 1 − 1 correspondence between points (x, y) of the Cartesian
plane and the lines
{ r(x, y, 1) | r ∈ R }
(2.8)
as illustrated in Figure 2.1. There is also a 1 − 1 correspondence between the
points (x, y) and the points (x, y, 1) of the W = 1 plane.
2 W

1
(x,y,1)
1

2

3

X 4

-1
1

0

-1

2

3

4 Y

The line model of the projective plane

Figure 2.1

The W = 1 plane is inadequate for studying the projective plane since
points at inﬁnity do not correspond to points in the W = 1 plane, nor to lines
of the form (2.8). Instead, points at inﬁnity correspond to lines in the W = 0
plane. For example, the parallel lines (2.4) and (2.5) correspond to the planes
in (X, Y, W )-space deﬁned by Equations (2.6) and (2.7). The planes intersect
in a line through the origin in the W = 0 plane as shown in Figure 2.2. The line
is parametrized by (−2t, t, 0) and corresponds to the point at inﬁnity (−2, 1, 0)
which is the intersection of the two parallel lines. The diﬃculty with the line
model is that lines in the projective plane correspond to planes in the model,
and more generally, curves in the projective plane correspond to surfaces. To
visualize curves in the projective plane the spherical model is introduced.

1

W 0

-1
-1

0
Y

1

1

0

-1
X

Figure 2.2
Intersection of planes corresponding to parallel lines in the
Cartesian plane

26

Applied Geometry for Computer Graphics and CAD

2.3.2 Spherical Model of the Projective Plane
The spherical model of the projective plane is obtained by representing the
point with homogeneous coordinates µ(X, Y, W ), µ = 0, by the points of intersection of the line through the origin with direction (X, Y, W ) and the unit
sphere centred at the origin X 2 + Y 2 + W 2 = 1 as illustrated in Figure 2.3.
The intersections are the antipodal points
±

X
Y
W
,
,
X2 + Y 2 + W 2 X2 + Y 2 + W 2 X2 + Y 2 + W 2

.

Since antipodal points on the sphere correspond to the same point in the projective plane, it suﬃces to consider the upper half-sphere together with (half
of) the equator. (The equator is the circle of intersection of the sphere with the
W = 0 plane.) Points at inﬁnity (X, Y, 0) correspond to points on the equator.
1

W
0

-1
-1
Y0 1
1

0X

-1

Figure 2.3
Spherical model of the projective plane. Antipodal points represent the same homogeneous point.
Thus the sphere provides a way of visualizing all homogeneous coordinates.
For instance, the intersection of parallel lines can be visualized in the spherical
model. Lines in the Cartesian plane correspond to planes which intersect the
sphere in a great circle. The intersection of two parallel lines corresponds to the
intersection of the two great circles on the sphere, namely, two antipodal points
at inﬁnity on the equator. Figure 2.4 shows how two great circles, representing
√
√
5 ,1
5 , 0)
the lines√
(2.4) and (2.5), intersect in the antipodal points (−2
√
5 , 0) on the equator.
5 , −1
and (2

Homogeneous Coordinates andTransformations of the Plane

27

1

W0

-1
-1

Y0
1 1

0

X

-1

Figure 2.4
Intersection of parallel lines on the spherical model of the
projective plane

2.4 Transformations in Homogeneous
Coordinates
In the following sections the homogeneous transformation matrices for translations, scalings, and rotations are described. In order to minimize on notation,
a transformation and its homogeneous transformation matrix will be given the
same notation. For instance, a translation and its translation matrix are both
denoted T (h, k).

2.4.1 Translations
The homogeneous translation matrix for the
⎛
1 0
T (h, k) = ⎝ 0 1
h k
Then

⎛
x

y

1

1
⎝ 0
h

0
1
k

⎞
0
0 ⎠=
1

translation T (h, k) is
⎞
0
0 ⎠ .
1

x+h

y+k

1

,

verifying that the point (x, y) is translated to (x + h, y + k).

Example 2.10
In Example 1.8 the translation T (2, 1) was applied to the quadrilateral with
vertices A(1, 1), B(3, 1), C(2, 2), and D(1.5, 3). Let the homogeneous coordinates of the 4 vertices be expressed as the rows of a 4×3 matrix. The translation
is applied by multiplying the matrix of vertices by the translation matrix. The

28

Applied Geometry for Computer Graphics and CAD

rows of the resulting matrix are the homogeneous coordinates of images of the
vertices.
⎛
⎞
⎛
⎞
⎛
⎞
1
1 1
3
2 1
1 0 0
⎜ 3
⎜ 5
1 1 ⎟⎝
2 1 ⎟
⎜
⎟
⎟ .
0 1 0 ⎠=⎜
⎝ 2
⎠
⎝ 4
2 1
3 1 ⎠
2 1 1
1.5 3 1
3.5 4 1
vertices × translation = images of vertices
The images have Cartesian coordinates A (3, 2), B (5, 2), C (4, 3), and
D (3.5, 4).

2.4.2 Scaling about the Origin
The homogeneous scaling matrix is

⎛

⎞
0
0 ⎠ .
1

0
sy
0

sx
S (sx , sy ) = ⎝ 0
0
⎛

⎞
sx 0 0
x y 1 ⎝ 0 sy 0 ⎠ = sx x sy y 1 ,
0 0 1
verifying that the point (x, y, 1) is mapped to (sx x, sy y, 1). The scaling can also
be performed by the scaling matrix
⎞
⎛
0
sx 0
S (sx , sy ; sw ) = ⎝ 0 sy 0 ⎠

Then

0

0

sw

for sw = 0. The transformation S (sx , sy ; sw ) represents a scaling about the
origin by a factor of sx /sw in the x-direction, and by a factor of sy /sw in the ydirection. The semicolon before the sw is used to distinguish the planar scaling
from the spatial scaling which is introduced in Chapter 3.

Example 2.11
A scaling about the origin by a factor of
of 2 in the y-direction, of the unit square
(1, 2) is determined by
⎛
⎞
⎛
1 1 1
4 0 0
⎜ 2 1 1 ⎟
⎜
⎟⎝ 0 2 0
⎝ 2 2 1 ⎠
0 0 1
1 2 1

4 in the x-direction, and by a factor
with vertices (1, 1), (2, 1), (2, 2), and
⎞

⎛

4
⎜ 8
⎠=⎜
⎝ 8
4

2
2
4
4

⎞
1
1 ⎟
⎟ .
1 ⎠
1

Homogeneous Coordinates andTransformations of the Plane

29

The image is a square with vertices (4, 2), (8, 2), (8, 4), and (4, 4).

2.4.3 Rotation about the Origin
In homogeneous coordinates the transformation
about the origin through an angle θ is
⎛
cos θ sin θ
Rot (θ) = ⎝ − sin θ cos θ
0
0

matrix for a rotation Rot (θ)
⎞
0
0 ⎠ ,
1

where a positive angle denotes an anticlockwise rotation. Hence
⎛
⎞
cos θ sin θ 0
x y 1 ⎝ − sin θ cos θ 0 ⎠ = x cos θ − y sin θ x sin θ + y cos θ
0
0 1

1

.

Example 2.12
An anticlockwise rotation about the origin through an angle π/3 of the unit
square with vertices (1, 1), (2, 1), (2, 2), and (1, 2) is determined by
⎛
⎞
⎛
⎞
⎛
⎞
1 1 1
−0.366 1.366 1.0
0.5
0.866 0
⎜ 2 1 1 ⎟
⎜ 0.134 2.232 1.0 ⎟
⎜
⎟ ⎝ −0.866
⎟
0.5
0 ⎠=⎜
⎝ 2 2 1 ⎠
⎝ −0.732 2.732 1.0 ⎠ .
0
0
1.0
1 2 1
−1.232 1.866 1.0
The image is a square with vertices (−0.366, 1.366), (0.134, 2.232),
(−0.732, 2.732), and (−1.232, 1.866).

EXERCISES
2.10. Apply the translation T (−2, −1) to the quadrilateral, obtained in
Example 2.10, with vertices A (3, 2), B (5, 2), C (4, 3), and D (3.5, 4).
2.11. Write down the transformation matrix which has the eﬀect of a
scaling by a factor of 2 in the x-direction and by a factor of 1.5
in the y-direction. Apply the transformation to the quadrilateral of
Example 2.10. Compare the result with Example 1.11.
2.12. Write down the transformation matrix which has the eﬀect of an
anticlockwise rotation about the origin through an angle π/2. Apply
the transformation to the quadrilateral of Example 2.10.

30

Applied Geometry for Computer Graphics and CAD

2.13. Determine the matrix for the inverse scaling transformation of Exercise 2.11.
−1

2.14. Determine the homogeneous transformation matrix of Rot (θ)

.

2.15. Determine the homogeneous transformation matrices for reﬂections
in the x- and y-axes.

2.5 Concatenation of Transformations
In homogeneous coordinates, the concatenation of transformations T1 and T2 ,
denoted T1 ◦ T2 , can be performed with matrix multiplications alone. For example, a rotation Rot (θ) about the origin followed by a translation T (h, k) is
denoted Rot (θ) ◦ T (h, k), and has the homogeneous transformation matrix
⎛
⎞⎛
⎞
cos θ sin θ 0
1 0 0
Rot (θ) T (h, k) = ⎝ − sin θ cos θ 0 ⎠ ⎝ 0 1 0 ⎠
0
0 1
h k 1
⎛
⎞
cos θ sin θ 0
⎝ − sin θ cos θ 0 ⎠ .
=
h
k 1

Example 2.13
The transformation matrix which represents an anticlockwise rotation of 3π/2
about the origin followed by a scaling by a factor of 3 units in the x-direction
and 2 units in the y-direction is
⎛
⎞⎛
⎞ ⎛
⎞
0 −1 0
3 0 0
0 −2 0
Rot (3π/2) S (3, 2) = ⎝ 1
0 0 ⎠⎝ 0 2 0 ⎠ = ⎝ 3
0 0 ⎠ .
0
0 1
0 0 1
0
0 1

EXERCISES
2.16. Determine the matrix which represents the operations of Example
2.13 performed in reverse order. What can be deduced about the
order in which transformations are performed?
2.17. Determine the matrix which represents an anticlockwise rotation
about the origin through an angle π followed by a scaling by a factor
of 4 in the x-direction and by a factor of 0.5 in the y-direction.

Homogeneous Coordinates andTransformations of the Plane

31

2.18. Determine the matrix which represents a translation of 4 units in
the x-direction followed by a rotation about the point (2, 3) through
an angle π/2 in a clockwise direction.

2.5.1 Inverse Transformations
The identity and inverse transformations were introduced in Section 1.2. The
identity transformation I is the transformation which has the eﬀect of leaving
all points of the plane unchanged. The inverse of a transformation L, denoted
L−1 , has the eﬀect of mapping images of the transformation L back to their
original points. These transformations can be given a more precise deﬁnition
in terms of the concatenation of transformations.

Deﬁnition 2.14
The identity transformation of the plane, denoted I, is the transformation for
which I ◦ L = L ◦ I = L, for all planar transformations L. The transformation
matrix of the identity transformation is the 3 × 3 identity matrix I3 (that is,
the matrix with values of 1’s on the leading diagonal and 0’s elsewhere).

Deﬁnition 2.15
The inverse L−1 of a transformation L is the transformation such that L◦L−1 =
I and L−1 ◦ L = I.

Lemma 2.16
Let the homogeneous transformation matrix of L be T. A necessary and sufﬁcient condition for the inverse L−1 to exist is that T−1 exists and is the
transformation matrix of L−1 .

Proof
Suppose L has an inverse L−1 with transformation matrix T1 . The concatenation L ◦ L−1 = I has transformation matrix TT1 = I3 . Similarly, L−1 ◦ L = I
has transformation matrix T1 T = I3 . Thus by the deﬁnition of a matrix inverse
T1 = T−1 .
Conversely, suppose T has an inverse T−1 , and let L1 be the transformation
deﬁned by T−1 . Since TT−1 = I3 and T−1 T = I3 it follows that L ◦ L1 = I
and L1 ◦ L = I. Hence L1 is the inverse transformation of L.

32

Applied Geometry for Computer Graphics and CAD

Deﬁnition 2.17
A transformation L : P2 → P2 which has an inverse L−1 is called a non-singular
transformation. Lemma 2.16 shows that a transformation is a non-singular
transformation if and only if its transformation matrix is non-singular.

Example 2.18
−1

−1

Non-singular matrices A and B satisfy (AB) = B −1 A−1 . Further, S (s1 , s2 )
−1
= S (1/s1 , 1/s2 ) and Rot (θ) = Rot (−θ) (Exercises 1.9 and 1.14). This gives
a straightforward way of determining the inverse transformation matrix of the
concatenated transformation Rot (3π/2) ◦ S (3, 2):
−1

(Rot (3π/2) S (3, 2))

= S (3, 2)

−1

Rot (3π/2)

−1

= S (1/3, 1/2) Rot (−3π/2)
⎞⎛
⎛ 1
0 0
cos − 3π
3
2
⎝ 0 1 0 ⎠ ⎝ − sin − 3π
=
2
2
0
0 0 1
⎛
⎞
1
0 3 0
= ⎝ −1 0 0 ⎠ .
2
0 0 1

sin − 3π
2
cos − 3π
2

⎞
0
0 ⎠
0 1

Alternatively, using Example 2.13
⎛

−1

(Rot (3π/2) S (3, 2))

0
⎝ 3
=
0

⎞−1 ⎛
−2 0
0
⎠ = ⎝ −1
0 0
2
0
0 1

⎞
0
0 0 ⎠ .
0 1

1
3

EXERCISES
2.19. Determine the transformation matrix of the inverse of the concatenation T (−2, 5) ◦ Rot (−π/3).
2.20. Use a graphics calculator or mathematics computer package to compute the inverse of the transformation with matrix
⎛
⎞
1.0
0.5 0.0
⎝ 0.8 −1.2 0.0 ⎠ .
4.0 −2.0 1.0
2.21. Consider a (rectangular) Cartesian coordinate system with origin O
and coordinates (x, y), and a second system with origin O (x0 , y0 )

Homogeneous Coordinates andTransformations of the Plane

33

and coordinates (x , y ). The origin and axes of the ﬁrst system can
be mapped to those of the second by applying a rotation Rot(θ) followed by the translation T(x0 , y0 ). The (x, y)-coordinates of a point
given in (x , y )-coordinates is obtained by applying the orthogonal
change of coordinates transformation
x = x cos θ − y sin θ + x0
y

= x sin θ + y cos θ + y0 .

a) Determine the homogeneous transformation matrix A of the
change of coordinates and show that det(A) = 1.
b) Determine the inverse change of coordinates transformation
which determines the (x , y )-coordinates of a point (x, y).
c) Show that a change of coordinates preserves the angle between
a pair of lines.
d) Show that the x - and y -axes, expressed in (x, y)-coordinates,
are given by the equations
(x − x0 ) sin θ − (y − y0 ) cos θ

=

0,

(x − x0 ) cos θ + (y − y0 ) sin θ

=

0.

and

2.5.2 Rotation about an Arbitrary Point
A rotation through an angle θ about an arbitrary point (x0 , y0 ) is obtained
by performing a translation which maps (x0 , y0 ) to the origin, followed by a
rotation through an angle θ about the origin, and followed by a translation
which maps the origin to (x0 , y0 ). The rotation matrix is
Rot(x0 ,y0 ) (θ) = T (−x0 , −y0 ) Rot (θ) T (x0 , y0 )
⎛
⎞⎛
⎞⎛
1
0 0
cos θ sin θ 0
1
⎝
⎠ ⎝ − sin θ cos θ 0 ⎠ ⎝ 0
=
0
1 0
−x0 −y0 1
0
0 1
x0
⎞
⎛
cos θ
sin θ
0
⎜
− sin θ
cos θ
0 ⎟
⎟ .
=⎜
⎠
⎝ (−x0 cos θ
(−x0 sin θ
1
+y0 sin θ + x0 )
−y0 cos θ + y0 )

0
1
y0

⎞
0
0 ⎠
1

34

Applied Geometry for Computer Graphics and CAD

Example 2.19
A square has vertices A(1, 1), B(2, 1), C(2, 2), and D(1, 2). Calculate the coordinates of the vertices when the rectangle is rotated about B through an angle
π/4. The required transformation is
T (−2, −1) Rot (π/4) T (2, 1)
⎛
⎞⎛
⎞⎛
1
0 0
0.7071 0.7071 0
1
⎝ 0
⎠ ⎝ −0.7071 0.7071 0 ⎠ ⎝ 0
=
1 0
−2 −1 1
0
0 1
2
⎛
⎞
0.7071
0.7071 0
= ⎝ −0.7071
0.7071 0 ⎠ .
1.2929 −1.1213 1
Applying
⎛
1
⎜ 2
⎜
⎝ 2
1

the transformation to the vertices,
⎞
⎛
⎛
⎞
1 1
0.7071
0.7071 0
⎜
1 1 ⎟⎝
⎟
−0.7071
0.7071 0 ⎠ = ⎜
⎠
⎝
2 1
1.2929 −1.1213 1
2 1

1.2929
2
1.2929
0.5858

0
1
1

⎞
0
0 ⎠
1

0.2929
1
1.7071
1

⎞
1
1 ⎟
⎟
1 ⎠
1

gives A (1.2929, 0.2929), B (2, 1), C (1.2929, 1.7071), and D (0.5858, 1.0). The
rotated square is illustrated in Figure 2.5.

3
C

D

C

2

B

A

B

A

0

D

1

0

1

2

3

Figure 2.5

2.5.3 Reﬂection in an Arbitrary Line
Reﬂections in the x- and y-axes were derived in Exercise 2.15.A reﬂection in an
arbitrary line with equation ax + by + c = 0 is obtained by transforming the
line to one of the axes, reﬂecting in that axis, and then applying the inverse of
the ﬁrst transformation. Suppose b = 0.

Homogeneous Coordinates andTransformations of the Plane

1. The line

35

intersects the y-axis in the point (0, −c/b).

2. Apply a translation mapping (0, −c/b) to the origin, and thus mapping
to a line through the origin with an identical gradient to .
3. The gradient of is tan θ = −a/b, where θ is the angle that makes with
the x-axis. Rotate about the origin through an angle −θ. The line is now
mapped to the x-axis.
4. Apply a reﬂection in the x-axis.
5. Apply the inverse of the rotation of step 3, followed by the inverse of the
translation of step 2.
The concatenation of the above transformations is
⎛

⎞⎛
⎞⎛
1 0
0
cos θ − sin θ 0
1 0
⎝ 0 1
⎠ ⎝ sin θ
⎠ ⎝ 0 −1
0
cos θ 0
0 c/b 1
0
0 1
0 0
⎛
⎞⎛
⎞
cos θ sin θ 0
1
0 0
× ⎝ − sin θ cos θ 0 ⎠ ⎝ 0
1 0 ⎠
0
0 1
0 −c/b 1
⎞
⎛
2
2
2 cos θ sin θ
0
cos θ − sin θ
= ⎝ 2 cos θ sin θ
0 ⎠
sin2 θ − cos2 θ
c
c
2 b sin θ cos θ b sin2 θ − cos2 θ − 1 1

⎞
0
0 ⎠
1
(2.9)

.

(2.10)

Since tan θ = sin θ/ cos θ = −a/b, it follows that sin θ = a/ a2 + b2

1/2

1/2

and cos θ = −b/ a2 + b2
(Exercise 2.25). Hence, cos2 θ = b2 a2 + b2 ,
2
2
2
2
a + b , sin θ cos θ = −ab a2 + b2 , and cos2 θ − sin2 θ =
sin θ = a
2
2
2
b −a
a + b2 . Finally, substitution for the trigonometric functions in
(2.10) yields
⎛
⎞
b2 −a2
2ab
− a2 +b2 0
a2 +b2
2
2
⎜
⎟
2ab
⎝ − a2 +b2 − b 2−a2 0 ⎠ .
a +b
2ac
2bc
− a2 +b2 − a2 +b2 1
Since in homogeneous coordinates multiplication by a factor does not aﬀect
the result, the above matrix can be multiplied by a factor a2 + b2 to give the
general reﬂection matrix
⎞
⎛ 2
−2ab
0
b − a2
⎠.
(2.11)
R(a,b,c) = ⎝ −2ab −b2 + a2
0
2
2
−2ac
−2bc
a +b

36

Applied Geometry for Computer Graphics and CAD

EXERCISES
2.22. Show that the concatenation of two rotations, the ﬁrst through
an angle θ about a point P(x0 , y0 ) and the second about a point
Q(x1 , y1 ) (distinct from P) through an angle −θ, is equivalent to a
translation.
2.23. Determine the transformation matrix of a reﬂection in the line 5x −
2y + 8 = 0. Express the reﬂection ﬁrst using (2.11) and then as a
concatenation of transformations (2.9).
2.24. Demonstrate that if the coordinates of points are expressed by rational numbers (whole numbers and fractions), then a reﬂection in
a line deﬁned by rational coeﬃcients a, b, c can be computed using
integer arithmetic.
2.25. Use trigonometry to verify the result used in the derivation of
1/2
and
(2.11) that if tan θ = −a/b, then sin θ = a/ a2 + b2
cos θ = −b/ a2 + b2

1/2

.

2.6 Applications
2.6.1 Instancing
In Section 1.8.1 the model of the front of a house was deﬁned by instancing
the picture element Square with vertices (0, 0), (1, 0), (1, 1), and (0, 1). The
front door was obtained by applying a scaling of 0.5 units in the x-direction,
followed by a translation of 3 units in the x-direction and 1 unit in the ydirection. Transformations applied to picture elements and primitives to obtain
instances are called modelling transformations. The front door is obtained from
Square by applying the modelling transformation S(1, 3) ◦ T(4, 0) which has
the modelling transformation matrix
⎛
⎞⎛
⎞ ⎛
⎞
0.5 0 0
1 0 0
0.5 0 0
S(1, 3)T(4, 0) = ⎝ 0
1 0 ⎠⎝ 0 1 0 ⎠ = ⎝ 0
1 0 ⎠ .
0
0 1
3 1 1
3
1 1
The vertices of the door are obtained by applying the modelling transformation
matrix to the vertices of the Square primitive, giving
⎛
⎞
⎛
⎞
⎛
⎞
0 0 1
3 1 1
1 0 0
⎜ 1 0 1 ⎟
⎜
⎟
⎜
⎟⎝ 0 1 0 ⎠ = ⎜ 4 1 1 ⎟ .
⎝ 1 1 1 ⎠
⎝ 4 2 1 ⎠
3 1 1
0 1 1
3 2 1
So in world coordinates the vertices are (3, 1), (4, 1), (4, 2) and (3, 2).

Homogeneous Coordinates andTransformations of the Plane

37

Exercise 2.26
Determine the modelling transformation matrices of the four instances
of Square which deﬁne the windows of the front of the house in Figure 1.8. Complete the picture element House by determining the modelling transformation matrix of the primitive Point which is a small
circle centred at the point (0, 0). Now create a modern housing estate by
instancing House!

2.6.2 Device Coordinate Transformation
Sections 1.8.1 and 2.6.1 discuss how the model of an object is obtained by
instancing a number of picture elements and graphical primitives. The object
(the front of a house) is deﬁned in a two-dimensional world coordinate system.
The object is displayed in a device window, such as a computer screen, by
applying a device coordinate transformation. The process of viewing an object
deﬁned in a three-dimensional world coordinate system is discussed later in
Chapter 4.
Suppose the world coordinate system is the (x, y)-plane. The region of the
plane to be displayed by the device is speciﬁed by a rectangular window with
lower left corner (xmin , ymin ) and upper right corner (xmax , ymax ). Any part
of the object lying outside this region is “clipped” and is not displayed. The
coordinate system of a display device is determined by its resolution. For example, a computer screen consists of a rectangular array of pixels. The number
of pixels in the horizontal (h) and vertical (v) directions is written h × v and
called the screen resolution. The origin is assumed to be the lower left corner of the screen, and the pixels are labelled with coordinates (h, v) where h
and v are non-negative integers. Figure 2.6 illustrates a screen with a resolution of 1280 × 1024 pixels, and a window given by (xmin , ymin ) = (−10, −5)
and (xmax , ymax ) = (10, 5). The window is mapped onto the screen by the
device coordinate transformation which is the concatenation of (i) the translation T (10, 5) which maps the point (−10, −5) to the origin, and (ii) a scaling
S (1280/20, 1024/10) which makes the rectangle the same size as the screen.
Therefore, the device coordinate transformation is
⎛
⎞⎛
⎞
1 0 0
64
0
0
T (10, 5) S (1280/20, 1024/10) = ⎝ 0 1 0 ⎠ ⎝ 0 102.4 0 ⎠
10 5 1
0
0
1
⎛
⎞
64
0
0
= ⎝ 0 102.4 0 ⎠ .
640 512 1

38

Applied Geometry for Computer Graphics and CAD

Hence the Cartesian coordinates of the point on the screen corresponding to
the point (x, y) in the window are (64x + 640, 102.4y + 512).

y

v

5

-10

10

x
h

-5

Device coordinate
transformation
Figure 2.6

A device coordinate transformation makes Max a ﬁlm star

Exercise 2.27
Suppose the window speciﬁed above is to be mapped onto a rectangular
device window of the computer screen with lower left corner (200, 200)
and upper right corner (600, 400). Determine the device coordinate transformation matrix.

2.7 Point and Line Geometry in Homogeneous
Coordinates
The general equation of a line in the Cartesian plane is ax + by + c = 0.
Suppose (X, Y, W ) are the homogeneous coordinates of the point (x, y), so
that x = X/W and y = Y /W . Substituting for x and y in the equation of the
line, and multiplying through by W , yields the condition for (X, Y, W ) to be a
point on the line
aX + bY + cW = 0 .
(2.12)
The equation is known as the homogeneous line equation. The line is uniquely
deﬁned by the coeﬃcients a, b, and c, or any non-zero multiple ra, rb, and rc
of them. Therefore, it is natural to specify the line by the homogeneous line
coordinates
= (a, b, c) .

Homogeneous Coordinates andTransformations of the Plane

39

It is also useful to consider to be a vector known as the line vector . Since
any non-zero multiple of deﬁnes the same line, only the direction of is of
importance. Let P(X, Y, W ) be a point on the line. By permitting the homogeneous coordinates (X, Y, W ) to be treated as a vector, Equation (2.12) may
be expressed as the dot product
· P = aX + bY + cW = 0 .

(2.13)

The identity (2.13) leads to two useful operations: (i) determining the line
through two distinct points, and (ii) determining the point of intersection of
two lines.
To Find the Equation of the Line Through Two Points
Suppose
is the line vector of a line containing two distinct points
P1 (X1 , Y1 , W1 ) and P2 (X2 , Y2 , W2 ). Then (2.13) yields
· P1 = 0 and

· P2 = 0 .

For any two vectors, the condition a · b = 0 implies that a and b are perpendicular. Hence, is a vector perpendicular to both P1 and P2 . To determine
it is suﬃcient to determine any vector perpendicular to P1 and P2 . In particular, the cross product gives a vector perpendicular to two given vectors, thus
= P1 × P2 (or any multiple of P1 × P2 ). Hence, the equation of the line
through two points can be determined by taking the “cross product” of the
homogeneous coordinates of the points.

Example 2.20
The line

passing through (0, 5) and (6, −7) satisﬁes
· (0, 5, 1) = 0

and

· (6, −7, 1) = 0 .

Hence
= (0, 5, 1) × (6, −7, 1) = (12, 6, −30)
giving the line 12x + 6y − 30 = 0.
To Determine the Point of Intersection of Two Lines
Suppose P is the point of intersection of two lines
on both lines and (2.13) yields
1

· P = 0 and

2

1

and

2.

Then P is a point

·P=0.

Hence P is a vector perpendicular to both 1 and 2 , and hence it is suﬃcient
to take P = 1 × 2 (or any multiple of it). The cross product yields the
homogeneous coordinates of the point of intersection.

40

Applied Geometry for Computer Graphics and CAD

Example 2.21
The point P of intersection of the lines x − 7y + 8 = 0 and 3x − 4y + 1 = 0
satisﬁes
(1, −7, 8) · P = 0 and (3, −4, 1) · P = 0 .
Hence
P = (1, −7, 8) × (3, −4, 1) = (25, 23, 17) .
The Cartesian coordinates of the intersection point are (25/17, 23/17).

Example 2.22
The point P of intersection of the lines 2x − 5y = 0 and 2x − 5y + 3 = 0 has
homogeneous coordinates
P = (2, −5, 0) × (2, −5, 3) = (−15, −6, 0) .
The point of intersection (−15, −6, 0) is a point at inﬁnity since the lines are
parallel.

EXERCISES
2.28. Determine the line passing through (1, 3) and (4, −2).
2.29. Determine the point of intersection of the lines x − 3y + 7 = 0 and
4x + 3y − 5 = 0.
2.30. The methods used to determine the line through two distinct points
and the point of intersection of two lines both involve the cross product. This is due to the duality between points and lines in the plane
which relates results about points and lines to a dual result about
lines and points. For example, the property “points r1 , r2 , and r3
are collinear if and only if r1 · (r2 × r3 ) = 0” has the dual property
“lines 1 , 2 , and 3 are concurrent if and only if 1 · ( 2 × 3 ) = 0”.
Investigate further the property of duality [24, pp78–80].

3

Homogeneous Coordinates and
Transformations of Space

3.1 Homogeneous Coordinates
Homogeneous coordinates in three-dimensional space are derived in a similar
manner as homogeneous coordinates of the plane. A point (x, y, z) in threedimensional Cartesian space R3 is represented in the four-dimensional space
R4 by the vector (x, y, z, 1), or by any multiple (rx, ry, rz, r) (with r = 0).
When W = 0, the homogeneous coordinates (X, Y, Z, W ) represent the Cartesian point (x, y, z) = (X/W, Y /W, Z/W ). A point of the form (X, Y, Z, 0) does
not correspond to a Cartesian point, but represents the point at inﬁnity in the
direction of the three-dimensional vector (X, Y, Z). The set of all homogeneous
coordinates (X, Y, Z, W ) is called (three-dimensional ) projective space and denoted P3 . Homogeneous coordinates (x, y, z, w) are frequently represented by
the row matrix (x y z w) for matrix computations.

Example 3.1
The homogeneous coordinates (2, 3, 4, 5), (−4, −6, −8, −10), and (6, 9, 12, 15)
all represent the point with Cartesian coordinates (2/5, 3/5, 4/5).

41

42

Applied Geometry for Computer Graphics and CAD

Deﬁnition 3.2
A (projective) transformation of projective space is a
the form
⎛
m11 m12
⎜ m21 m22
L (x, y, z, w) = x y z w ⎜
⎝ m31 m32
m41 m42

mapping L : P3 → P3 of
m13
m23
m33
m43

⎞
m14
m24 ⎟
⎟ .
m34 ⎠
m44

The 4×4 matrix M is called the homogeneous transformation matrix of L. If M is
a non-singular matrix then L is called a non-singular transformation. If m14 =
m24 = m34 = 0 and m44 = 0, then L is said to be an aﬃne transformation.
(Aﬃne transformations correspond to translations, scalings, rotations etc. of
three-dimensional Cartesian space.)

3.2 Transformations of Space
A number of transformations of space are considered, namely, translations,
scalings, reﬂections, rotations, and the composition of these transformations.
As in the planar case, compositions of three-dimensional transformations are
performed by multiplication of the transformation matrices.

3.2.1 Translations
The transformation matrix of a translation by
y-, and z-directions respectively, is
⎛
1 0
⎜ 0 1
T (x0 , y0 , z0 ) = ⎜
⎝ 0 0
x0 y0

x0 , y0 , and z0 units in the x-,
0
0
1
z0

⎞
0
0 ⎟
⎟ .
0 ⎠
1

The point with homogeneous coordinates P(x, y, z, 1) is translated to the point
P given by
⎞
⎛
1 0 0 0
⎜ 0 1 0 0 ⎟
⎟
x + x0 y + y0 z + z0 1 = x y z 1 ⎜
⎝ 0 0 1 0 ⎠ .
x0

y0

z0

1

Hence, P(x, y, z) is transformed to P (x + x0 , y + y0 , z + z0 ) as required.

3. Homogeneous Coordinates and Transformations of Space

43

3.2.2 Scalings and Reﬂections
A scaling about the origin by a factor sx /sw , sy /sw , and sz /sw in the x-, y-, and
z-directions respectively, is obtained by the following transformation matrix
⎛
⎞
sx 0 0
0
⎜ 0 sy 0
0 ⎟
⎟
S (sx , sy , sz , sw ) = ⎜
⎝ 0 0 sz 0 ⎠ .
0 0 0 sw
Frequently, sw is taken to be 1.
The transformation matrices of the reﬂections Ryz in the x = 0 plane, Rxz
in the y = 0 plane, and Rxy in the z = 0 plane, are obtained by taking a scaling
of −1 in one of the coordinate directions,
⎞
⎛
−1 0 0 0
⎜ 0 1 0 0 ⎟
⎟
Ryz = ⎜
⎝ 0 0 1 0 ⎠,
⎛

Rxz

Rxy

0 0 0 1

1
0 0
⎜ 0 −1 0
= ⎜
⎝ 0
0 1
0
0 0
⎛
1 0
0
⎜ 0 1
0
= ⎜
⎝ 0 0 −1
0 0
0

⎞
0
0 ⎟
⎟,
0 ⎠
1
⎞
0
0 ⎟
⎟.
0 ⎠
1

3.2.3 Rotations about the Coordinate Axes
Rotations in space take place about a line called the rotation axis. The rotations
about the three coordinate axes are called the primary rotations.
1. Rotation about the x-axis through an angle θx
⎛
1
0
0
⎜ 0
cos θx sin θx
Rotx (θx ) = ⎜
⎝ 0 − sin θx cos θx
0
0
0

⎞
0
0 ⎟
⎟ .
0 ⎠
1

44

Applied Geometry for Computer Graphics and CAD

2. Rotation about the y-axis through an
⎛
cos θy
⎜ 0
Roty (θy ) = ⎜
⎝ sin θy
0

angle θy
0 − sin θy
1
0
0
cos θy
0
0

3. Rotation about the z-axis through an angle θz
⎛
cos θz sin θz
⎜ − sin θz cos θz
Rotz (θz ) = ⎜
⎝
0
0
0
0

0
0
1
0

⎞
0
0 ⎟
⎟ .
0 ⎠
1

⎞
0
0 ⎟
⎟ .
0 ⎠
1

Figure 3.1 shows the directions which the primary rotations take when
the rotation angle is positive. The directions are easily remembered by the
mnemonic

x
y

z

.

For instance, to determine the positive sense of a rotation about the y-axis,
cover up the “y” to reveal z → x. The arrow indicates that a positive angle
of rotation has the eﬀect of moving points on the z-axis towards the x-axis.
A two-dimensional rotation in the xy-plane about the origin yields the same
z
qz

qx

y
qy

x

Figure 3.1

Deﬁnition of positive rotation angles

transformation of points in the plane as a three-dimensional rotation of the
plane about the z-axis. Rotations about an arbitrary line are obtained in Section 3.2.4 by a composition of translations and primary rotations.

3. Homogeneous Coordinates and Transformations of Space

45

Example 3.3
The transformation matrix M which represents a rotation of an angle π/6
about the y-axis followed by a translation T (1, −1, 2) is
⎛
⎞⎛
⎞
0.866 0
−0.5
0
1
0 0 0
⎜ 0
1.0
0
0 ⎟⎜ 0
1 0 0 ⎟
⎟⎜
⎟
Roty (π/6) T (1, −1, 2) = ⎜
⎝ 0.5
⎠⎝ 0
0 0.866 0
0 1 0 ⎠
0
0
0
1.0
1 −1 2 1
⎛
⎞
0.866
0
−0.5
0
⎜ 0
1.0
0
0 ⎟
⎟ .
= ⎜
⎝ 0.5
0
0.866 0 ⎠
−1.0

1.0

2.0

1.0

3.2.4 Rotation about an Arbitrary Line
Rotation through an angle θ about an arbitrary rotation axis is obtained by
transforming the rotation axis to one of the coordinate axes, applying a primary rotation through an angle θ about the coordinate axis, and applying the
transformation which maps the coordinate axis back to the rotation axis. Let
the rotation axis be the line through the points P(p1 , p2 , p3 ) and Q(q1 , q2 , q3 ).
Let R(r1 , r2 , r3 ) be the unit vector in the direction Q − P. Then the rotation
can be performed as follows.

z
r3
r1

qx

z

z

r2
Q

R
T

R

P

-qy
R

qy

R

r 2 + r32
2

q

y

O

y

r1 O

x

x
(a)

qx

O

y

x
(b)

(c)

Figure 3.2

1. Apply the translation T (−p1 , −p2 , −p3 ) which maps P to the origin and
the rotation axis to the line OR as shown in Figure 3.2(a). If R is parallel

46

Applied Geometry for Computer Graphics and CAD

to the x-axis (when r2 = r3 = 0) then the required rotation matrix is
T (−p1 , −p2 , −p3 ) Rotx (θ) T (p1 , p2 , p3 ) .
Likewise, if R is parallel to the y-axis (when r1 = r3 = 0) or the z-axis
(when r1 = r2 = 0) then the required rotation matrices are
T (−p1 , −p2 , −p3 ) Roty (θ) T (p1 , p2 , p3 )
or
T (−p1 , −p2 , −p3 ) Rotz (θ) T (p1 , p2 , p3 )
respectively.
2. Suppose r2 and r3 are not both zero. Apply a rotation through an angle
θx about the x-axis so that the line OR is mapped into the xz-plane.
Referring to Figure 3.2(a), an application of trigonometry to the shaded
triangle yields that the line OR makes an angle θx with the xz-plane where
sin θx = r2 /

2
2
r2 + r3 ,

and

cos θx = r3 /

2
2
r2 + r3 .

The desired rotation Rotx (θx ) maps R to the point R (r1 , 0,
depicted in Figure 3.2(b).

2
2
r2 + r3 ) as

3. Apply a rotation about the y-axis so that the line OR is mapped to the
z-axis. Applying trigonometry to the shaded triangle of Figure 3.2(b) the
required angle is found to be −θy where
sin θy = r1 ,

and

cos θy =

2
2
r2 + r3 .

4. Apply a rotation through an angle θ about the z-axis (Figure 3.2(c)).
5. Apply the inverses of the transformations 1–3 in reverse order.
Thus the general rotation through an angle θ about the line through the points
P(p1 , p2 , p3 ) and Q(q1 , q2 , q3 ) has transformation matrix
T (−p1 , −p2 , −p3 ) Rotx (θx ) Roty (−θy ) Rotz (θ) ×
Roty (θy ) Rotx (−θx )T (p1 , p2 , p3 ) ,
where R(r1 , r2 , r3 ) is the unit vector in the direction Q − P, and
sin θx

=

sin θy

= r1 ,

r2 /

2
2
r2 + r3 ,

and

cos θx = r3 /

cos θy =

2
2
r2 + r3 .

2
2
r2 + r3 ,

3. Homogeneous Coordinates and Transformations of Space

47

Example 3.4
Compute the transformation matrix of the rotation through an angle θ about
the line through the points P(2, 1, 5) and Q(4, 7, 2). Then
Q − P =(4, 7, 2) − (2, 1, 5) = (2, 6, −3) ,
√
2
2
|(2, 6, −3)| = 7, and hence R √ (2/7, 6/7, −3/7). Then r2 + r3 = 3 5, and
=
7
√
√
5 , cos θx = −1
5 , sin θy = 2/7, and cos θy = 3 5. The rotation
sin θx = 2
7
matrix is
⎞
⎛
⎞⎛
1
0
0
0
1
0
0 0
2
1
⎜
√
⎜ 0
0 ⎟
1
0 0 ⎟ ⎜ 0 − √5
⎟
5
⎜
⎟⎜
⎟
2
1
⎝ 0
0
1 0 ⎠ ⎝ 0 − √5 − √5 0 ⎠
−2 −1 −5 1
0
0
0
1
⎛ 3
⎞⎛
⎞
2
√
0
0
cos θ sin θ 0 0
7
7 5
⎜
⎟
1
0
0 ⎟ ⎜ − sin θ cos θ 0 0 ⎟
⎜ 0
⎟
×⎜
⎟⎜
2
3
0
0 1 0 ⎠
⎝ − 7 0 7√ 5 0 ⎠ ⎝
0
0 0 1
0
0
1 ⎞⎛
⎛ 0
⎞⎛
⎞
3
2
√
1
0
0
0
0 −7 0
1 0 0 0
7 5
1
2
⎜
⎟ ⎜ 0 −√
⎟⎜
− √5 0 ⎟
0 1 0 0 ⎟
1
0
0 ⎟⎜
⎜ 0
5
⎟
×⎜ 2
⎟⎜
⎟⎜
3
2
1
⎝ 0 0 1 0 ⎠=
√
0 7√ 5 0 ⎠ ⎝ 0
− √5 0 ⎠
⎝ 7
5
2 1 5 1
0
0
0
1
0
0
0
1
⎛
45
49

4
49

cos θ +
⎜
⎜
⎜
⎜
⎜ − 12 cos θ + 3 sin θ
⎜
49
7
⎜
+ 12
⎜
49
⎜
⎜
⎜
6
6
⎜
49 cos θ + 7 sin θ
⎜
6
⎜
− 49
⎜
⎜
⎜
⎝ − 108 cos θ − 33 sin θ
49
7
+ 108
49

− 3 sin θ − 12 cos θ
7
49
+ 12
49
13
49

cos θ +

36
49

6
− 6 sin θ + 49 cos θ
7
6
− 49
2
7

− 2 sin θ + 18 cos θ
7
49
− 18
49
16
7

sin θ − 79 cos θ
49
+ 79
49

sin θ + 18 cos θ
49
18
− 49
40
49

10
7

cos θ +

9
49

sin θ − 230 cos θ
49
+ 230
49

⎞
0 ⎟
⎟
⎟
⎟
⎟
0 ⎟
⎟
⎟
⎟
⎟.
⎟
⎟
0 ⎟
⎟
⎟
⎟
⎟
⎠
1

3.2.5 Reﬂection in an Arbitrary Plane
Reﬂection in an arbitrary reﬂection plane ax + by + cz + d = 0 is obtained
by making a transformation which maps the plane to one of the xy-, xz- or
yz-planes, followed by a primary reﬂection in the chosen plane, and followed

48

Applied Geometry for Computer Graphics and CAD

by the transformation which maps the plane back to the reﬂection plane. The
transformation is obtained as follows.
1. Determine a point P(p1 , p2 , p3 ) on the plane (for example, the intersection
of the plane with one of the axes). Apply the translation T (−p1 , −p2 , −p3 )
to map P to the origin, and to map the reﬂection plane to the plane through
the origin with normal direction (a, b, c). Let R = (r1 , r2 , r3 ) denote the
unit vector in the direction of (a, b, c). If R is parallel to the x-axis (when
r2 = r3 = 0) then the required reﬂection matrix is
T (−p1 , −p2 , −p3 ) Ryz T (p1 , p2 , p3 ) .
Likewise, if R is parallel to the y-axis (when r1 = r3 = 0) or the z-axis
(when r1 = r2 = 0) then the required reﬂection matrices are
T (−p1 , −p2 , −p3 ) Rxz (θ) T (p1 , p2 , p3 )
and
T (−p1 , −p2 , −p3 ) Rxy (θ) T (p1 , p2 , p3 )
respectively.
2. Suppose r2 and r3 are not both zero. Following step 2 of the method of the
general rotation, there is a composition of rotations Rotx (θx ) ◦ Roty (−θy ),
2
2
2
2
such that sin θx = r2 / r2 + r3 , cos θx = r3 / r2 + r3 , sin θy = r1 ,
2 + r 2 , which maps the line OR to the z-axis, and the transcos θy = r2
3
lated reﬂection plane to the xy-plane.
3. Apply the reﬂection in the xy-plane.
4. Apply the inverses of the transformations 1–2 in reverse order.
The general reﬂection is
T (−p1 , −p2 , −p3 ) Rotx (θx ) Roty (−θy ) Rxy ×
Roty (θy ) Rotx (−θx ) T (p1 , p2 , p3 ) .

Example 3.5
The transformation matrix for a reﬂection in the plane 2x − y + 2z − 2 = 0
is obtained as follows. Translate the point (1, 0, 0) of the plane to the origin.
The translated plane is 2x − y + 2z = 0 which has unit normal direction R =
(2/3, −1/3, 2/3). Then the composition of rotations Rotx (θx )◦Roty (−θy ), such

3. Homogeneous Coordinates and Transformations of Space

49

√
√
that sin θx = −1/ 5, cos θx = 2/ 5, sin (−θy ) = − sin θy = −2/3, cos(−θy ) =
√
cos θy = 5/3, maps the plane to the xy-plane. The reﬂection matrix is
⎛
⎞⎛ √
⎞
⎞⎛
1 0 0 0
5/3 0 2/3 0
1
0
0√ 0
√
⎜ 0 1 0 0 ⎟ ⎜ 0 2/ 5 −1/ 5 0 ⎟ ⎜ 0
1 √0
0 ⎟
⎜
⎟⎜
⎟
⎟⎜
√
√
⎝ 0 0 1 0 ⎠ ⎝ 0 1/ 5 2/ 5 0 ⎠ ⎝ −2/3 0
5/3 0 ⎠
0
0
0
1
0
0
0
1
−1 0 0 1
⎛
⎞⎛
⎞
⎞⎛ √
1 0
0 0
5/3 0 −2/3 0
1
0
0
0
√
√
⎜ 0 1
5 1/√5 0 ⎟
0 0 ⎟⎜ 0
1 √0
0 ⎟ ⎜ 0 2/ √
⎟⎜
⎟
⎟⎜
×⎜
⎝ 0 0 −1 0 ⎠ ⎝ 2/3 0
⎠ ⎝ 0 −1/ 5 2/ 5 0 ⎠
5/3 0
0
0
0
1
0
0
0
1
0 0
0 1
⎛
⎛
⎞
⎞
1
4 −8 0
1 0 0 0
⎜ 0 1 0 0 ⎟ 1⎜ 4
7
4 0 ⎟
⎜
⎟ .
⎟
×⎜
⎝ 0 0 1 0 ⎠ = 9 ⎝ −8
4
1 0 ⎠
8 −4
8 9
1 0 0 1

3.3 Applications
3.3.1 Computer-aided Design
In the design of parts for manufacture a common construction is that of a surface of revolution. A surface of revolution is obtained as the locus of a curve in
the xz-plane which is rotated about the z-axis through 2π radians (or possibly
a smaller angle). More general surfaces of revolution can be obtained by rotating a curve around an arbitrary line. As a simple illustration, consider forming
a surface by rotating the curve consisting of the consecutive linear segments
joining the points (1, 0, 2), (2, 0, 1), (3, 0, −1), and (1, 0, −2). The surface is approximated by rotating the curve through 2πj/n radians for j = 0, . . . , n to
give n + 1 instances of the curve (so that the last instance equals the ﬁrst). The
result is a rectangular mesh of points and these can be ﬁlled in by quadrilateral
patches to give a reasonable impression of the surface. For instance, let n = 20
then the instances of the curve are obtained by applying the Rotz (2πj/10)

50

Applied Geometry for Computer Graphics and CAD

rotation matrix
⎛

1
⎜ 2
⎜
⎝ 3
1
⎛

0
0
0
0

2
1
−1
−2

cos jπ
5
⎜ 2 cos jπ
5
⎜
=⎝
3 cos jπ
5
cos jπ
5

⎞⎛
1
cos jπ sin jπ 0
5
5
1 ⎟ ⎜ − sin jπ cos jπ 0
5
5
⎟⎜
0
0 1
1 ⎠⎝
0
0 0
1
⎞
jπ
sin 5
2 1
2 sin jπ
1 1 ⎟
5
⎟ .
3 sin jπ −1 1 ⎠
5

sin jπ
5

−2

⎞
0
0 ⎟
⎟
0 ⎠
1

1

Evaluating the points for j = 0, . . . , 20 and plotting yields an approximation
to the surface of revolution illustrated in Figure 3.3. Surfaces of revolution will
be developed further in Section 9.4.4.
2
1
z0
-1
-2
-2
-1
y0

1
2
3

Figure 3.3

2

1

0
x

-1

-2

-3

Approximate surface of revolution

3.3.2 Orientation of a Rigid Body
The orientation of a rigid body is determined by the angles subtended by a
frame on the body relative to a ﬁxed reference frame. A body can be positioned
with any desired orientation by applying a rotation about each of the axes. For

3. Homogeneous Coordinates and Transformations of Space

51

instance, Rotx (θx ) Roty (θy ) Rotz (θz ), which has transformation matrix
⎛
⎞⎛
⎞
1
0
0
0
cos θy 0 − sin θy 0
⎜ 0
cos θx sin θx 0 ⎟ ⎜ 0
1
0
0 ⎟
⎜
⎟⎜
⎟
⎝ 0 − sin θx cos θx 0 ⎠ ⎝ sin θy 0
cos θy 0 ⎠
0
0
0
1
0
0
0
1
⎞
⎛
cos θz sin θz 0 0
⎜ − sin θz cos θz 0 0 ⎟
⎟=
×⎜
⎝
0
0
1 0 ⎠
0

⎛

0

0 1
cos θy sin θz

− sin θy

(sin θx sin θy cos θz
− cos θx sin θz )

(sin θx sin θy sin θz
+ cos θx cos θz )

sin θx cos θy

(cos θx sin θy cos θz
+ sin θx sin θz )

(cos θx sin θy sin θz
− sin θx cos θz )

cos θx cos θy

0

⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎝

cos θy cos θz

0

0

0

⎞

⎟
⎟
⎟
0 ⎟
⎟
⎟
⎟
⎟ .
⎟
⎟
0 ⎟
⎟
⎟
⎠
1

The angles θx , θy , θz are known as the Euler angles. Rotations about the x, y
and z axes are referred to as pitch, yaw and roll respectively. The orientation
(θx , θy , θz ) = (π/6, 7π/6, π/3) is illustrated in Figure 3.4. The rotations can
be taken in any order yielding a number of ways of expressing an orientation.
When θy = π/2 the above transformations simpliﬁes to
⎛
⎞
0
0
−1 0
⎜ sin θx cos θz − cos θx sin θz sin θx sin θz + cos θx cos θz
0 0 ⎟
⎜
⎟
⎝ cos θx cos θz + sin θx sin θz cos θx sin θz − sin θx cos θz
0 0 ⎠
⎛

0

0
0
⎜ sin (θx − θz ) cos (θx − θz )
=⎜
⎝ cos (θx − θz ) − sin (θx − θz )
0
0

0
−1
0
0
0

⎞

0

1

0
0 ⎟
⎟ .
0 ⎠
1

Therefore, the angles θx and θz are not independent. This loss of one degree
of freedom is referred to as gimbal lock . Similar problems arise if the primary
rotations are taken in a diﬀerent order. Despite this deﬁciency the method is
popular in animation due to its simplicity. The deﬁciency can be overcome by
the use of quaternions introduced in Section 3.5.

52

Applied Geometry for Computer Graphics and CAD

3

3

2

-3
-2

-3

-1

0
1

2

2

-3

-2

1

-2

-1

-1

-1
-2

0
1

2

2
3

3
-3

-3
-2

1
-1

-1
-2

2
3

3
-3

Figure 3.4

3.4 Geometric Methods for Lines and Planes in
Space
In Cartesian coordinates a plane is given by an equation of the form ax +
by + cz + d = 0. The equation in homogeneous coordinates is obtained by
substituting x = X/W , y = Y /W , z = Z/W in the equation and multiplying
by W . Hence the homogeneous coordinates (X, Y, Z, W ) of points on the plane
satisfy
aX + bY + cZ + dW = 0.
In Section 2.7 lines in the plane were represented by a line vector. Likewise,
planes in three-dimensional space are speciﬁed by a plane vector or plane coordinates
n= a b c d .
The condition that a point R(X, Y, Z, W ) lies on a plane with plane vector n
can be expressed as a dot product n · R = 0.
Plane Through Three Distinct Points
In Section 2.7 the unique line in the plane through two distinct points was
obtained by performing a cross product. The analogous problem in space is to
determine the unique plane n through three distinct points Pi (Xi , Yi , Zi , Wi )
(i = 1, 2, 3). The plane vector n satisﬁes
n · P1 = 0,

n · P2 = 0,

Thus n is perpendicular to three vectors P1 ,
this to occur is that
e1 e2 e3
X1 Y1 Z1
n=
X2 Y2 Z2
X3 Y3 Z3

n · P3 = 0 .
P2 , and P3 . The condition for
e4
W1
W2
W3

(3.1)

3. Homogeneous Coordinates and Transformations of Space

53

(or n is any multiple of the vector determinant (3.1)) where e1 = (1, 0, 0, 0),
e2 = (0, 1, 0, 0), e3 = (0, 0, 1, 0), and e4 = (0, 0, 0, 1), the unit vectors in the
coordinate directions of R4 . The vector obtained from the determinant (3.1) is
denoted by orth(P1 , P2 , P3 ).
Intersection of Three Planes
Analogously, the point of intersection P of three planes n1 , n2 , and n3
satisﬁes
n1 · P = 0, n2 · P = 0, n3 · P = 0.
Hence the homogeneous coordinates of the intersection are given by P =
orth(P1 , P2 , P3 ).

Example 3.6
The plane through the points (5, 4, 2), (−1, 7, 3), and (2, −2, 9) is given by the
determinant
e1
5
−1
2

e2 e3 e4
4 2 1
7 3 1
−2 9 1

= e1

4 2 1
7 3 1
−2 9 1

− e2

5
−1
2

2
3
9

1
1
1

5
4 1
5
−1
7 1 − e4 −1
2 −2 1
2
27e1 + 39e2 + 45e3 − 381e4 .
+ e3

=

4 2
7 3
−2 9

Thus giving the line 27x + 39y + 45z − 381 = 0.

Example 3.7
The point of intersection of the three planes
3x + 5y + z = 2,

7x − 4z = −1,

2y + 5z + 8 = 0

is obtained by computing the determinant
e1
3
7
0

e2 e3 e4
5
1 −2
0 −4
1
2
5
8

= −199e1 + 237e2 − 314e3 + 137e4 .

Thus giving the point with homogeneous coordinates (−199, 237, −314, 137)
and Cartesian coordinates − 199 , 237 , − 314 .
137 137
137

54

Applied Geometry for Computer Graphics and CAD

Points and planes in three-dimensional space may be assigned unique homogeneous coordinates. A line in space may be speciﬁed by any two distinct
points on the line or by two distinct planes which contain the line. To yield
unique coordinates for a line, take any two points with homogeneous coordinates P(x0 , x1 , x2 , x3 ) and Q(y0 , y1 , y2 , y3 ) on the line and let
pij = xi yj − xj yi
for i = 0, . . . , 3 and j = 0, . . . , 3. Then p = (p12 , p20 , p01 , p03 , p13 , p23 ) are
uniquely deﬁned homogeneous line coordinates, also known as Pl¨cker or Grassu
mann coordinates. The line coordinates are independent of the choice of points.
For, suppose that U(u0 , u1 , u2 , u3 ) = aP + bQ and V(v0 , v1 , v2 , v3 ) = cP + dQ
are another choice of distinct points on the line. Then
u i vj − u j vi

=

(axi + byi ) (cxj + dyj ) − (axj + byj ) (cxi + dyi )

=

(ad − bc) (xi yj − xj yi ) = (ad − bc) pij .

Thus any distinct pair of points used to deﬁne the line results in a scalar
multiple of pij . It follows that the line coordinates, considered as homogeneous
coordinates (in a ﬁve-dimensional projective space) uniquely represent lines in
three-dimensional space.
Alternatively, a line can be deﬁned by the intersection of two planes. If the
planes have plane vectors L( 0 , 1 , 2 , 3 ) and M(m0 , m1 , m2 , m3 ), then let
ρij =

i mj

−

j mi

for i = 0, . . . , 3 and j = 0, . . . , 3. Then ρ = (ρ12 , ρ20 , ρ01 , ρ03 , ρ13 , ρ23 ) are called
the dual line coordinates. The line and dual line coordinates are related by
ρ12
ρ20
ρ01
ρ03
ρ13
ρ23
=
=
=
=
=
,
p03
p13
p23
p12
p20
p01
that is,
(p12 , p20 , p01 , p03 , p13 , p23 ) = µ (ρ03 , ρ13 , ρ23 , ρ12 , ρ20 , ρ01 ) ,
for some µ = 0.

Lemma 3.8
Two lines with line coordinates p = (p12 , p20 , p01 , p03 , p13 , p23 ) and q =
(ρ12 , ρ20 , ρ01 , ρ03 , ρ13 , ρ23 ) intersect if and only if
p12 q03 + p20 q13 + p01 q23 + p03 q12 + p13 q20 + p23 q01 = 0 .

3. Homogeneous Coordinates and Transformations of Space

55

Proof
If p is the line through points with homogeneous coordinates P1 (x0 , x1 , x2 , x3 )
and P2 (y0 , y1 , y2 , y3 ), and q is the line through points Q1 (X0 , X1 , X2 , X3 )
and Q2 (Y0 , Y1 , Y2 , Y3 ), then the lines have a common point if and only if
αP1 + βP2 = γQ1 + δQ2 for some α, β, γ, δ. Thus P1 , P2 , Q1 , Q2 are linearly
dependent vectors implying
x0
y0
X0
Y0

x1
y1
X1
Y1

x2
y2
X2
Y2

x3
y3
X3
Y3

=0.

Expansion of the determinant (using Laplace’s expansion is the most succinct
method) gives
p12 q03 + p20 q13 + p01 q23 + p03 q12 + p13 q20 + p23 q01 = 0 .

EXERCISES
3.1. Determine the Cartesian coordinates of the following points (3, 6, 5, 2),
(2, 4, 6, 4), (0, 0, 2, 1), (2, 0, 0, 2).
3.2. Determine the point at inﬁnity in the directions of the following
vectors (3, 4, 1) and (7, 2, 0).
3.3. Determine the homogeneous transformation matrices for the following.
(a) A rotation about the z-axis through an angle of π/4.
(b) A scaling by a factor of 3 units in the y-direction, followed by
a translation of 2 units in the x-direction and 5 units in the
z-direction, followed by a rotation about the x-axis through an
angle 7π/6.
(c) A reﬂection in the plane 6x − 6y + 3z − 5 = 0.
(d) A rotation about the line through the points (2, 1, 2) and (8, 3, 5)
through an angle 5π/6.
3.4. Determine the Cartesian coordinates of the point of intersection of
the three planes 2x−y+z = 0, −4x+3y−2z−5 = 0, and x+y−6 = 0.
3.5. Determine the plane through (1, 1, −1), (−9, 7, 3), and (2, 0, 5).

56

Applied Geometry for Computer Graphics and CAD

3.6. Show that every point on the line through the points with homogeneous coordinates P and Q has homogeneous coordinates of the
form αP + βQ.
3.7. Prove that three points P, Q, and R are collinear if and only if
orth(P, Q, R) = 0. What does orth(n1 , n2 , n3 ) = 0 imply about
three planes n1 , n2 , and n3 ?
3.8. (a) What does orth(P, Q, R) · e4 = 0 imply about points P, Q, R ?
(b) What does orth(n1 , n2 , n3 ) · e4 = 0 say about the lines n1 , n2 ,
n3 ?
3.9. Let P(x0 , x1 , x2 , 1) and Q(y0 , y1 , y2 , 1) and let pij = xi yj − xj yi .
Show that ω = (p03 , p13 , p23 ) and v = (p12 , p20 , p01 ) and that the
Cartesian coordinates of P and Q satisfy ω = P − Q, and v =
P × Q. Deduce that ω determines the direction of the line, and v is
normal to the plane containing the line and the origin.
3.10. Show that ω · v = 0, and hence deduce that
(p03 , p13 , p23 ) · (p12 , p20 , p01 ) = p03 p12 + p13 p20 + p23 p01 = 0 . (3.2)
Thus p = (p12 , p20 , p01 , p03 , p13 , p23 ) corresponds to a line in threedimensional space if and only if p lies on the quadric deﬁned by
Equation (3.2).
3.11. Determine the matrix for a rotation through an angle θ about an
axis that passes through the origin and has direction given by the
unit vector (r1 , r2 , r3 ).

3.5 Quaternions
Quaternions provide an alternative to matrices as a way of representing orientations in three-dimensional space. They are used to apply rotations to objects
in computer graphics animation. Discovered by William Hamilton in 1843,
quaternions may be considered a generalisation of complex numbers. Complex
numbers are represented in the form a + bi where i2 = −1, and a and b are real
numbers. The operations of addition and multiplication are deﬁned as
(a1 + b1 i) + (a2 + b2 i)

=

(a1 + a2 ) + (b1 + b2 )i ,

and

(a1 + b1 i)(a2 + b2 i) = a1 a2 + a1 b2 i + b1 a2 i + b1 b2 i2
=

(a1 a2 − b1 b2 ) + (a1 b2 + b1 a2 )i .

3. Homogeneous Coordinates and Transformations of Space

57

A quaternion is an extended complex number s+xi+yj+zk, where s, x, y, z are
real numbers, and i2 = −1, j2 = −1, k2 = −1, and ijk = −1. These identities
imply a further six identities: ij = −ji = k, jk = −kj = i, and ik = −ki = −j.
For instance, ijk = −1 implies that ijkk = −k, and since k2 = −1 it follows
that ij = k. The remaining identities are left as an exercise (Exercise 3.14).
Addition of quaternions is similar to that of complex numbers:
(s1 + x1 i + y1 j + z1 k) + (s2 + x2 i + y2 j + z2 k)
= (s1 + s2 ) + (x1 + x2 )i + (y1 + y2 )j + (z1 + z2 )k .
Multiplication is given by
(s1 + x1 i + y1 j + z1 k)(s2 + x2 i + y2 j + z2 k)
= s1 s2 + s1 x2 i + s1 y2 j + s1 z2 k + s2 x1 i + x1 x2 i2 + x1 y2 ij + x1 z2 ik
+ s2 y1 j + x2 y1 ji + y1 y2 j2 + y1 z2 jk + s2 z1 k + x2 z1 ki + y2 z1 kj + z1 z2 k2
= s1 s2 + s1 x2 i + s1 y2 j + s1 z2 k + s2 x1 i − x1 x2 + x1 y2 k − x1 z2 j
+ s2 y1 j − x2 y1 k − y1 y2 + y1 z2 i + s2 z1 k + x2 z1 j − y2 z1 i − z1 z2
=

(s1 s2 − x1 x2 − y1 y2 − z1 z2 ) + (s1 x2 + s2 x1 + y1 z2 − y2 z1 )i
+ (s1 y2 + s2 y1 − x1 z2 + x2 z1 )j + (s1 z2 + s2 z1 + x1 y2 − x2 y1 )k .

Alternatively, a quaternion may be written in the form (s, v) where v =
(x, y, z). The operations of addition and multiplication are
(s1 , v1 ) + (s2 , v2 ) = (s1 + s2 , v1 + v2 ) ,

and

(s1 , v1 )(s2 , v2 ) = (s1 s2 − v1 · v2 , s1 v2 + s2 v1 + (v1 × v2 )) .
Since v1 ×v2 = −v2 ×v1 , the multiplication of quaternions is non-commutative:
in general, (s1 , v1 )(s2 , v2 ) = (s2 , v2 )(s1 , v1 ).

Example 3.9
(a)
(3 + 5i − 2j + 7j) + (1 − 4j − 3k)

=

(3 + 1) + 5i + (−2 − 4)j + (7 − 3)k

=

4 + 5i − 6j + 4k .

(b)
(2 + 3i + 5k)(2 − 5j + 2k)
=

4 − 10j + 4k + 6i − 15ij + 6ik + 10k − 25kj + 10k2

=

4 − 10j + 4k + 6i − 15k − 6j + 10k + 25i − 10

= −6 + 31i − 16j − k .

58

Applied Geometry for Computer Graphics and CAD

(c)
(−3, (4, 1, 2))(2, (−1, 0, 3))
=

(−6 − ((4, 1, 2) · (−1, 0, 3)),
− 3(−1, 0, 3) + 2(4, 1, 2) + ((4, 1, 2) × (−1, 0, 3)))

=

(−6 − 2, (3, 0, −9) + (8, 2, 4) + (3, −14, 1))

=

(−8, (14, −12, −4)) .

Quaternions of the form (s, 0) are identiﬁed with real numbers s and it
common to write the quaternion as s. In particular, (0, 0) is denoted 0, and
(1, 0) is denoted 1. Quaternions of the form (0, v) are called pure imaginary
quaternions and are identiﬁed with three-dimensional vectors v.
The following algebraic properties are satisﬁed by all quaternions p =
(s1 , v1 ), q = (s2 , v2 ) and r = (s3 , v3 ).
Additive identity: p + 0 = 0 + p.
Multiplicative identity: 1p = p1 = p.
Commutative addition: p + q = q + p.
Associative addition: (p + q) + r = p + (q + r).
Associative multiplication: (pq)r = p(qr).
Distributive: p(q + r) = pq + pr and (p + q)r = pr + qr.
No zero divisors: If pq = 0 then p = 0 or q = 0.
Most of the properties can be obtained directly from the deﬁnitions of addition
and multiplication (Exercise 3.17).
The property of no zero divisors is proved as follows. Suppose pq = 0. Then
(s1 s2 − v1 · v2 , s1 v2 + s2 v1 + (v1 × v2 )) = 0 which implies that v1 · v2 = s1 s2
and
(3.3)
s1 v2 + s2 v1 + (v1 × v2 ) = 0 .
Applying the dot product of v1 to both sides of Equation (3.3) gives
s1 v2 · v1 + s2 v1 · v1 + (v1 × v2 ) · v1 = 0 .
Then, since v1 · v2 = s1 s2 and (v1 × v2 ) · v1 = 0, it follows that
s2 s2 + s2 v1 · v1 = s2 (s2 + v1 · v1 ) = 0 .
1
1
Similarly, the following condition is also satisﬁed:
s1 (s2 + v2 · v2 ) = 0 .
2

3. Homogeneous Coordinates and Transformations of Space

59

There are three cases to consider: (i) (s2 + v1 · v1 ) = 0, (ii) (s2 + v2 · v2 ) = 0,
1
2
and (iii) s1 = s2 = 0. When s2 + v1 · v1 = 0, then s1 = 0 and v1 = 0, and
1
therefore p = 0. Likewise, when s2 + v2 · v2 = 0, then q = 0. Finally, when
2
s1 = s2 = 0, then −v1 · v2 = v1 × v2 = 0. Therefore, either v1 = 0 and hence
p = 0, or v2 = 0 and hence q = 0.
Let q = (s, v) = s + xi + yj + zk be any quaternion, then the conjugate
quaternion, denoted q, is deﬁned to be (s, −v) = s − xi − yj − zk. Then
qq =
=

(s2 + v · v, −sv + sv − (v × v))
(s2 + v · v, 0) = (s2 + |v|2 , 0)

= s2 + |v|2 .
The modulus of q, denoted |q|, is deﬁned to be
|q| = (qq)1/2 = (s2 + |v|2 )1/2 .
A quaternion q satisfying |q| = 1 is said to be a unit quaternion. Every non-zero
quaternion q has a multiplicative inverse quaternion, denoted q−1 , satisfying
qq−1 = q−1 q = 1 (see Exercise 3.15). The inverse is
q−1 =

q
.
|q|2

(3.4)

Readers with a knowledge of algebraic structures may conclude that the algebraic properties described earlier, together with the existence of additive and
multiplicative inverses (Exercises 3.15 and 3.16), imply that the quaternions
are a non-commutative division ring.

Example 3.10
Let q = (2, (−1, 0, 3)). Then q = (2, (1, 0, −3)), and |q| = (22 + (−1, 0, 3) ·
√
1
1
3
(−1, 0, 3))1/2 = 14. Hence q−1 = q/|q|2 = 14 (2, (1, 0, −3)) = 1 , ( 14 , 0, − 14 ) .
7

EXERCISES
3.12. Determine the following sums and products of quaternions
(a) (7 + 3i + 5j − 3k) + (−2 + 3i + 6j − 4k),
(b) (9, (2, −1, 3)) + (−7, (1, 0, −2)),
(c) (2 + 4i − 9j + 5k)(5 + 3i − 2k),
(d) (−2, (3, 2, −5))(7, (0, 1, 4)), and

60

Applied Geometry for Computer Graphics and CAD

(e) (7, (0, 1, 4))(−2, (3, 2, −5)).
3.13. Find the (multiplicative) inverses of (a) (2, (5, −3, 4)), and
(b) (−3, (4, 0, −1)).
3.14. Show that ij = −ji = k, jk = −kj = i, and ik = −ki = −j.
3.15. Show that the (multiplicative) inverse quaternion given by (3.4) satisﬁes qq−1 = q−1 q = 1.
3.16. Show that every quaternion q has an additive inverse, denoted −q
satisfying q + (−q) = (−q) + q = 0.
3.17. Use the deﬁnitions of addition and multiplication to prove the algebraic properties of quaternions given on page 58.
3.18. Show that (a) q1 q2 = q2 q1 , and (b) |q1 q2 | = |q1 ||q2 |.
3.19. Let I = (0, v). Show that I2 = −|v|2 .
3.20. Write a computer program to perform quaternion addition, multiplication, conjugation, and to ﬁnd multiplicative inverses. (Alternatively, do the same using a computer algebra package.)

Lemma 3.11
Any unit quaternion q = (s, v) has the form
q = (cos θ, sin θI)
for some angle θ and unit vector I.

Proof
Since |q|2 = s2 + |v|2 = 1, it follows that −1 ≤ s ≤ 1. So s = cos θ for some
0 ≤ θ ≤ π. Then
|v|2 = 1 − s2 = 1 − cos2 θ = sin2 θ .
Therefore,
v = |v|

v
= sin θI ,
|v|

where I = v/|v|, and so q = (cos θ, sin θI).
Let eθI denote (cos θ, sin θI). A modiﬁcation to the proof of Lemma 3.11
yields that any quaternion q can be expressed in the polar form q = reθI =
r(cos θ, sin θI). The set of quaternions of the form (a, bI), for some ﬁxed unit
vector I, has very similar properties to the complex numbers a + bi. Indeed,

3. Homogeneous Coordinates and Transformations of Space

61

there is a result for quaternions corresponding to the Theorem of de Moivres
for complex numbers:
n

(r(cos θ, sin θI)) = rn (cos nθ, sin nθI) .

(3.5)

Example 3.12
To express q = (4, (1, 2, −2)) in polar form, let r = |q| = 5. Then, 1 q =
5
4
1 2
2
is a unit quaternion. Following the proof of Lemma 3.11 gives
5, 5, 5, −5
cos θ = 4 , sin θ = 3 , and θ = 0.6435 radians. Further, |(1, 2, −2)| = 3 and so
5
5
I = 1 (1, 2, −2) = 1 , 2 , − 2 . Hence q = 5 (cos θ + sin θI).
3
3 3
3
Let q = s + xi + yj + zk and p = w + p1 i + p2 j + p3 k. The left and right
quaternion multiplications qp and pq can be written as the matrix multiplications
⎛
⎞
s
x
y
z
⎜ −x
s
z −y ⎟
⎟ , and
qp = pLq = w p1 p2 p3 ⎜
⎝ −y −z
s
x ⎠
−z
y −x
s
⎛
⎞
s
x
y
z
⎜ −x
s −z
y ⎟
⎟ .
pq = pRq = w p1 p2 p3 ⎜
⎝ −y
z
s −x ⎠
−z −y
x
s
Suppose that q is a non-zero quaternion, and let Cq (p) = qpq−1 . (Note that
when q is a unit quaternion Cq (p) = qpq.) Then
Cq (p) = (qp) q−1 = (pLq ) q−1 = (pLq ) Rq−1 = p Lq Rq−1

,

or, alternatively,
Cq (p) = q pq−1 = q pRq−1 = pRq−1 Lq = p Rq−1 Lq .
Then
Cq = Lq Rq−1 = Rq−1 Lq =
⎛

s2 + x2 + y 2 + z 2
⎜
0
⎜
⎝
0
0

0
2
2
s + x − y2 − z2
2xy − 2sz
2xz + 2sy

0
2xy + 2sz
s2 − x2 + y 2 − z 2
2yz − 2sx

⎞
0
⎟
2xz − 2sy
⎟ .
⎠
2yz + 2sx
2
2
2
2
s −x −y +z

Now suppose that q = (cos θ , sin θ I) where I = (r1 , r2 , r3 ). Then, s = cos θ ,
2
2
2
x = r1 sin θ , y = r2 sin θ and z = r3 sin θ , and substitution into Cq yields
2
2
2

62

Applied Geometry for Computer Graphics and CAD

(after some algebraic manipulation and row and column swapping) the matrix
of Exercise 3.11. Thus Cq is the matrix for a rotation about I through an angle
θ. If the point with homogeneous coordinates p = (p1 , p2 , p3 , w) is identiﬁed
with the quaternion p = w + p1 i + p2 j + p3 k, then Cq (p) = qpq−1 yields
the rotation of p about I, and thus proving the following key theorem linking
quaternions to rotations. (The converse, that any rotation is given by Cq for
some unit quaternion q, is left as an exercise.)

Theorem 3.13
Let q = (cos θ , sin θ I)) be a unit quaternion, and p any quaternion. Then
2
2
Cq (p) = qpq−1 yields a rotation of p about the axis I through an angle θ.
Conversely, any rotation is given by Cq for some unit quaternion q.
The next lemma provides an alternative way of computing Cq (p).

Lemma 3.14
Let q = (s, v) and p = (w, x). Then
Cq (p) = qpq−1 =

Proof

w,

qpq−1

1
(s2 − v · v)x + 2(x · v)v − 2s(x × v)
|q|2
= q ((w, 0) + (0, x)) q−1
= q(w, 0)q−1 + q(0, x)q−1 .

But

.

(3.6)

q(w, 0)q−1 = (w, 0)qq−1 = (w, 0) ,

(3.7)

and
q(0, x)q−1

=
=

1
1
(s, v)(0, x)(s, −v) =
(s, v)(x · v, sx − (x × v))
|q|2
|q|2
1
(s(x · v) − v · (sx − (x × v)),
|q|2
s2 x − s(x × v) + (x · v)v + s(v × x) − v × (x × v)

=

0,

1
(s2 − v · v)x + 2(x · v)v − 2s(x × v)
|q|2

(3.8)

using the vector identity a × (b × c) = (a · c)b − (a · b)c. Then (3.6), (3.7) and
(3.8) give
qpq−1 =

w,

1
(s2 − v · v)x + 2(x · v)v − 2s(x × v)
|q|2

.

3. Homogeneous Coordinates and Transformations of Space

63

Note that, since the w-coordinate remains unchanged in the calculation
of Cq (p), it is common practice to identify the point with aﬃne coordinates
(p1 , p2 , p3 ) with the pure imaginary quaternion (0, (p1 , p2 , p3 )) rather than with
(1, (p1 , p2 , p3 )).

Example 3.15
A rotation about an axis with direction (−4, 2, 4) through an angle π/3 is
obtained as follows. Normalize (−4, 2, 4) to give I = (−2/3, 1/3, 2/3). Then
√ √ √
3
3
3
2 1 2
1
, −
,
,
.
q =
cos(π/3), sin(π/3) − , ,
=
3 3 3
2
3
6
3
The rotation is applied to the point (3, 6, −5), say, by letting p = (0, (3, 6, −5))
(or p = (1, (3, 6, −5))) and computing
Cq (p) = qpq−1
√ √ √
1
3
3
3
1
, −
,
,
(0, (3, 6, −5))
,
=
2
3
6
3
2
√
√
√
√
5 3 3 17 3
2 3 5 5 3
=
,
−
,3 −
,− −
3
2
6
3
2
2
√
√
√
11 17 3 14 2 3 5 5 3
−
,− −
,− −
=
0,
6
6
3
3
6
2
The rotated point is

11
6

−

√
17 3
14
6 ,− 3

−

√
2 3
5
3 , −6

√

√
√
3
3
3
,−
,−
3
6
3
√
√
√
3
3
3
1
,
,−
,−
2
3
6
3
.

−

√
5 3
2

which is approxi-

mately (−3.074, −5.821, −5.163).

EXERCISES
3.21. Find the polar forms for (a) (2, (1, 2, 4)) and (b) (5, (−2, 2, 4)).
3.22. Show that two quaternions q1 = r1 eθ1 I and q2 = r2 eθ2 I satisfy (a)
q1 q2 = r1 r2 e(θ1 +θ2 )I , and (b) q1 −1 = r1 e−θ1 I .
3.23. Show that Cq1 and Cq2 yield the same rotation if and only if q1 =
λq2 , for some real number λ = 0.
3.24. Show that the rotation Cq1 q2 gives the rotation Cq1 followed by the
rotation Cq2 .

64

Applied Geometry for Computer Graphics and CAD

3.25. Determine the quaternion q that represents a rotation about the
axis (−1, 2, 2) through an angle π/4. Apply the rotation to the point
(5, 6, 7).
3.26. Show that, for any quaternion q, |Cq (x)| = |x|. (Cq is said to be an
isometry.)
3.27. Prove the converse to Theorem 3.13, that any three-dimensional rotation is given by Cq for some unit quaternion q
3.28. Write a computer program (or use a computer algebra package) to
perform rotations using the operation Cq .

Example 3.16
The rotations about the coordinate axis are Rotx (θx ) = cos 1 θx , sin 1 θx , 0, 0 ,
2
2
Roty (θy ) = cos 1 θy , 0, sin 1 θy , 0 , and Rotz (θz ) = cos 1 θz , 0, 0, sin 1 θz .
2
2
2
2
Then the representation of orientation given by Euler angles (θx , θy , θz ) (described in Section 3.3.2) has the form qpq−1 where
q = Rotz (θz )Roty (θy )Rotx (θx ) .
Suppose θy = π/2. Then
q

= Rotz (θz )Roty (π/2)Rotx (θx )
θz
1
θx
1
θx
θz
√ , 0, √ , 0
cos , sin , 0, 0
=
cos , 0, 0, sin
2
2
2
2
2
2
1
θz
θx
θx
θx
θz
θx
= √
cos , 0, 0, sin
cos , sin , cos , − sin
2
2
2
2
2
2
2
θz
θx
θz
θx
θz
θz
θx
1
θx
cos
+ sin
sin , sin
cos
− sin
cos ,
= √
cos
2
2
2
2
2
2
2
2
2
θz
θx
θz
θx
θz
θz
θx
θx
cos
+ sin
sin , sin
cos
− sin
cos
cos
2
2
2
2
2
2
2
2
θx − θz
θx − θz
θx − θz
1
θx − θz
, sin
, cos
, sin
= √
.
cos
2
2
2
2
2

As remarked in Section 3.3.2, the Euler angle representation has the problem
of gimbal lock caused by the loss of one degree of freedom. In Example 3.16 the
Euler parameters θx and θz are not independent and account for the loss of one
freedom. Quaternions overcome the gimbal lock problem since any orientation
can be expressed by a unit quaternion (cos θ, sin θI).
Unit quaternions q = (s, (x, y, z)) can be represented geometrically by a
point on the unit sphere |q|2 = s2 + x2 + y 2 + z 2 = 1 in four-dimensional

3. Homogeneous Coordinates and Transformations of Space

65

space R4 . Note that, as a consequence of Exercise 3.23, antipodal points on the
sphere represent the same rotation or orientation. An animation of an object
between a start orientation qs and an end orientation qe can be performed
by determining a curve (contained in the sphere) that interpolates the two
points. Each point on the curve corresponds to a quaternion that speciﬁes an
intermediate orientation of the object. An interpolating curve can be obtained
by considering great arcs on a sphere in R3 and extending to the sphere of unit
quaternions in R4 by analogy.
Consider two points on the unit sphere in R3 with (unit) position vectors
a and b. A point p on the great arc through a and b lies in the plane through
the origin containing the directions a and b. Hence p = αa + βb, for some real
numbers α and β. Suppose that a and b make an angle φ, and a and p make
an angle θ. Then the following conditions are satisﬁed:
a·a = b·b = p·p = 1,
a·b =

cos φ ,

a · p = cos θ ,

b · p = cos(φ − θ) .

Then
a · p = a · (αa + βb) = αa · a + βa · b = α + β cos φ ,
b · p = b · (αa + βb) = αa · b + βb · b = α cos φ + β ,
giving
cos θ

= α + β cos φ ,

(3.9)

cos(φ − θ) = α cos φ + β .

(3.10)

Solving (3.9) and (3.10) for α and β, and applying trigonometric formulae gives
α

=

β

=

sin(φ − θ)
cos θ − cos φ cos(φ − θ)
=
,
1 − cos2 φ
sin φ
cos(φ − θ) − cos φ cos θ
sin θ
=
.
1 − cos2 φ
sin φ

and

The arc is parametrized on the interval 0 ≤ t ≤ 1 by setting θ = tφ to give
p(t) = αa + βb =

sin((1 − t)φ)
sin(tφ)
a+
b.
sin φ
sin φ

By analogy, the formula is extended to give an arc q(t) interpolating two quaternions qs and qe :
q(t) =

sin(tφ)
sin((1 − t)φ)
qs +
qe .
sin φ
sin φ

The arc can also be expressed as the quaternion multiplication
q(t) = (qe qs −1 )t qs

or

q(t) = qs (qs −1 qe )t ,

for 0 ≤ t ≤ 1, but this formulation is less useful for applications.

(3.11)

66

Applied Geometry for Computer Graphics and CAD

Example 3.17
Let qs =
2
1 2
3 , 0, 3 , 3

1
5,

=

2 4 2
5, 5, 5
2
3

q(t)

2
3,

and qe =
√

, giving sin φ =

5
3

. Then cos φ =

1 2 4 2
5, 5, 5, 5

·

and φ = 0.8411. Then
6
12
6
√ , √ , √
5 5 5 5 5 5
2
1
2
√ , 0, √ , √
.
5
5
5

sin(0.8411(1 − t))

=

0, 1 , 2
3 3

+ sin(0.8411t)

3
√ ,
5 5

Intermediate orientations of the animation are obtained by evaluating q(t) for
0 ≤ t ≤ 1. For instance, the intermediate quaternion corresponding to t = 0.4
is obtained by evaluating q(0.4) = (0.4250, (0.2595, 0.6666, 0.5547)).
Figure 3.5 illustrates the result of applying the animation to the triangle
with vertices (5, 5, 0), (10, 5, 0) and (7, 10, 0). The location at which the triangle is deﬁned is diﬀerent to the start location because the start orientation is
not speciﬁed by identity quaternion. The ﬁgure shows the start, end and an
intermediate position of the triangle. The locus of a point p is (in general) a
curve parametrized by C(t) = q(t)pq(t)−1 . The ﬁgure shows three curves that
are the loci of the triangle vertices.
10

5

0

start position
(t=0)

intermediate position
(t=0.4)

defining location

end position
(t=1)

10
5

0
0

5
-5
-10

Figure 3.5

10

Animation of a triangle generated by quaternions

Exercise 3.29
Let qs = 2 , 0, 6 , − 3 and qe = 2 , 2 , 0, 1 . Apply formula (3.11) to
7
7
7
3
3
3
obtain a motion with initial orientation qs and ﬁnal orientation qe . Suppose the motion is applied to a triangular body with vertices (10, 0, 0),
(15, 0, 0) and (12, 10, 0). Determine parametric expressions for the curves
that are the loci of the vertices.

4

Projections and the Viewing Pipeline

4.1 Introduction
This chapter describes the process of visualizing three-dimensional objects.
Current display devices such as computer monitors and printers are twodimensional, and therefore it is necessary to obtain a planar view of the object
which gives the impression of the omitted third dimension. Visualization of an
object is achieved by a sequence of operations called the viewing pipeline (see
Figure 4.1). Firstly, a projection is applied which maps the object to a new
“ﬂat” object in a speciﬁed plane known as the viewplane. The “ﬂat” object
represents a planar view of the object expressed in three-dimensional world
coordinates. Secondly, a coordinate system in the viewplane is deﬁned by specifying a point as origin, and two perpendicular vectors which give the directions
of the coordinate axes. A viewplane coordinate mapping is applied to express
the “ﬂat” object in terms of the chosen two-dimensional viewplane coordinate
system. Finally, the “ﬂat” object is mapped to the computer screen by means
of a two-dimensional device coordinate transformation.

Projection
Device
coordinate
transformation

Figure 4.1

Viewplane

The viewing pipeline
67

68

Applied Geometry for Computer Graphics and CAD

The discussion begins in Section 4.2 with projections of the plane onto a
line, and is followed by projections of three-dimensional space onto a plane in
Section 4.3. Section 4.4 introduces the viewplane coordinate mapping which
converts the three-dimensional world coordinate deﬁnition of the view to twodimensional coordinates. The ﬁnal step of mapping the view to the display
device is discussed in Section 4.5. In Section 11.6, projections are used to create
shadows which arise when light sources illuminate objects in a scene.

4.2 Projections of the Plane
A view of a spatial object is obtained by a mapping or projection of threedimensional space onto a plane. Consider ﬁrst the simpler problem of projecting
the plane onto a line contained in the plane. Let be a line in the plane, and
let V be a point not on the line. The perspective projection from V onto is
the transformation which maps any point P, distinct from V, onto the point
P which is the intersection of the lines VP and , as illustrated in Figure 4.2.
The point V is called the viewpoint or centre of perspectivity, and the line
is called the viewline. The next theorem shows that this mapping is indeed a
transformation.

l

V
P
P
Figure 4.2

Perspective projection from the viewpoint V onto the line

Theorem 4.1
The perspective projection from the viewpoint V (expressed in homogeneous
coordinates) onto the viewline with line vector is the two-dimensional transformation given by the matrix
M=

T

V − ( · V)I3 ,

where I3 denotes the 3 × 3 identity matrix.

4. Projections and the Viewing Pipeline

69

Proof
Referring to Figure 4.2, the image P of a point P is obtained as the intersection
of the viewline with the line through V and P. The techniques of Section 2.7
imply that the line through V and P has the line vector V × P, and therefore
intersects in the point with homogeneous coordinates given by × (V × P).
Applying the vector identity A × (B × C) = (C · A) B − (A · B) C yields
P = × (V × P) = (P · ) V − ( · V) P .
Replacing vectors by row matrices, and the dot product by a matrix multiplication, yields
P =P

T

V − P ( · V)I3 = P

Thus P = PM, where M =

T

T

V − ( · V)I3 .

V − ( · V)I3 as required.

Deﬁnition 4.2
The matrix M is called the projection matrix of the perspective projection from
V onto . Lines through the viewpoint are called projectors. The viewpoint
V can be a point at inﬁnity in which case the projection is called a parallel
projection. It is common practice to use the term “perspective projection” to
mean a non-parallel projection.
For a parallel projection with viewpoint V (v1 , v2 , 0) the projectors correspond to parallel lines in the Cartesian plane with direction (v1 , v2 ) as shown
in Figure 4.3.

l

V (v1,v2,0)
(at infinity)
P

(v1,v2)

P

Figure 4.3

Parallel projection in the direction (v1 , v2 ) onto the line

Example 4.3
The perspective projection of the triangle with vertices A(2, 3), B(4, 4), and
C(3, −1) onto the line 5x + y − 4 = 0 from the viewpoint with Cartesian
coordinates (10, 2) is illustrated in Figure 4.4. The homogeneous viewpoint is

70

Applied Geometry for Computer Graphics and CAD

V (10, 2, 1), the line vector is = (5, 1, −4), and ·V = (5, 1, −4)·(10, 2, 1) = 48.
Hence
⎛
⎞
⎛
⎞
5
1 0 0
M = ⎝ 1 ⎠ 10 2 1 − 48 ⎝ 0 1 0 ⎠
−4
0 0 1
⎛
⎞ ⎛
⎞ ⎛
⎞
50 10
5
48 0 0
2
10
5
= ⎝ 10
2
1 ⎠ − ⎝ 0 48 0 ⎠ = ⎝ 10 −46
1 ⎠ .
−40 −8 −4
0
0 48
−40
−8 −52
The images of the vertices are obtained
dinates of A, B, and C by M. Then
⎞ ⎛
⎞
⎛
⎛
A
2
3
A
⎝ B ⎠ = ⎝ B ⎠M = ⎝ 4
4
C
C
3 −1

by multiplying the homogeneous coor⎞
⎛
1
−6 −126
1 ⎠M = ⎝
8 −152
1
−44
68

⎞
−39
−28 ⎠ .
−38

The Cartesian coordinates of the vertex images are A (6/39, 126/39),
B (−8/28, 152/28), and C (44/38, −68/38).
B

5
B

4
3

A

A

V

2
1
0
0
-1
-2

1

2

3

4

5

6

7

8

9

10

C
C

-3
-4

Figure 4.4

Perspective projection of Example 4.3

Example 4.4
The parallel projection of the triangle with vertices A(2, 3), B(4, 4), and
C(3, −1) onto the line 3x + 2y − 4 = 0 in the direction of the y-axis is shown
in Figure 4.5. The viewpoint is V (0, 1, 0), the point at inﬁnity in the direction
of the y-axis. Then = (3, 2, −4), and · V = (3, 2, −4) · (0, 1, 0) = 2. Thus
⎛
⎞
⎛
⎞ ⎛
⎞
3
1 0 0
−2 3
0
M = ⎝ 2 ⎠ 0 1 0 − 2⎝ 0 1 0 ⎠ = ⎝ 0
0
0 ⎠ ,
−4
0 0 1
0 −4 −2

4. Projections and the Viewing Pipeline

and
⎛

⎞ ⎛
A
2
3
⎝ B ⎠=⎝ 4
4
C
3 −1

71

⎞⎛
⎞
⎛
1
−2 3
0
−4 2
1 ⎠⎝ 0
0
0 ⎠ M = ⎝ −8 8
1
0 −4 −2
−6 5

⎞
−2
−2 ⎠ .
−2

Thus the Cartesian coordinates of the images are A (2, −1), B (4, −4), and
C (3, −5/2).
5
B

4
A

3
2
1
0
0
-1
-2
-3
-4

Figure 4.5

1

2

3

4

5

6

C

A
C

B

Parallel projection of Example 4.4

EXERCISES
4.1. Determine the projection matrix for a perspective projection with
viewpoint (2, 11) and viewline −3x + 12y − 5 = 0.
4.2. Determine the projection matrix for a parallel projection in the direction (3, −2) and viewline 7x − 5y − 2 = 0.
4.3. Determine the projection matrix for a perspective projection with
viewpoint (7, −3) and viewline x − y + 9 = 0. Apply the projection
to the triangle with vertices A(2, 2), B(4, 3), and C(3, 5). Make a
sketch showing the projection of the triangle onto the line.
4.4. Determine the projection matrix for a parallel projection in the direction (−1, 4) and viewline 2x − y + 8 = 0. Apply the projection
to the triangle with vertices A(2, 2), B(4, 3), and C(3, 5). Make a
sketch showing the projection of the triangle onto the line.
4.5. Let P = (p1 , p2 , p3 ), V = (v1 , v2 , v3 ), and
proof of Theorem 4.1 in full.

= (a, b, c). Write out the

72

Applied Geometry for Computer Graphics and CAD

4.3 Projections of Three-dimensional Space
Projections of three-dimensional space follow a similar line of development to
projections of the plane. Let n be the plane vector of a viewplane, and let V
be a point not on the viewplane. The perspective projection from V onto n is
the transformation which maps any point P, distinct from V, onto the point
P which is the intersection of the line VP and the plane n, as illustrated in
Figure 4.6(a). If V is a point at inﬁnity then the projection is called a parallel
projection, as illustrated in Figure 4.6(b). The term “perspective projection”
is generally used to mean a projection which is not parallel.

P

ne
pla
iew
V
(a)

Figure 4.6

P

V

P

P

V
(at infinity)

ne
pla
ew
Vi
(b)

Perspective and parallel three-dimensional projections

Theorem 4.5
The projection with homogeneous viewpoint V and viewplane with plane vector
n is the three-dimensional transformation given by the matrix
M = nT V − (n · V)I4 ,
where I4 denotes the 4 × 4 identity matrix,
⎛

(−n2 v2
n1 v2
n1 v3
⎜ −n3 v3 − n4 v4 )
⎜
⎜
⎜
⎜
(−n1 v1
⎜
n2 v3
n2 v1
⎜
−n3 v3 − n4 v4 )
⎜
⎜
M=⎜
⎜
⎜
(−n1 v1
⎜
n3 v1
n3 v2
⎜
−n2 v2 − n4 v4 )
⎜
⎜
⎜
⎝
n4 v1
n4 v2
n4 v3

⎞
n1 v4

n2 v4

n3 v4
(−n1 v1
−n2 v2 − n3 v3 )

⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟.
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎠

4. Projections and the Viewing Pipeline

73

Proof
Let P be an arbitrary point to be projected (P = V). If n · P = 0, then P is a
point on the viewplane and its projected image is P. To verify that PM = P,
note that n · P = PnT = 0 (representing vectors by row matrices), and hence
PM = PnT V − P(n · V)I4 = −P(n · V)I4 .
Since −P(n · V)I4 is a multiple of P, PM are homogeneous coordinates of P,
that is, P = PM.
Suppose n · P = 0. Then every point on the line through P and V has
homogeneous coordinates of the form αP+βV for some α and β (Exercise 3.6).
The line intersects the viewplane when n · (αP + βV) = 0. Then α (n · P) +
β (n · V) = 0, giving α = −β (n · V) /(n · P) = 0. Substituting for α, the point
of intersection is found to have homogeneous coordinates
P = αP + βV = (−β (n · V) /(n · P) ) P + βV .
Multiplying the coordinates by the scalar (n · P) gives the alternative homogeneous coordinates
P = (n · P) V − (n · V) P .
Then, in matrix form,
P = PnT V − P (n · V) I4 = P nT V − (n · V)I4 .
Hence
M = nT V − (n · V)I4 .

Example 4.6
Consider a parallel projection of the prism shown in Figure 4.7 onto the plane
z = 0 in a direction parallel to the z-axis. The viewpoint is V (0, 0, 1, 0), the
point at inﬁnity in the direction of the z-axis, and the viewplane has the equation 0x + 0y + 1z + 0 = 0, so n = (0, 0, 1, 0). Thus
⎛ ⎞
⎛
⎞ ⎛
⎞
0
1 0 0 0
−1
0 0
0
⎜ 0 ⎟
⎜ 0 1 0 0 ⎟ ⎜ 0 −1 0
0 ⎟
⎟ ⎜
⎟ .
M = ⎜ ⎟ 0 0 1 0 −1⎜
⎝ 1 ⎠
⎝ 0 0 1 0 ⎠=⎝ 0
0 0
0 ⎠
0

0 0 0 1

0

0 0

−1

74

Applied Geometry for Computer Graphics and CAD

The prism has vertices A(0, 0, 0), B(2, 0, 0), C(2, 3, 0), D(0, 3, 0), E(1, 2, 1),
F(1, 1, 1). Applying the projection to the vertices of the prism gives
⎛
⎞
⎞
⎛
0 0 0 1
A
⎜ 2 0 0 1 ⎟ ⎛ −1 0 0 0 ⎞
⎜ B ⎟
⎜
⎟
⎟
⎜
⎜
⎟
⎟
⎜
⎜ 2 3 0 1 ⎟ ⎜ 0 −1 0 0 ⎟
⎜ C ⎟
⎟
⎟⎜
⎟ = ⎜
⎜
⎜ 0 3 0 1 ⎟⎝ 0
⎜ D ⎟
0 0 0 ⎠
⎜
⎟
⎟
⎜
⎝ 1 2 1 1 ⎠
⎝ E ⎠
0
0 0 −1
1 1 1 1
F
⎛
⎞
0
0 0 −1
⎜ −2
0 0 −1 ⎟
⎜
⎟
⎜
⎟
⎜ −2 −3 0 −1 ⎟
= ⎜
⎟ .
⎜ 0 −3 0 −1 ⎟
⎜
⎟
⎝ −1 −2 0 −1 ⎠
−1 −1 0 −1
Following the usual procedure of dividing each point by its fourth coordinate
yields the Cartesian coordinates A (0, 0, 0), B (2, 0, 0), C (2, 3, 0), D (0, 3, 0),
E (1, 2, 0), F (1, 1, 0). The image of the prism is shown in Figure 4.8(a).
1 z

0
1
2
x

1
2
3y

Figure 4.7

Prism of Example 4.6

Example 4.7
Consider a perspective projection onto the plane z = 0 from the viewpoint
(1, 5, 3). The viewpoint has homogeneous coordinates V (1, 5, 3, 1) and the viewplane vector is n = (0, 0, 1, 0). Thus
⎛ ⎞
⎛
⎞ ⎛
⎞
0
1 0 0 0
−3
0 0
0
⎜ 0 ⎟
⎜ 0 1 0 0 ⎟ ⎜ 0 −3 0
0 ⎟
⎟ ⎜
⎟ .
M = ⎜ ⎟ 1 5 3 1 −3⎜
⎝ 1 ⎠
⎝ 0 0 1 0 ⎠=⎝ 1
5 0
1 ⎠
0
0 0 0 1
0
0 0 −3

4. Projections and the Viewing Pipeline

75

Applying the projection to the
⎛
⎛
⎞
0
A
⎜ 2
⎜ B ⎟
⎜
⎜
⎟
⎜
⎜
⎟
⎜ 2
⎜ C ⎟
⎜
⎟ = ⎜
⎜ 0
⎜ D ⎟
⎜
⎜
⎟
⎝ 1
⎝ E ⎠
1
F
⎛
⎜
⎜
⎜
⎜
= ⎜
⎜
⎜
⎝

vertices of the prism of Example
⎞
0 0 1
⎛
0 0 1 ⎟
−3
0 0
0
⎟
⎟
3 0 1 ⎟ ⎜ 0 −3 0
0
⎟⎜
5 0
1
3 0 1 ⎟⎝ 1
⎟
0
0 0 −3
2 1 1 ⎠
1 1 1
⎞
0
0 0 −3
−6
0 0 −3 ⎟
⎟
⎟
−6 −9 0 −3 ⎟
⎟ .
0 −9 0 −3 ⎟
⎟
−2 −1 0 −2 ⎠
−2
2 0 −2

4.6 yields
⎞
⎟
⎟
⎠

The images have Cartesian coordinates A (0, 0, 0), B (2, 0, 0), C (2, 3, 0),
D (0, 3, 0), E (1, 0.5, 0), F (1, −1, 0). The image of the prism is shown in Figure 4.8(b).

1z

1z
-1

0
1
x 2

0
1

x

2

1

2
3

1
2
3 y

Figure 4.8
Images of the prism after the application of (a) the parallel
projection of Example 4.6, and (b) the perspective projection of Example 4.7

EXERCISES
Determine the projection matrix M for the following.
4.6. Perspective projection onto the viewplane −x + 3y + 2z − 4 = 0 from
the viewpoint (2, −1, 1).

76

Applied Geometry for Computer Graphics and CAD

4.7. Perspective projection onto the viewplane 5x − 3z + 2 = 0 from the
viewpoint (1, 4, −1).
4.8. Parallel projection onto the viewplane 2y+3z+4 = 0 in the direction
of the vector (1, −2, 3).
4.9. Parallel projection onto the viewplane 7x−8y+5 = 0 in the direction
of the vector (0, 4, 9).
4.10. Let a tetrahedron have vertices A(0, 0, 0), B(1, 0, 0), C(0, 1, 0), and
D(1, 1, 1). Apply each of the projections of Exercises 4.6–4.9 to the
tetrahedron.
4.11. Implement the three-dimensional projection procedure with the following speciﬁcation. A viewpoint and viewplane are input by the
user, and the computed projection matrix is obtained as output. In
addition, the projected images of a number of input data points are
determined. Computer algebra packages have a procedure for multiplying matrices; but, if you are writing a computer program, then
you will need to devise your own algorithm to do this.

4.4 The Viewplane Coordinate Mapping
In the previous section three-dimensional projections were applied to give a
planar representation of a view of an object. At this stage of the viewing process
the view of the object is expressed in homogeneous three-dimensional world
coordinates. The next stage is to deﬁne a two-dimensional viewplane coordinate
system on the viewplane, and to represent the object view in terms of these
coordinates. The viewing pipeline will be completed by specifying a rectangular
viewplane window which identiﬁes the region of the viewplane to be viewed.
The viewplane window is mapped onto a rectangular device or viewport window
of the display device. Any part of the view lying inside the viewplane window
is mapped to the device window and displayed, but any part of the view lying
outside the rectangle is clipped , and does not appear as part of the displayed
image.
The viewplane (X, Y )-coordinate system is speciﬁed in terms of the world
coordinate system by an origin O(q1 , q2 , q3 ), and two unit vectors r = (r1 , r2 , r3 )
and s = (s1 , s2 , s3 ) which indicate the directions of the X- and Y -axes, respectively. Consider a point on the viewplane with homogeneous world coordinates
P (x, y, z, w), and homogeneous viewplane coordinates P (X, Y, W ). The aim
is to obtain P from P by a mapping of the form P = P · VC, where VC is
a 4 × 3 matrix. Rather than compute VC directly, the strategy is to determine

4. Projections and the Viewing Pipeline

77

a 3 × 4 matrix K such that P K = P , and then to express VC is terms of K.
The reason for this is that K has a simple derivation.
The matrix K can be determined if the homogeneous world coordinates,
and corresponding viewplane coordinates, of four points on the viewplane are
known. Consider the following four points (expressed in homogeneous world
coordinates):
(1) the origin O(q1 , q2 , q3 , 1),
(2) the point at inﬁnity R(r1 , r2 , r3 , 0) in the direction of the X-axis,
(3) the point at inﬁnity S(s1 , s2 , s3 , 0) in the direction of the Y -axis, and
(4) the point T(t1 , t2 , t3 , 1) = (q1 + r1 + s1 , q2 + r2 + s2 , q3 + r3 + s3 , 1) which is
one unit in the X-direction and one unit in the Y -direction from the origin.
The homogeneous viewplane coordinates of the four points are (0, 0, 1), (1, 0, 0),
(0, 1, 0), and (1, 1, 1) respectively. Then
⎞
⎞ ⎛
⎞ ⎛
⎛
⎛
⎞
q1 q2 q3 1
0 0 1
O
r1 r2 r3 0
⎜ R ⎟ ⎜ r1 r2 r3 0 ⎟ ⎜ 1 0 0 ⎟
⎟ ⎝ s1 s2 s3 0 ⎠ ,
⎟ ⎜
⎟ ⎜
⎜
⎝ S ⎠ = ⎝ s1 s2 s3 0 ⎠ = ⎝ 0 1 0 ⎠
q1 q2 q3 1
1 1 1
T
t1 t2 t3 1
and so corresponding points are correctly mapped to each other. Hence the
required matrix is
⎛
⎞
r1 r2 r3 0
K = ⎝ s1 s2 s3 0 ⎠ .
(4.1)
q1 q 2 q 3 1
The viewplane coordinate mapping is an inverse of the mapping determined
by the matrix K. Since K is not a square matrix there is no matrix inverse K−1 ,
but there is a right inverse, a 4 × 3 matrix denoted KR , for which KKR = I3 .
Since KKT (KKT )−1 = I3 , a right inverse of K is KR = KT (KKT )−1 . Further,
since P = P K it follows that
P KR

= P KT (KKT )−1 = (P K) KT (KKT )−1
= P

KKT (KKT )−1 = P .

Hence the viewplane coordinate mapping P = P VC is given by the matrix
VC = KR = KT (KKT )−1 .
Observe that the viewplane coordinate matrix VC does not depend on a
particular projection but is determined by the choice of origin and the directions
of the X- and Y -axes. Thus VC can be applied to any view of an object.

78

Applied Geometry for Computer Graphics and CAD

Example 4.8
Consider the perspective projection of the prism onto the plane z = 0 from
the viewpoint V(1, 5, 3) determined in Example 4.7. Let a coordinate system
on the viewplane be given by origin O(1, 2, 0), X-axis direction (3, 4, 0), and
Y -axis direction (−4, 3, 0). Then the unit vectors in the directions of the axes
are r =(3/5, 4/5, 0) and s =(−4/5, 3/5, 0). The viewplane coordinate matrix
VC = KT (KKT )−1 is obtained in several steps:
⎛
⎞
⎛
⎞
3/5 −4/5 1
3/5 4/5 0 0
⎜ 4/5
3/5 2 ⎟
⎟
KKT = ⎝ −4/5 3/5 0 0 ⎠ ⎜
⎝
0
0 0 ⎠
1
2 0 1
0
0 1
⎛
⎞
1
0 11/5
= ⎝ 0
1
2/5 ⎠ ,
11/5 2/5
6
⎛
⎞
146/25 22/25 −11/5
(KKT )−1 = ⎝ 22/25 29/25
−2/5 ⎠ ,
−11/5 −2/5
1
⎛
⎞
⎛
⎞
3/5 −4/5 1
146/25 22/25 −11/5
⎜ 4/5
⎟
3/5 2 ⎟ ⎝
VC = ⎜
22/25 29/25
−2/5 ⎠
⎝
0
0 0 ⎠
−11/5 −2/5
1
0
0 1
⎛
⎞
3/5 −4/5 0
⎜
4/5
3/5 0 ⎟
⎟ .
= ⎜
⎝
0
0 0 ⎠
−11/5 −2/5 1
The homogeneous viewplane coordinates of the prism vertices are determined
by applying VC to the projected vertices obtained in Example 4.7:
⎛
⎞
⎞
⎛
0
0 0 −3
A
⎛
⎞
⎜ −6
⎜ B ⎟
0 0 −3 ⎟
3/5 −4/5 0
⎜
⎟
⎟
⎜
⎜
⎟
⎟
⎜
4/5
3/5 0 ⎟
⎜ −6 −9 0 −3 ⎟ ⎜
⎜ C ⎟
⎟
⎟⎜
⎟ = ⎜
⎜
⎝
⎜ 0 −9 0 −3 ⎟
⎜ D ⎟
0
0 0 ⎠
⎜
⎟
⎟
⎜
⎝ −2 −1 0 −2 ⎠
⎝ E ⎠
−11/5 −2/5 1
−2
2 0 −2
F

4. Projections and the Viewing Pipeline

⎛
⎜
⎜
⎜
⎜
= ⎜
⎜
⎜
⎝

33/5
3
−21/5
−3/5
12/5
24/5

79

−3
−3
−3
−3
−2
−2

6/5
6
3/5
−21/5
9/5
18/5

⎞
⎟
⎟
⎟
⎟
⎟ .
⎟
⎟
⎠

Hence, the Cartesian viewplane coordinates of the vertices are A (−11/5, −2/5),
B (−1, −2), C (7/5, −1/5), D (1/5, 7/5), E (−6/5, −9/10), F (−12/5, −9/5).
The projected prism in viewplane coordinates is illustrated in Figure 4.9.
Y
1
X
-2

-1

0

1

-1

-2

Figure 4.9

Projected prism of Example 4.8 in viewplane coordinates

EXERCISES
4.12. Consider the perspective projection of the prism onto the z = 0
plane from the viewpoint V(1, 5, 3) determined in Example 4.7. Let a
coordinate system on the viewplane be given by origin O(4, 3, 0), Xaxis direction (12, 5, 0), and Y -axis direction (−5, 12, 0). Determine
the viewplane coordinate matrix VC. (Remember r and s must be
unit vectors.) Apply VC to the vertices of the prism and make a
sketch of the image.
4.13. Consider the projection of the tetrahedron with vertices (0, 1, 0),
(3, 1, 1), (−1, −1, 1), (0, −2, −1) onto the viewplane 5x − 3z + 2 = 0
from the viewpoint (1, 4, −1) determined in Exercises 4.7 and 4.10.
Let a viewplane coordinate system be deﬁned by origin O(−1, 1, 1),
X-axis direction (3, 0, 5), and Y -axis direction (0, −1, 0). Determine
the viewplane coordinate matrix VC. Apply the matrix to the vertices
of the projected tetrahedron, and make a sketch of the image.
4.14. Implement the viewplane coordinate mapping using a computer
package, or by writing a computer program, with the following spec-

80

Applied Geometry for Computer Graphics and CAD

iﬁcation. The viewplane vector, origin and axes directions are given
as input. The following checks on the input are carried out: that the
origin is a point on the plane, that the axes directions are perpendicular, and that the axes directions are perpendicular to the plane vector. The matrix VC is determined and applied to input data points,
or concatenated with a projection matrix. Most computer algebra
packages have a procedure for determining matrix inverses. A subroutine to obtain a 3 × 3 matrix inverse is available on the book
website (see the Preface to the Second Edition).

4.5 The Viewing Pipeline
So far two stages of the viewing pipeline have been considered in detail. First,
the projection onto a viewplane P = PM derived in Section 4.3, and second,
the viewplane coordinate mapping P = P VC derived in Section 4.4. The
ﬁnal stage to be considered is the device coordinate transformation P =
P DC which was introduced in Section 2.6.2. The concatenation of these three
transformations yields the viewing pipeline which has the form P = PVP
where VP = M · VC · DC.

V
Y

(Xmax,Ymax)
(Umax,Vmax)

X

(Umin,Vmin)

U

(Xmin,Ymin)

Device coordinate
transformation
Figure 4.10

Referring to Figure 4.10, the region of the viewplane to be displayed is
speciﬁed by a rectangular viewplane window with lower left corner (Xmin , Ymin )
and upper right corner (Xmax , Ymax ). This window is mapped to a rectangular
region in the device coordinate system (called the device or viewport window)
with lower left corner (Umin , Vmin ) and upper right corner (Umax , Vmax ). The
device coordinate transformation which maps the viewplane window with local

4. Projections and the Viewing Pipeline

81

coordinates (X, Y, Z) to homogeneous device coordinates (U, V, W ) is obtained
by a concatenation of planar transformations: a translation taking the lower
left corner of the viewplane window to the origin, followed by a scaling about
the origin (so that the translated viewplane window has the same size as the
device window), followed by a translation mapping the origin to the lower left
corner of the device window. The required device coordinate transformation is
DC

U
max
min
= T(−Xmin , −Ymin ) · S Xmax −Umin , Vmax −Vmin · T(Umin , Vmin )
−Y
max −Xmin Y
⎛
⎞
⎛
⎞
Umax −Umin
0
0
1
0
0
Xmax −Xmin
⎜
⎟
Vmax −Vmin
= ⎝
0 ⎠
0
0
1
0 ⎠⎝
Ymax −Ymin
−Xmin −Ymin 1
0
0
1
⎞
⎛
1
0
0
×⎝ 0
1
0 ⎠ .
Umin Vmin 1

⎛

Thus

⎜
⎜
⎜
DC = ⎜
⎜
⎝

Umax −Umin
Xmax −Xmin

0

0

Vmax −Vmin
Ymax −Ymin

Xmax Umin −Xmin Umax
Xmax −Xmin

Ymax Vmin −Ymin Vmax
Ymax −Ymin

0

⎞

⎟
⎟
⎟
0 ⎟ .
⎟
⎠
1

The matrix DC is most easily remembered by recalling the transformations
which deﬁne it.

Example 4.9
Consider the projected prism of Example 4.8. Let a viewplane window be
given by lower left corner (Xmin , Ymin ) = (−3, −3) and upper right corner
(Xmax , Ymax ) = (3, 2). Suppose that the device is a computer screen with a resolution of 1280×1024 pixels, and that the origin of the device coordinate system
is the lower left corner of the screen. Let the device window have lower left corner (Umin , Vmin ) = (500, 400) and upper right corner (Umax , Vmax ) = (980, 700).
The device coordinate transformation matrix is
⎞⎛
⎛
⎞ ⎛ 980−500
⎞
0
0
1 0 0
1
0 0
3−(−3)
⎟
⎜
700−400
DC = ⎝ 0 1 0 ⎠ ⎝
0
0 ⎠⎝ 0
1 0 ⎠
2−(−3)
3 3 1
500 400 1
0
0
1
⎛
⎞
80
0 0
= ⎝ 0
60 0 ⎠ .
740 580 1

82

Applied Geometry for Computer Graphics and CAD

To map the projected prism to the screen, the matrix DC is applied to the
homogeneous viewplane coordinates of the vertices given in Example 4.8:
⎞
⎛
⎛
⎞
33/5
6/5 −3
A
⎜
⎜ B ⎟
⎞
3
6 −3 ⎟ ⎛
⎟
⎜
⎜
⎟
80
0 0
⎟
⎜
⎜
⎟
3/5 −3 ⎟ ⎝
⎜ −21/5
⎜ C ⎟
0
60 0 ⎠
⎟
⎜
⎟ DC = ⎜
⎜ −3/5 −21/5 −3 ⎟
⎜ D ⎟
⎟
⎜
⎜
⎟
740 580 1
⎝ 12/5
⎝ E ⎠
9/5 −2 ⎠
24/5
18/5 −2
F
⎞
⎛
−1692 −1668 −3
⎜ −1980 −1380 −3 ⎟
⎟
⎜
⎟
⎜
⎜ −2556 −1704 −3 ⎟
= ⎜
⎟ .
⎜ −2268 −1992 −3 ⎟
⎟
⎜
⎝ −1288 −1052 −2 ⎠
−1096 −944 −2
The vertices in Cartesian device coordinates are (564, 556), (660, 460), (852, 568),
(756, 664), (644, 526), (548, 472). The reader is left the exercise of sketching the
screen and the device window containing the ﬁnal image of the prism.

Remark 4.10
During the viewing pipeline, it is unnecessary to convert computed coordinates
from homogeneous to Cartesian until after all three matrices M, VC, DC have
been applied. It is generally most eﬃcient to compute the viewing pipeline
matrix VP and then to apply VP to the coordinates of points on the object.
This is demonstrated in the following example.

Example 4.11
A viewing pipeline is speciﬁed (in world coordinates) by: viewpoint (3, 3, 10),
viewplane 3x − y + 2z + 2 = 0, viewplane origin O(−1, 1, 1), X-axis direction
(1, 1, −1), Y -axis direction (−1, 5, 4), viewplane window with lower left corner
(−4, −10), and upper right corner (4, −2), device viewport with lower left corner
(0, 200), and upper right corner (200, 400). The viewing pipeline matrix VP =
M · VC · DC is computed as follows. The homogeneous viewpoint is V(3, 3, 10, 1)

4. Projections and the Viewing Pipeline

83

and the viewplane vector is n = (3, −1, 2, 2). Hence the projection
⎛
⎞
⎛
3
1 0 0 0
⎜ −1 ⎟
⎜ 0 1 0 0
⎟
⎜
M = ⎜
⎝ 2 ⎠ 3 3 10 1 − (28) ⎝ 0 0 1 0
⎛
⎜
= ⎜
⎝

2
−19
9
−3 −31
6
6
6
6

30
−10
−8
20

⎞

matrix is
⎞
⎟
⎟
⎠

0 0 0 1

3
−1 ⎟
⎟ .
2 ⎠
−26

√
√
√
−1/ 3 √ and
,
The unit vector in the direction of the X-axis is r = 1/ 3, 1/ 3, √
√
the unit vector in the direction of the Y -axis is s = −1/ 42, 5/ 42, 4/ 42 .
Hence
√
√
√
⎞
⎛
1/ 3 −1/ 3 0
1/ √3
√
√
K = ⎝ −1/ 42 5/ 42 4/ 42 0 ⎠
−1
1
1
1
⎛
⎞
0.577 0.577 −0.577
0
= ⎝ −0.154 0.772
0.617
0 ⎠ ,
−1.0
1.0
1.0 1.0
⎛
⎞−1
1.0
0.0 −0.577
−1
= ⎝
KKT
0.0
1.0
1.543 ⎠
⎛

−0.577

1.259
= ⎝ −0.693
0.449

1.543
−0.693
2.852
−1.200

4.0

⎞
0.449
−1.200 ⎠ .
0.778

The formula VC = KT (KKT )−1 gives the viewplane coordinate matrix
⎛
⎞
0.385
0.360 −0.333
⎜ 0.642
0.600
0.111 ⎟
⎟ .
VC = ⎜
⎝ −0.706
0.960 −0.222 ⎠
0.449 −1.200
0.778
The device coordinate matrix is
⎛
⎞⎛
⎞⎛
1 0 0
25 0 0
1
0
DC = ⎝ 0 1 0 ⎠ ⎝ 0 25 0 ⎠ ⎝ 0
1
4 10 1
0 0 1
0 200

⎞ ⎛
0
25
0 ⎠=⎝ 0
1
100

⎞
0 0
25 0 ⎠ .
450 1

84

Applied Geometry for Computer Graphics and CAD

Hence

⎛

−234.050
⎜ −460.844
VP = M · VC · DC = ⎜
⎝
517.543
−3090.752

1944.067
−1152.079
792.000
−10295.85

⎞
3.000
−1.000 ⎟
⎟ .
2.000 ⎠
−26.000

Applying the viewing pipeline matrix VP to the vertices of the prism yields
⎞
⎛
⎛
⎞
−687.642
288.286
−5.000
3 0 6 1
⎜ −2091.941
⎜ 9 0 6 1 ⎟
11952.69
13.000 ⎟
⎟
⎜
⎜
⎟
⎟
⎜
⎜
⎟
5040.214
7.000 ⎟
⎜ −4857.002
⎜ 9 6 6 1 ⎟
⎟ .
⎜
⎟ VP = ⎜
⎜ −3452.703 −6624.188 −11.000 ⎟
⎜ 3 6 6 1 ⎟
⎟
⎜
⎜
⎟
⎝ −2602.223
⎝ 6 6 9 1 ⎠
1583.98
4.000 ⎠
162.838
8496.454
10.000
6 0 9 1
The Cartesian coordinates are
A (137.528, −57.657) , B (−160.919, 919.438) , C (−693.857, 720.031) ,
D (313.8821, 602.1989) , E (−650.556, 395.995) , F (16.284, 849.645) .

EXERCISES
4.15. A viewing pipeline is speciﬁed by: viewpoint (2, 3, 8), viewplane
z+4 = 0, viewplane origin O(−2, 1, −4), X-axis direction (1, 1, 0), Y axis direction (−1, 1, 0), viewplane window corners (−1, −7), (4, −2),
device viewport corners (400, 300), (800, 700). Determine the viewing
pipeline matrix VP. A tetrahedron has vertices A(1, 0, 1), B(3, 0, 1),
C(2, 2, 1), D(2, 1, 2). Apply VP to the tetrahedron, and sketch the
projected image and the device window.
4.16. A viewing pipeline is speciﬁed by: viewpoint (7, 0, 1), viewplane
x − y = 1, viewplane origin O(2, 1, 1), X-axis direction (1, 1, 0), Y axis direction (0, 0, 1), viewplane window corners lower left (−2, −3),
upper right (6, 6), device corners lower left (50, 50), upper right
(250, 150). Determine the viewing pipeline matrix VP. A tetrahedron has vertices A(2, 0, 1), B(2, −1, 4), C(4, 4, 3), D(1, 0, 4). Apply
VP to the tetrahedron, and sketch the projected image and the device window.
4.17. A viewing pipeline is speciﬁed by: viewpoint (6, 2, 0), viewplane
2x − 4y + 4 = 0, viewplane origin O(−2, 0, 1), X-axis direction
(2, 1, 0), Y -axis direction (0, 0, 1), viewplane window corners lower
left (−20, −15), upper right (20, 15), device corners lower left (50, 50),
upper right (150, 200). Determine the viewing pipeline matrix VP.

4. Projections and the Viewing Pipeline

85

4.6 Classiﬁcation of Projections
So far two types of projection, parallel and perspective, have been discussed.
In the following sections further distinctions of these types are made according
to how the viewpoint and viewplane are located with respect to the world
coordinate axes. The directions of the world coordinate axes are called the
principal directions.
Consider a line segment in space projected onto a viewplane. In general,
it is expected that its image will be a line segment of a diﬀerent length. The
foreshortening ratio in the direction of that line is deﬁned to be
length of projected segment
.
length of original segment

Example 4.12
Consider the line segment PQ given by points P(0, 1, 1) and Q(2, 1, 3). The
images of the points following a parallel projection onto the plane z = 0 in the
direction of the negative z-axis are computed to be
P
Q

=

P
Q

M
⎛

=

0 1 0 1
2 1 3 1

1
⎜ 0
⎜
⎝ 0
0

=

0 1 0 1
2 1 0 1

0
1
0
0

0
0
0
0

⎞
0
0 ⎟
⎟
0 ⎠
1

.

In Cartesian coordinates, √ images are P (0, 1, 0) and Q (2, 1, 0). The distance
the
√
distance from P to Q is 2. Thus the
from P to Q is 8 = 2 2, and the √
√
2.
foreshortening ratio is 2 2 2 = 1

Exercise 4.18
Show that for any projection, line segments with the same direction are
foreshortened by an equal amount.

4.6.1 Classiﬁcation of Parallel Projections
Three types of parallel projection are distinguished, namely, orthographic, axonometric, and oblique.

86

Applied Geometry for Computer Graphics and CAD

Orthographic Projection
An orthographic projection is a parallel projection for which the direction of
the projection is perpendicular to the viewplane. Thus if the viewplane vector
is n = (n1 , n2 , n3 , n4 ) then the centre of projection is V (−n1 , −n2 , −n3 , 0).
Then
⎛
⎞
⎛
⎞
n1
1 0 0 0
⎜ n ⎟
⎜ 0 1 0 0 ⎟
⎟
M = ⎜ 2 ⎟ −n1 −n2 −n3 0 + n2 + n2 + n2 ⎜
1
2
3 ⎝
⎝ n3 ⎠
0 0 1 0 ⎠
⎛

n4
n2
2

n2
3

+
⎜ −n1 n2
= ⎜
⎝ −n1 n3
−n4 n1

−n1 n2
n2 + n2
1
3
−n2 n3
−n4 n2

−n1 n3
−n2 n3
n2 + n2
1
2
−n4 n3

⎞

0
⎟
0
⎟ .
⎠
0
2
2
2
n1 + n2 + n3

0 0 0 1

(4.2)

For instance, the projection matrix for an orthographic projection onto the
plane z = 0 (for which n = (0, 0, 1, 0) and V (0, 0, 1, 0)) is
⎛
⎞
1 0 0 0
⎜ 0 1 0 0 ⎟
⎟
M=⎜
⎝ 0 0 0 0 ⎠ .
0

0

0

1

An orthographic projection can show the true dimensions and shape of a single
planar face of an object. They are commonly used in engineering and architectural drawings and occur as “front, side, and planar elevations”.

Exercise 4.19
Suppose n is chosen so that n2 + n2 + n2 = 1. Then the direction cosines
1
2
3
of n with respect to the world coordinate system are n1 , n2 , and n3 .
Show that an orthographic projection (4.2) yields foreshortening ratios in
1/2
1/2
1/2
, n2 + n2
, and n2 + n2
.
the principal directions of n2 + n2
2
3
1
3
1
2
Deduce that two foreshortening ratios are equal if and only if the absolute
values of two direction cosines of n are equal.
Axonometric Projection
Axonometric projections are orthographic projections which attempt to portray the general three-dimensional shape of an object. There are three types of
axonometric projection, namely, trimetric, dimetric, and isometric. These are
distinguished by whether none, two, or all three of the foreshortening ratios
in the principal directions are equal. Exercise 4.19 implies that this distinction
is equivalent to none, two, or all three of the direction cosines of the parallel
projection direction vector being equal.

4. Projections and the Viewing Pipeline

87

1. A trimetric projection is obtained when |n1 |, |n2 |, and |n3 | are all diﬀerent.
Then the foreshortening ratios in the principal directions are all diﬀerent.
If measurements are taken from a trimetic projection of an object, then it
is necessary to apply a scale factor in each of the principal directions in
order to read oﬀ the correct dimensions of the object.
2. A dimetric projection is obtained when just one of |n1 | = |n2 |, |n2 | =
|n3 |, or |n1 | = |n3 | is true. Measurements along two of the three principal
directions may be performed using a single scale factor, but a diﬀerent scale
factor is required in the third direction.
3. An isometric projection is obtained when |n1 | = |n2 | = |n3 |. Since all three
foreshortening factors are equal, an isometric projection scales the object
equally in all three principal directions.

Example 4.13
The eﬀect of the various parallel projections on the unit cube with vertices
(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (1, 0, 1), (1, 1, 1), (0, 1, 1) are shown
in Figures 4.11 and 4.12. The foreshortening factors in the x-, y-, and zdirections are denoted f1 , f2 , and f3 respectively.

1

1

0
0

–1
–1

0

0

0
1

11

0

(a)

(b)
√
√
√
3
3 ,0 ,
Figure 4.11 √ (a) Isometric projection with n = 1
3 ,1 √,1
and
f1 = f2 = f3 = 6/3,√ (b) dimetric projection with n = 1/3, 7/3, 1/3, 0 ,
√
f1 = f3 = 2 2, f2 = 2/3
3

Oblique Projection
An oblique projection is a parallel projection for which the direction of the
projection is not perpendicular to the viewplane. In general, oblique projections

88

Applied Geometry for Computer Graphics and CAD

1

0
0

0

Figure 4.12
Trimetric projection with n =
0.816, f2 = 0.589, f3 = 0.993

1
3

√ 7√ 1√
3, 15 3, 15 3 , f1 =

give an impression of the depth of an object. The foreshortening ratio of line
segments parallel to the viewplane is 1.
When the view direction (v1 , v2 , v3 ) makes an angle of π/4 with the viewplane, a cavalier projection is obtained. This projection angle causes line segments perpendicular to the viewplane to have foreshortening ratio 1. The result
is that an object with planar faces perpendicular to, or parallel to, the viewplane appears thicker than in reality. The angle θ between (v1 , v2 , v3 ) and the
viewplane normal (n1 , n2 , n3 ) satisﬁes
(v1 , v2 , v3 ) · (n1 , n2 , n3 ) = |(v1 , v2 , v3 )| |(n1 , n2 , n3 )| cos θ .
Thus a cavalier projection (θ = π/4) satisﬁes the identity
√
2
2
2
2
v1 + v2 + v3 n2 + n2 + n2 .
v1 n1 + v2 n2 + v3 n3 = ±
1
2
3
2

(4.3)

Example 4.14
Consider the cavalier projections onto the z = 0 plane. Then n = (0, 0, 1, 0)
2
2
2
and identity (4.3) simpliﬁes to v3 = v1 + v2 . A suitable view direction would
be (3, 4, 5) giving the projection matrix
⎛ ⎞
⎛
⎞ ⎛
⎞
0
1 0 0 0
−5
0 0
0
⎜ 0 ⎟
⎜ 0 1 0 0 ⎟ ⎜ 0 −5 0
0 ⎟
⎟ ⎜
⎟ .
M = ⎜ ⎟ 3 4 5 0 −5⎜
⎝ 1 ⎠
⎝ 0 0 1 0 ⎠=⎝ 3
4 0
0 ⎠
0
0 0 0 1
0
0 0 −5
Applying M to the line segment, perpendicular to the viewplane, joining the
origin to the point (0, 0, 10), gives the segment joining the origin to the point
(−6, −8, 0). The project line segment has length (−6)2 + (−8)2 = 10. Thus
the foreshortening ratio is 1 as expected. The projection of the unit cube is
illustrated in Figure 4.13(a).

4. Projections and the Viewing Pipeline

Figure 4.13

(a) Cavalier projection

89

(b) Cabinet projection

A cabinet projection overcomes the “thickness” problem of a cavalier projection. The foreshortening factor for faces of the object perpendicular to the
plane of projection is chosen to be 1 . This is achieved when the projection direc2
tion makes an angle of φ = arccot(1/2) (approximately 1.107 radians) √
with the
√
5 and cos(φ) = 1
5 . The
viewplane. If φ = arccot(1/2), then sin(φ) = 2
angle between the viewplane normal and the projection direction is θ = π − φ
2
√
5 and, therefore, a
or θ = π + φ. Thus cos θ = cos( π ∓ φ) = ± sin φ = ±2
2
2
cabinet projection satisﬁes the identity
2
2
2
2
v1 + v2 + v3 n2 + n2 + n2 .
(4.4)
v1 n1 + v2 n2 + v3 n3 = ± √
1
2
3
5

Example 4.15
Consider the cabinet projections onto the z = 0 plane. Then n = (0, 0, 1, 0) and
2
2
2
condition (4.4) simpliﬁes to v3 = 4 v1 + v2 . A suitable view direction would
be (3, 4, 10). The projection matrix is
⎛ ⎞
⎛
⎞
0
1 0 0 0
⎜ 0 ⎟
⎜ 0 1 0 0 ⎟
⎟
M = ⎜ ⎟ 3 4 10 0 − 10 ⎜
⎝ 1 ⎠
⎝ 0 0 1 0 ⎠
0
0 0 0 1
⎛
⎞
−10
0
0
0
⎜ 0
−10 0
0 ⎟
⎟ .
= ⎜
⎝ 3
4
0
0 ⎠
0

0

0 −10

Applying M to the line segment, perpendicular to the viewplane, joining the
origin to the point (0, 0, 10), gives the segment joining the origin to the point
(−3, −4, 0). The project line segment has length (−3)2 + (−4)2 = 5. Thus
the foreshortening ratio is 1/2 as was expected. The projection of the unit cube
is illustrated in Figure 4.13(b).

90

Applied Geometry for Computer Graphics and CAD

4.6.2 Classiﬁcation of Perspective Projections
A perspective projection has the eﬀect that the projected images of parallel
lines in world coordinate space may be intersecting lines in the viewplane.

Theorem 4.16
1. Parallel projections map parallel lines in world coordinate space to parallel
lines in the viewplane.
2. Perspective projections map parallel lines in world coordinate space to parallel lines in the viewplane if and only if the lines are parallel to the viewplane.
3. A projection which maps points at inﬁnity in 3 or more linearly independent
directions to points at inﬁnity is a parallel projection.

Proof
Parallel lines in the direction (x, y, z) project to parallel lines in the viewplane
if and only if the point at inﬁnity P(x, y, z, 0) projects to a point at inﬁnity in
the viewplane. Let the projection matrix be the 4 × 4 matrix M = (mij ) given
in Theorem 4.5. Then P = (x y z 0)M = (xm11 + ym21 + zm31 , xm12 + ym22 +
zm32 , xm13 + ym23 + zm33 , xm14 + ym24 + zm34 ). Referring to Theorem 4.5,
m14 = v4 n1 , m24 = v4 n2 , and m34 = v4 n3 . Thus P is inﬁnite if and only if
v4 (n1 x + n2 y + n3 z) = 0.
1. If the projection is parallel, then v4 = 0, and hence P is inﬁnite. Thus
parallel projections map parallel lines in world coordinate space to parallel
lines in the viewplane.
2. If the projection is perspective, then v4 = 0. Hence P is inﬁnite if and only
if n1 x + n2 y + n3 z = (n1 , n2 , n3 ) · (x, y, z) = 0 which is true if and only if
the lines with direction (x, y, z) are perpendicular to the viewplane vector,
that is, parallel to the viewplane.
3. Consider three linearly independent directions (xi , yi , zi ), i = 1, 2, 3. Suppose the points at inﬁnity in these directions map to points at inﬁnity in
the viewplane. Then v4 (n1 x + n2 y + n3 z) = 0 for i = 1, 2, 3. If v4 = 0
then n1 xi + n2 yi + n3 zi = 0 for i = 1, 2, 3, and since the vectors (xi , yi , zi )
are independent this implies (n1 , n2 , n3 ) = (0, 0, 0) which is impossible. So
v4 = 0 which implies the projection is parallel.

4. Projections and the Viewing Pipeline

91

Corollary 4.17
Suppose (xi , yi , zi ), i = 1, 2, 3, are a set of mutually perpendicular vectors.
Then the viewplane vector (n1 , n2 , n3 ) of a perspective projection can be perpendicular to
1. (three-point perspective) none of the vectors. Then the family of parallel lines in each of the directions (xi , yi , zi ) maps to a family of non-parallel
lines.
2. (two-point perspective) one of the vectors (x1 , y1 , z1 ). Then the family
of lines in the direction of (x1 , y1 , z1 ) maps to a family of parallel lines, but
the families of parallel lines with directions (x2 , y2 , z2 ) and (x3 , y3 , z3 ) map
to families of non-parallel lines.
3. (one-point perspective) two of the vectors (x1 , y1 , z1 ) and (x2 , y2 , z2 ).
Then the families of parallel lines with directions (x1 , y1 , z1 ) and (x2 , y2 , z2 )
map to families of parallel lines, but the family parallel to (x3 , y3 , z3 ) maps
to a family of non-parallel lines.

Proof
By Theorem 4.16, all parallel lines in the direction of a vector perpendicular to
the viewplane normal (that is, parallel to the viewplane) map to parallel lines
in the viewplane. Conversely, for a perspective projection, parallel lines which
are not perpendicular to the viewplane normal do not map to parallel lines in
the viewplane. Thus the number of independent vectors perpendicular to the
viewplane normal determines the three cases.

If a perspective projection maps an inﬁnite point (x, y, z, 0) to a ﬁnite point
(x , y , z , 1) in the viewplane, then lines in the direction (x, y, z) in world coordinate space appear as lines converging to the point (x , y , z ) in the (Cartesian)
viewplane. The point (x , y , z ) is called the vanishing point for the direction
(x, y, z). Corollary 4.17 is generally applied to the principal directions to give:
1. One-point perspective projection. Parallel lines in one principal direction
have a vanishing point.
2. Two-point perspective projection. Parallel lines in each of two principal
directions have vanishing points.
3. Three-point perspective projection. Parallel lines in each of the three principal directions have vanishing points.

92

Applied Geometry for Computer Graphics and CAD

Example 4.18
Consider the one-point perspective projection onto the z = 0
viewpoint (−1, 0, 2). Then n = (0, 0, 1, 0) and V(−1, 0, 2, 1).
matrix is
⎛ ⎞
⎛
0
1 0 0
⎜ 0 ⎟
⎜ 0 1 0
M = ⎜ ⎟ −1 0 2 1 − (2) ⎜
⎝ 1 ⎠
⎝ 0 0 1
0
0 0 0
⎛
⎞
−2
0 0
0
⎜ 0 −2 0
0 ⎟
⎟ .
= ⎜
⎝ −1
0 0
1 ⎠
0
0 0 −2

plane from the
The projection
⎞
0
0 ⎟
⎟
0 ⎠
1

The eﬀect of the projection on the unit cube is shown in Figure 4.14. The
position of the viewpoint is indicated by a small circle.

2
1.5
1
0.5
0

V

-1

1
2
3

2

(a) One-point perspective projection

(b) Vanishing point

Figure 4.14

Example 4.19
Consider the two-point perspective projection onto the x−z = 0 plane from the
viewpoint (−1, 0, 2). Then n = (1, 0, −1, 0) and V(−1, 0, 2, 1). The projection

4. Projections and the Viewing Pipeline

matrix is

M

⎞
1
⎜ 0 ⎟
⎟
= ⎜
⎝ −3 ⎠
0
⎛
6 0
⎜ 0 7
= ⎜
⎝ 3 0
0 0

93

⎛

⎛

−1

0

2

1

⎞
2 1
0 0 ⎟
⎟ .
1 −3 ⎠
0 7

1
⎜ 0
− (−7) ⎜
⎝ 0
0

0
1
0
0

0
0
1
0

⎞
0
0 ⎟
⎟
0 ⎠
1

The eﬀect on the unit cube is shown in Figure 4.15.

V

2
1.5
1
0.5

-1

0
1

1

(a) Two-point perspective projection

(b) Vanishing points

Figure 4.15

Example 4.20
Consider the three-point perspective projection onto the x + 2y − z − 3 = 0
plane from the viewpoint (−1, 0, 2). Then n = (1, 2, −1, −3) and V(−1, 0, 2, 1).
The projection matrix is
⎛
⎛
⎞
⎞
1
1 0 0 0
⎜ 2 ⎟
⎜ 0 1 0 0 ⎟
⎜
⎟
⎟
M = ⎜
⎝ −1 ⎠ −1 0 2 1 − (−6) ⎝ 0 0 1 0 ⎠
⎛

−3

5 0
2
⎜ −2 6
4
= ⎜
⎝ 1 0
4
3 0 −6

⎞

1
2 ⎟
⎟ .
−1 ⎠
3

The eﬀect on the unit cube is shown in Figure 4.16.

0 0 0 1

94

Applied Geometry for Computer Graphics and CAD

V

2
1

-1
0

1
2

1

3

-1
-2

(a) Three-point perspective projection

(b) The vanishing points

Figure 4.16

EXERCISES
4.20. Show that the viewplane coordinate mapping and the device coordinate transformation map points at inﬁnity to points at inﬁnity.
4.21. Show that the vanishing point of a perspective projection in the
direction (x, y, z) is (p1 , p2 , p3 ) where (using the notation of Theorem 4.16)
p1

=

p2

=

p3

=

−xn2 v2 − xn3 v3 − xn4 v4 + yn2 v1 + zn3 v1
,
(xn1 + yn2 + zn3 ) v4
xn1 v2 − yn1 v1 − yn3 v3 − yn4 v4 + zn3 v2
,
(xn1 + yn2 + zn3 ) v4
xn1 v3 + yn2 v3 − zn1 v1 − zn2 v2 − zn4 v4
.
(xn1 + yn2 + zn3 ) v4

4.22. Stereographic projection attempts to emulate human vision by combining two perspective projections of an object from two closely positioned viewpoints. One image is viewed by the left eye and the other
by the right eye. The brain combines the two images to form a single
image with a more realistic sense of depth. Investigate stereographic
projection. See [21], [13], [12].
4.23. Image reconstruction is the process of obtaining a three-dimensional
representation of an object from a number of projected images of
the image. Investigate. See [12], [21].

5

Curves

5.1 Introduction
Curves arise in many applications such as art, industrial design, mathematics,
architecture, and engineering, and numerous computer drawing packages and
computer-aided design packages have been developed to facilitate the creation
of curves. A particularly illustrative application is that of computer fonts which
are deﬁned by curves that specify the outline of each character in the font.
Diﬀerent font sizes are obtained by applying scaling transformations. Special
font eﬀects can be obtained by applying other transformations such as shears
and rotations. Likewise, in other applications there is a need to perform various
tasks such as modifying, analyzing, and visualizing the curves. In order to
execute such operations a mathematical representation for curves is required.
In this chapter, curve representations are introduced and the simplest types
of curve, namely lines and conics, are described. Chapters 6–8 explore B´zier
e
and B-spline curves, two important representations that are widely used in
CAD and computer graphics. The representations of curves lead naturally to
representations of surfaces in Chapter 9. Conics also emerge as the silhouettes
of quadric surfaces in Section 11.5.

95

96

Applied Geometry for Computer Graphics and CAD

Deﬁnition 5.1
Three representations of curves are considered.
Parametric: The coordinates of points of a parametric curve are expressed
as functions of a variable or parameter such as t. A curve in the plane
has the form C(t) = (x(t), y(t)), and a curve in space has the form
C(t) = (x(t), y(t), z(t)). The functions x(t), y(t), and z(t) are called the
coordinate functions. The image of C(t) is called the trace of C, and C(t)
is called a parametrization of C. A subset of a curve C which is also a
curve is called a curve segment. A parametric curve deﬁned by polynomial
coordinate functions is called a polynomial curve. The degree of a polynomial curve is the highest power of the variable occurring in any coordinate
function. A function p(t)/q(t) is said to be rational if p(t) and q(t) are
polynomials. A parametric curve deﬁned by rational coordinate functions
is called a rational curve. The degree of a rational curve is the highest power
of the variable occurring in the numerator or denominator of any coordinate
function. Most of the curves considered in this book are parametric.
Non-parametric explicit: The coordinates (x, y) of points of a nonparametric explicit planar curve satisfy y = f (x) or x = g(y). Such curves
have the parametric form C(t) = (t, f (t)) or C(t) = (g(t), t). For nonparametric explicit spatial curves, two of the coordinates are expressed in
terms of the third: for instance, x = f (z), y = g(z).
Implicit: The coordinates (x, y) of points of an implicit curve satisfy F (x, y) =
0, for some function F . When F is a polynomial in variables x and y
the curve is called an algebraic curve. An implicitly deﬁned spatial curve
must satisfy (at least) two conditions F (x, y, z) = 0 and G(x, y, z) = 0
simultaneously. Implicit curves deﬁned by polynomials of degree two are
considered in Section 5.6.

Example 5.2 (Parametric Curves)
1. Parabola: (t, t2 ), for t ∈ R, is a polynomial curve of degree 2. See Figure 5.1(a).
2. Quarter circle:

1−t2
2t
1+t2 , 1+t2

, for t ∈ [0, 1], is a rational curve of degree 2.

3. Unit radius circle: (cos(t), sin(t)), for t ∈ [0, 2π], see Figure 5.1(b).
4. Twisted space cubic: t, t2 , t3 , for t ∈ R is a polynomial curve of degree 3.
See Figure 5.1(c).
5. Helix: (r cos(t), r sin(t), at), for t ∈ R, r > 0, a = 0. See Figure 5.1(d).

5. Curves

97

4

2

20

1
–20

10

0

–20
–10

1

10

10
20

–1

0

1

–10

2

0.5

–1

0

1

(a)

–20

0

0
–1

20

1

2

–1

(b)

1

(c)

(d)

Figure 5.1
Parametric curves: (a) parabola, (b) unit circle, (c) twisted
cubic, and (d) helix

Example 5.3 (Non-parametric Implicit Curves)
1. Parabola: y = x2 , x ∈ R.
√
2. Circular arc: y = 1 − x2 , x ∈ [−1, 1].
3. Twisted space cubic: y = x2 , z = x3 , x ∈ R.

Example 5.4 (Implicit Curves)
1. Unit radius circle: x2 + y 2 − 1 = 0.
2. Cuspidal cubic: y 2 − x3 = 0, see Figure 5.2.

3
2
1
0

1

2

–1
–2
–3

Figure 5.2

Cuspidal cubic y 2 − x3 = 0

98

Applied Geometry for Computer Graphics and CAD

5.2 Curve Rendering
The process of drawing a curve is called rendering. Parametric curves are the
most widely used in computer graphics and geometric modelling since points
on the curve are easily computed. In contrast, the evaluation of points on an
implicitly deﬁned curve is substantially more diﬃcult.
A curve of the form C(t) = (x(t), y(t)) deﬁned on the interval [a, b] is rendered by evaluating n + 1 points (x(ti ), y(ti )), where t0 < t1 < · · · < tn and
t0 = a, tn = b. The points are joined in sequence by line segments to give a
linear approximation to the curve as shown in Figure 5.3. If the resulting approximation is too jagged then a smoother curve can be obtained by increasing
the number of evaluated points.

(x(ti),y(ti))

Figure 5.3

(x(ti+1),y(ti+1))

Linear approximation to a parametric curve

Points on polynomial and rational curves can be evaluated using a reasonable number of arithmetical operations. Points on curves deﬁned by functions
such as square roots, trigonometric functions, exponential and logarithmic functions are more computationally expensive to calculate.
The most economical way to evaluate a polynomial is to use Horner’s
method. Consider the polynomial 1 + 2t + 3t2 + 4t3 . If the polynomial is computed as 1 + 2 · t + 3 · t · t + 4 · t · t · t then 3 additions and 6 multiplications are
required. However, if the polynomial is computed as ((4 · t + 3) · t + 2) · t + 1,
then only 3 additions and 3 multiplications are required yielding a saving of 3
multiplications. For polynomials of higher degree the saving is even greater.
In general, a polynomial of the form a0 + a1 t + a2 t2 + · · · + an tn can be
expressed in the form
(((an t + an−1 ) t + an−2 ) t + · · · ) t + a0 .
A computer algorithm to evaluate a polynomial, based on Horner’s method, is
easily implemented.

5. Curves

99

EXERCISES
5.1. Express 3−5t+4t2 −2t3 +6t4 in Horner’s form. Determine the diﬀerence in the number of ± and × required to evaluate the polynomial
in its original and new form.
5.2. Write a computer program which takes as input the coeﬃcients of a
polynomial and a parameter value t, and which outputs the value of
the polynomial at the given parameter value using Horner’s method.
5.3. Determine the number of operations ± and × saved by evaluating a
polynomial of degree n using Horner’s method.
5.4. Write a computer program which renders a parametric curve. Alternatively, learn how to plot curves using a computer package. Plot
some of the curves given in the examples.

5.3 Parametric Curves
Let C(t) = (x(t), y(t)) be a curve deﬁned on an open interval (a, b). Then C(t)
is said to be C k -continuous (or just C k ) if the ﬁrst k derivatives of x (t) and y (t)
exist and are continuous. If inﬁnitely many derivatives exist then C(t) is said to
be C ∞ . A curve C(t) = (x(t), y(t)) deﬁned on a closed interval [a, b] is said to
be C k -continuous if there exists an open interval (c, d) containing the interval
[a, b], and a C k -continuous curve D(t) deﬁned on (c, d), such that C(t) = D(t)
for all t ∈ [a, b]. Curves deﬁned on a closed interval need to be “extendable”
to a curve on an open interval in order to diﬀerentiate x(t) and y(t) at the
ends of the interval. (Another type of continuity called Gk -continuity, which is
important for CAD applications, is introduced in Deﬁnition 7.14.)
Suppose C(t) is a C 1 curve deﬁned on an interval I, then the function
2

2

ν(t) = (x (t)) + (y (t)) is called the speed of the curve C(t). If ν(t) = 0,
for all t ∈ I, then C(t) is said to be a regular curve. If ν(t) = 1 for all t ∈ I,
then C(t) is said to be a unit speed curve.

Example 5.5
1. Let (x(t), y(t)) = (t, t2 ). Then (x (t), y (t)) = (1, 2t), and
ν(t) =

12 + (2t)2 =

1 + 4t2 .

100

Applied Geometry for Computer Graphics and CAD

2. Let (x(t), y(t), z(t)) = (cos t, sin t, t2 ). Then
(x (t), y (t), z (t)) = (− sin t, cos t, 2t) ,
and
ν=

(− sin t)2 + (cos t)2 + (2t)2 =

1 + 4t2 .

Let C(t) = (x(t), y(t)) be a regular parametric curve, and suppose P and Q
are the points with coordinates (x(t), y(t)) and (x(t+δt), y(t+δt)) respectively.
Let
−→
−
(x(t + δt), y(t + δt)) − (x(t), y(t))
PQ
=
tδt =
δt
δt
as shown in Figure 5.4. Then as δt → 0, Q → P and tδt tends to the limiting
vector
x(t + δt) − x(t)
y(t + δt) − y(t)
, lim
lim tδt = lim
= (x (t), y (t)) .
δt→0
δt→0
δt→0
δt
δt
C (t) = (x (t), y (t)) is called the tangent vector . The unit tangent vector is
deﬁned to be
t(t) =

x (t)

1
(x (t), y (t)) =
|(x (t), y (t))|

x (t)2 + y (t)2

,

y (t)
x (t)2 + y (t)2

.

The line through the point (x(t), y(t)) in the direction of the tangent vector is
called the tangent line and has the equation
y (t)(x − x(t)) − x (t)(y − y(t)) = 0 .

n

(5.1)

t
PQ/dt
P

Q

PQ

Figure 5.4

C(t)

Tangent and normal to a curve

If the tangent vector C (t) = (x (t), y (t)) is rotated through an angle π/2
radians (in an anticlockwise direction), then the normal vector (−y (t), x (t))
is obtained. The unit normal vector of C(t) is deﬁned to be
n(t) =

(−y (t), x (t))
=
|(−y (t), x (t))|

−y (t)
x

(t)2

+y

(t)2

,

x (t)
x (t)2 + y (t)2

.

5. Curves

101

Example 5.6
Let C(t) = (cos(t), sin(t)). Then the tangent vector is C (t) = (− sin(t), cos(t))
and the normal vector is (− cos(t), − sin(t)). Since |C (t)| = 1 these vectors are
also √ unit tangent and normal vectors. At the point (cos(π/4), sin(π/4)) =
the
√
1
2 ,1
2 the unit tangent vector is
(− sin(π/4), cos(π/4)) =

1
1
−√ , √
2
2

,

and the unit normal vector is
(− cos(π/4), − sin(π/4)) =
The tangent line to C(t) at 1

1
1
−√ , −√
2
2

.

√
√
2 ,1
2 is

cos(π/4)(x − cos(π/4)) + sin(π/4)(y − sin(π/4)) = 0 ,
√
which simpliﬁes to x + y − 2 = 0.
The derivation of the tangent vector can be extended to space curves: for a
curve C(t) = (x(t), y(t), z(t)), the tangent vector is C (t) = (x (t), y (t), z (t)),
and the unit tangent vector is t(t) = C (t)/ x (t)2 + y (t)2 + z (t)2 .

EXERCISES
5.5. Let C(t) = (x(t), y(t)) be a regular curve.
(a) Determine the parametric equation of the tangent line to C at
the point (x(t), y(t)).
(b) Prove that the tangent line to C(t) at a point (x(t), y(t)) is given
by Equation (5.1).
(c) The normal line to C at a point p = (x(t), y(t)) is the line
through p perpendicular to the tangent. Determine the implicit
equation of the normal line.
5.6. For each of the curves below, determine (i) the unit tangent vector,
(ii) the unit normal vector, and (iii) the implicit equation of the
tangent line.
(a) (t, t2 ) at the point (1, 1).
(b) (t2 , t3 ) at the point (4, 8).

102

Applied Geometry for Computer Graphics and CAD

(c) logarithmic spiral: aebt cos t, aebt sin t .
(d) cycloid: (t + sin t, 1 − cos t).
(e) (cos t + t sin t, sin t − t cos t).
(f) catenary: (c cosh (t/c) , t).
5.7. Show that a translation of a curve has no eﬀect on the speed of a
curve.
5.8. Show that a rotation has no eﬀect on the speed of a curve.

5.4 Arclength and Reparametrization
Consider the following three parametrizations of the unit quarter circle (in the
ﬁrst quadrant) centred at the origin.
(1) (cos π t, sin π t), t ∈ [0, 1],
2
2
(2)
(3)

1−t2
2t
1+t2 , 1+t2

, t ∈ [0, 1], and

√
1 − t2 , t , t ∈ [0, 1].

1

1

0

1

(a)

1

0

1

(b)

0

1

(c)

Figure 5.5
Diﬀerent parametrizations of the quarter circle: (a)
√
2
2t
(cos π t, sin π t), (b) 1−t2 , 1+t2 , and (c)
1 − t2 , t
2
2
1+t
Figure 5.5 shows the three parametrizations of the quarter circle evaluated
at 15 equal parameter increments ti = i/14, for i = 0, . . . , 14. For parametrization (1) the points are equally spaced along the arc, for (2) the points are quite
evenly spaced, and for (3) the points are unevenly spaced. The diﬀerence in
the behaviour of the parametrizations corresponds to the fact that in (1) each

5. Curves

103

parameter interval [ti , ti+1 ] maps to a circular arc of equal length, whereas in
(2) and (3) the parameter intervals map to circular arcs of varying lengths.
To explore this further a method to calculate the length of a curve is required. Consider a regular curve C(t) = (x(t), y(t)), for t ∈ [a, b], and a sequence
i
of equally spaced parameter values ti = a + n (b − a) (for i = 0, . . . , n) with
t0 = a and tn = b. The line segment from (x(ti ), y(ti )) to (x(ti+1 ), y(ti+1 ))
approximates the curve on the interval [ti , ti+1 ] and has length
2

2

(x(ti+1 ) − x(ti )) + (y(ti+1 ) − y(ti )) .
Thus the length L (C) of the curve C on the interval [a, b] is approximately
n−1
2

2

(x(ti+1 ) − x(ti )) + (y(ti+1 ) − y(ti )) .

(5.2)

i=0

If the parameter increments δt = ti+1 − ti = (b − a)/n are suﬃciently small,
then x (ti ) is approximately equal to (x(ti+1 ) − x(ti ))/ (ti+1 − ti ), y (ti ) is approximately equal to (y(ti+1 ) − y(ti ))/ (ti+1 − ti ), and substitution into (5.2)
yields that L (C) is approximately
n−1
2

2

(x (ti )) + (y (ti )) δt .

(5.3)

i=0

The true length of the curve over [a, b] is realized by letting n tend to inﬁnity.
As n increases the line segments ﬁt the curve more closely, and (5.3) becomes
a better approximation to the length of the curve. The limit of (5.3) as n tends
to inﬁnity is
b

b
2

2

(x (t)) + (y (t)) dt =

L(C) =
a

ν(t) dt .
a

L(C) is called the arclength of C(t) from t = a to t = b. The arclength function
t
LC (t) = t0 x (u)2 + y (u)2 du, for a ≤ t0 ≤ b, measures the length of the
curve segment from an initial point (x(t0 ), y(t0 )) to the point (x(t), y(t)). Then
L(C) =LC (b) − LC (a).

Example 5.7
1. The speed of the quarter circle C(t) = (cos t, sin t), for t ∈
ν(t) =

2

0, π , is
2

2

(− sin t) + (cos t) = 1. The parametrization is unit speed and

the arclength function from t0 = 0 is LC (t) =
length LC π − LC (0) = π .
2
2

t
0

1 du = t. The curve has

104

Applied Geometry for Computer Graphics and CAD

2. The speed of C(t) = (cos π t, sin π t), for t ∈ [0, 1], is
2
2
ν(t) =

−

π
π
sin t
2
2

2

+

π
π
cos t
2
2

2

=

π
.
2

The parametrization has constant speed and the arclength function from
t
t0 = 0 is LC (t) = 0 π du = π t. The curve has length LC (1) − LC (0) = π .
2
2
2
3. The speed of C(t) =

ν(t) =

1−t2
2t
1+t2 , 1+t2

−4t
(1 + t2 )2

, for t ∈ [0, 1], is
2

+

2(1 − t2 )
(1 + t2 )2

2

=

2
,
1 + t2

t

2
and the arclength function from t0 = 0 is LC (t) = 0 1+u2 du = 2 arctan(t).
Thus, with this parametrization, the unit quarter circle starts at point (1, 0)
with speed ν(0) = 2. As t increases the speed decreases until the curve
reaches the point (0, 1) when the curve has speed ν(1) = 1. The curve has
length LC (1) − LC (0) = π .
2
√
4. Let the unit quarter circle be parametrized by C(t) =
1 − t2 , t , for
2 −1/2
, 1), and
t ∈ [0, 1]. Then (x (t), y (t)) = (−t(1 − t )

ν(t) =

−t(1 − t2 )−1/2

2

+ 1 =(1 − t2 )−1/2 .

Thus, with this parametrization, the unit quarter circle starts at point (1, 0)
with speed ν(0) = 1. As t increases the speed increases until the curve
reaches the point (0, 1) when the curve has inﬁnite speed. The arclength is
computed in Exercise 5.9.
The arclength functions of the three parametrizations of the quarter circle
are illustrated in Figure 5.6. In each plot the vertical axis shows the length
of the curve traced from (x(0), y(0)) to (x(t), y(t)). Naturally, the total curve
length in each case is π/2. Parametrization (1) traces the curve uniformly. The
speed of parametrization (2) is decreasing, so the curve is traced more quickly
in the beginning than at the end. The speed of parametrization (3) is increasing
so the curve is traced more quickly at the end than at the beginning.

Deﬁnition 5.8
Let C(t) and D(t) be curves deﬁned on intervals I and J respectively. Then D
is said to be a reparametrization of C if there exists a diﬀerentiable function
h : J → I such that h (t) = 0 and D(t) = C(h(t)) for all t ∈ J. The function
h(t) is referred to as a reparametrization.

5. Curves

105

1.5

1.5

1.5

1

1

1

0.5

0.5

0.5

0

1
t

0

1

0

1

t

(a)

(b)

t

(c)

Figure 5.6
Comparison of the arclength functions of three parametrizations of the quarter circle
Example 5.7(1) is a unit-speed parametrization of the unit quarter circle.
Parametrization (1) can be obtained from the unit speed parametrization by a
reparametrization with h(t) = π t and J = [0, 1]. Parametrizations (2) and (3)
2
are also reparametrizations of the unit speed quarter circle. The next theorem
shows that the arclength function can be used to reparametrize a curve to give
a unit speed curve with the same trace.

Theorem 5.9
Let C(t) = (x(t), y(t)) be a regular curve deﬁned on an interval I with arclength
function s(t) = LC (t). Then C(s) = x L−1 (s) , y L−1 (s) is a unit speed
ˆ
C
C
curve.

Proof
Let s = LC (t). Diﬀerentiating with respect to t gives LC (t) = |C (t)| = ν(t).
Since C(t) is regular, LC (t) = 0 for all u ∈ I, and the inverse function theorem
implies that the inverse t = L−1 (s) exists. Let h(s) = L−1 (s). Then dh =
C
C
ds
1/LC = 0, and t = h(s) may be used to reparametrize C(t) to give the curve
ˆ
C(s) = C(L−1 (s)) = x L−1 (s) , y L−1 (s) . Then the chain rule gives
C
C
C
ˆ
dL−1 (s)
dC
C
(s) =
x L−1 (s) , y L−1 (s)
C
C
ds
ds

,

106

Applied Geometry for Computer Graphics and CAD

and
=

dL−1 (s)
C
ds

=

ˆ
dC
(s)
ds

1
1
|C (t)| =
|C (t)| = 1 .
LC (t)
|C (t)|

x L−1 (s) , y L−1 (s)
C
C

ˆ
Hence C(s) is unit speed, and the proof is complete.

Example 5.10
Consider parametrization (3) of the unit quarter circle. Exercise 5.9 will determine the arclength function to be s = arcsin(u). Substituting t = sin(s) into
√
1 − t2 , t gives the unit speed parametrization of the circle (cos(s), sin(s)).

EXERCISES
√
5.9. Show that the arclength function of C(t) =
1 − t2 , t , t ∈ [0, 1] is
1
LC (t) = arcsin t (assume arcsin has range − 2 π, 1 π ).
2
5.10. Determine the speed and arclength function for each of the following
curves
(a) cycloid: (t + sin t, 1 − cos t), t ∈ [−π, π].
(b) (cos t + t sin t, sin t − t cos t), t > 0.
(c) catenary: (c cosh (t/c) , t), t ∈ R.
(d) astroid: cos3 t, sin3 t , t ∈ [0, π/2].
(e) logarithmic spiral: aebt cos t, aebt sin t .
5.11. Determine the length of the cycloid and the astroid of the previous
exercise.
5.12. Write a program to determine the arclength of a curve using the
summation formula (5.2) to within a user speciﬁed accuracy > 0.
This is achieved by increasing the number of increments n until the
diﬀerence between successive computed approximate lengths is less
than .
5.13. Determine the unit speed parametrization of the unit quarter circle from parametrization (2) by reparametrizing with the arclength
function.

5. Curves

107

5.14. Obtain a unit speed reparametrization of
(a) cycloid: (t + sin t, 1 − cos t).
(b) (cos t + t sin t, sin t − t cos t).
(c) catenary: (c cosh (t/c) , t).
(d) logarithmic spiral: aebt cos t, aebt sin t .
(e) y = cosh(x − 1).

5.5 Application: Numerical Controlled
Machining and Oﬀsets
Numerically controlled (NC) milling machines are used to make products and
parts, or the moulds and dies from which the parts are manufactured. A CAD
deﬁnition of a curve, describing the shape of a part, can be converted into a
sequence of commands which are used to drive the milling machine cutting
tool. NC machines can be programmed to move the tool in various ways. For
instance, a ﬁve-axis machine can perform both translations and orientations of
the tool, whereas a two-axis machine can translate the tool freely in the x- and
y-directions, but a ﬁxed orientation of the tool is maintained. The NC machine
is programmed to move the cutter along a path so that the unwanted portion
of the material is removed, and the remaining material has the desired shape.
In many applications the tool is a ball-end or ball-nose cutter. For a two-axis
machine, cutting in a speciﬁed plane, the ball-end cutter can be considered a
circular disk of ﬁxed radius d. Suppose the shape to be cut is given by a regular
curve C(t) = (x(t), y(t)), with unit normal n(t). Referring to Figure 5.7, the
cutter disk is required to be perpendicular to the curve, which implies that the
disk centre is a distance d along the curve normal. Therefore, as the shape is
cut, the disk centre follows the path of the curve Od (t) = C(t) + d · n(t) called
the oﬀset or parallel of C(t) at a distance d. The sign of d determines which
side of the curve the cutter lies. Oﬀset curves generalise to oﬀset surfaces which
are discussed in Section 9.2.1.

Example 5.11
Consider the curve C(t) = (x(t), y(t)) = (t, t2 ). Then (x (t), y (t)) = (1, 2t).

108

Applied Geometry for Computer Graphics and CAD

Offset
C(t)

n
d

Path of centre of ball-end cutter along oﬀset

Figure 5.7

2t
1
Hence, n(t) = − √1+4t2 , √1+4t2 , and the oﬀset at a distance d is

Od (t) =

t − d√

2t
1
, t2 + d √
2
1 + 4t
1 + 4t2

.

Figure 5.8 shows the oﬀsets at distances d = −2, −1, 0.5, 1. Note that the
oﬀsets are not parabolas. The d = 1 oﬀset exhibits cusp singularities. If the
cutting is to be executed on the same side as the normal to the parabola, then
the cutting disk must have a radius less than 1 in order to avoid singularities
of the oﬀset. Such singularities indicate that the cutting tool is too big to cut
the desired shape. (See Exercise 10.7.)
2

d=1
d=0.5
C

1
0

d=-1
d=-2

-1
-2
-3 -3 -2

Figure 5.8

-1

0

1

2

3

Oﬀsets of the parabola (t, t2 )

5. Curves

109

EXERCISES
5.15. Determine the oﬀset of C(t) = 1 − 3t + 3t2 , 3t2 − 2t3 at a distance
d. Plot the curve and its oﬀset at a distance d = 1.
5.16. Determine the oﬀsets at a distance d for the following curves:
(a) (c cosh(t/c), t).
(b) (ebt cos t, ebt sin t).
(c) (cos t + t sin t, sin t − t cos t).
5.17. Show that the oﬀset at a distance d of a circle of radius r is a circle
of radius r + d.

5.6 Conics
The simplest implicitly deﬁned planar curve is a straight line given by a linear
equation ax + by + c = 0. Curves deﬁned implicitly by a quadratic polynomial
equation
(5.4)
ax2 + 2bxy + cy 2 + 2dx + 2ey + f = 0
are called conics. Circles, ellipses, hyperbolas, and parabolas are all types of
conic. “Conics” or “conic sections” receive their name from a classical geometrical method of construction, namely, as the curve of intersection of a plane
with a cone.
A cone is the surface formed by rotating a line L through a ﬁxed point O
about a ﬁxed axis OA so that L maintains a constant angle α < π/2 with the
axis. The point O is called the vertex of the cone. The cone consists of two parts
called sheets which meet at the vertex. Consider a plane, not passing through
O, making an angle β with the axis. When β > α, the intersection curve of
the plane and the cone is an ellipse lying entirely in one sheet. When β = π/2
(so the axis is perpendicular to the plane) the intersection is a circle, a special
case of the ellipse. When β < α, the plane intersects both sheets of the cone
resulting in a curve of two separate branches called a hyperbola. When β = α,
the plane intersects the cone in one sheet to give a curve called a parabola.
The ellipse, parabola, and hyperbola are illustrated in Figure 5.9. There are
also degenerate conics which arise when the plane passes through the vertex.
The degenerate cases are a union of two lines when β > α, two coincident lines
when β = α, and the point O when β < α.
If L is a line parallel to the axis, then the resulting surface is a cylinder
which may be considered a cone with its vertex at inﬁnity. A plane intersects

110

Applied Geometry for Computer Graphics and CAD

(a)

(b)
Figure 5.9

(c)

Conic sections

the cylinder in an ellipse, or in the degenerate cases of two distinct parallel
lines, two coincident lines, or no intersection. The reader is referred to [26] and
[5] for a historical account of conics and a proof that the sections of a cone are
expressible by quadratic equations.
There is a second geometric construction for conics called the focus–directrix
construction [26]. Given a ﬁxed line D in the plane, called the directrix , and a
ﬁxed point F, called the focus, the locus of all points P such that the distance
PF from P to F is proportional to the distance PD from P to the directrix,
is a conic. Thus there exists a constant , called the eccentricity, such that
PF = PD.

Example 5.12
Let a conic have directrix the x-axis, focus F(2, 3), and eccentricity
P(x, y) be a general point on the conic. Then
PD = y, PF =

= 4. Let

(x − 2)2 + (y − 3)2 .

Hence PF = PD implies
(x − 2)2 + (y − 3)2 = 4y ,
giving the conic with the equation x2 − 15y 2 − 4x − 6y + 13 = 0 shown in
Figure 5.10.
To prove that the focus–directrix construction gives a conic it is suﬃcient to
show that the curve satisﬁes the general equation (5.4). Suppose the directrix
is the line lx + my + n = 0, and the focus is (xF , yF ). Then
PD = (lxF + myF + n)

l 2 + m2

5. Curves

111

2
y

–3

–2

1

–1

0

1

2

3

4

x

–1
–2

Figure 5.10

Conic x2 − 15y 2 − 4x − 6y + 13 = 0

and
PF =

(x − xF )2 + (y − yF )2 .

Hence,
(lx + my + n)

l 2 + m2 =

(x − xF )2 + (y − yF )2 .

Squaring both sides and multiplying through by l2 + m2 yields
2

(lx + my + n)2 = (l2 + m2 )((x − xF )2 + (y − yF )2 )

which is a quadratic equation in x and y of the form (5.4) where a = 2 l2 −
l2 − m2 , b = 2 lm, c = 2 m2 − l2 + m2 , d = 2 nl + xF (l2 + m2 ), e = 2 mn +
2
yF l2 + m2 , f = 2 n2 − l2 + m2 x2 + yF .
F
The converse, that any non-degenerate conic can be obtained by a focus–
directrix construction, can be proved in two steps: (i) computation of the eccentricity of a conic expressed in implicit form, and (ii) computation of the focus
and directrix. The ﬁrst step is proved in Exercise 5.18, while the remainder of
the proof can be found in [26].

Exercise 5.18
Let a conic have focus (xF , yF ), eccentricity , and directrix with equation
x cos θ + y sin θ − p = 0. Expand the expression
(x − xF )2 + (y − yF )2 =

2

(x cos θ + y sin θ − p)2

and compare the coeﬃcients with a scalar multiple of the coeﬃcients of
(5.4). Show that
2
2− 2
(a + c)2
=
.
2
1−
ac − b2

112

Applied Geometry for Computer Graphics and CAD

5.6.1 Classiﬁcation of Conics
Consider a conic deﬁned by Equation (5.4). If (5.4) is a product of two linear
factors, then the conic is a union of two lines and it is said to be a reducible conic.
Otherwise, the conic is said to be irreducible. A condition on the coeﬃcients of
(5.4) for the conic to be reducible is determined as follows. Suppose that a = 0.
Then multiply (5.4) through by a and complete the square to give
(ax + by + d)2 − ((b2 − ac)y 2 + 2(bd − ae)y + (d2 − af )) = 0 .

(5.5)

Let A = b2 − ac, B = 2(bd − ae), and C = (d2 − af ). Then (5.5) can be written
(ax + by + d)2 − Ay 2 + By + C = 0 .

(5.6)

The expression (5.6) has two linear factors if and only if it can be written as
the diﬀerence of two squares. Thus Ay 2 + By + C must be a perfect square,
which is possible if and only if B 2 − 4AC = 0. Hence the condition for the conic
to be reducible is
B 2 − 4AC = 4(bd − ae)2 − 4(b2 − ac)(d2 − af ) = 0 .
Dividing through by −4a, the condition for reducibility can be expressed as
the following determinant ∆ which is called the discriminant of the conic.
∆=

a b
b c
d e

d
e
f

=0.

When ∆ = 0, Ay 2 +By+C = A(y+B/2A)2 and two cases can be distinguished.
(1) When A = b2 − ac ≥ 0, (5.6) has two real linear factors and the conic is a
pair of lines. (2) When A = b2 − ac < 0, (5.6) has two imaginary linear factors
and the conic is an isolated point. The reader is left the exercise of showing
that ∆ = 0 is also the condition for reducibility in the case when a = 0.
Next, suppose that (5.4) has two real linear factors (a = 0, b2 − ac ≥ 0)
a(x − α1 y + β1 )(x − α2 y + β2 ) = 0 .
Expanding the brackets and comparing the coeﬃcients of the resulting expression with (5.4) gives α1 α2 = c/a, α1 +α2 = −2b/a. A simple computation yields
√
that the angle θ between the two lines is given by tan θ = 2 b2 − ac (a + c). It
follows that the conic is a pair of perpendicular lines when ∆ = 0 and a+c = 0,
and a pair of parallel lines whenever ∆ = 0 and b2 − ac = 0. This concludes
the study of the reducible conics.
The irreducible conics are as follows: (1) hyperbolas when b2 − ac > 0, (2)
ellipses when b2 − ac < 0, and (3) parabolas when b2 − ac = 0. The distinction can be explained by the conic’s behaviour at inﬁnity. Let (X, Y, W ) be

5. Curves

113

homogeneous coordinates of a point (x, y), so that x = X/W and y = Y /W .
Substituting into (5.4) and multiplying through by W 2 yields that the homogeneous coordinates of any point on the conic satisﬁes the homogeneous equation
C(X, Y, W ) = aX 2 + 2bXY + cY 2 + 2dXW + 2eY W + f W 2 = 0 .

(5.7)

The points at inﬁnity of the conic are obtained by setting W = 0 in (5.7) to
give
(5.8)
aX 2 + 2bXY + cY 2 = 0 .
When b2 − ac > 0, (5.8) can be expressed as two distinct real linear factors
a (X + µ1 Y ) (X + µ2 Y ) = 0, and it follows that the conic has two distinct real
points at inﬁnity, (µ1 , −1, 0) and (µ2 , −1, 0). Likewise, when b2 − ac < 0, (5.8)
can be expressed as two complex conjugate linear factors which give rise to two
complex conjugate points at inﬁnity. When b2 − ac = 0, (5.8) can be expressed
2
as a perfect square a (X + µ1 Y ) = 0, and hence the conic has a repeated real
point at inﬁnity, (µ1 , −1, 0).
The tangent lines to a curve at points at inﬁnity are the asymptotes of
the curve. Therefore, when b2 − ac > 0 the irreducible conic has two real
asymptotes and the curve is a hyperbola, and when b2 − ac < 0, there are no
real asymptotes and the conic is an ellipse. When b2 − ac = 0, the asymptote
is the line at inﬁnity W = 0 and the conic is a parabola.

Deﬁnition 5.13
The centre of a conic C(x, y) = 0 is the point (x, y) satisfying
∂C
∂C
(x, y) = 2ax + 2by + 2d = 0,
(x, y) = 2bx + 2cy + 2e = 0 .
∂x
∂y
If b2 − ac = 0 then the conic has centre
(x, y) = (be − cd) / ac − b2 , (bd − ae) / ac − b2

,

otherwise there is no centre. Conics with a centre are called central conics.
Of the irreducible conics, the ellipse and hyperbola are central conics but the
parabola is not.
In addition to the implicit form (5.4), conics have a parametric form
(x (t) , y (t)) =

a0 + a1 t + a2 t2 b0 + b1 t + b2 t2
,
c0 + c1 t + c2 t2 c0 + c1 t + c2 t2

,

(5.9)

where the coeﬃcients c0 , c1 , c2 are not all zero. Conics can also be deﬁned parametrically by other functions such as trigonometric and hyperbolic functions.

114

Applied Geometry for Computer Graphics and CAD

Sections 5.6.4 and 5.6.5 show how to convert a non-degenerate conic from implicit to parametric form and vice versa. In particular, Theorem 5.26 shows
that a parametric curve of the form (5.9) can be expressed in the implicit form
(5.4), and is therefore a conic.
Recall that the irreducible types hyperbola/parabola/ellipse are distinguished by the fact that they have two real/one real/two complex conjugate
points at inﬁnity. For a parametric conic (5.9), the points at inﬁnity occur at
parameter values for which the denominator of the coordinate functions vanishes, that is, when c2 t2 + c1 t + c0 = 0. When c2 − 4c0 c2 > 0 the denominator
1
vanishes at two real values of t which give rise to two real points at inﬁnity. The
conic is therefore a hyperbola. Similarly, it can be shown that the conic is an
ellipse when c2 − 4c0 c2 < 0, and a parabola when c2 − 4c0 c2 = 0. In particular,
1
1
if a conic is parametrized by quadratic polynomials, then c1 = c2 = 0, c0 = 1,
and the conic is a parabola.
Summary. A conic is either irreducible when ∆ = 0, or reducible when ∆ = 0.
The irreducible conics have three distinct types, namely, ellipse, parabola,
and hyperbola. Reducible conics are a union of two lines (real or imaginary)
which may be distinct and non-parallel, distinct and parallel, or coincident.
The types of conic are summarized in Table 5.1.
Table 5.1

Summary of conic types

b2 − ac

∆

Central

Conic type

c2 − 4c0 c2
1

>0

=0

Yes

hyperbola

>0

<0

=0

Yes

ellipse

<0

=0

=0

No

parabola

=0

>0

=0

Yes

two real distinct intersecting lines

<0

=0

Yes

two complex conjugate lines
intersecting in a real point

=0

=0

No

two real distinct parallel lines

=0

=0

No

two real coincident lines

5. Curves

115

Example 5.14
The following examples show how to determine whether a conic is irreducible
or reducible, and whether an irreducible conic is an ellipse, a hyperbola, or a
parabola.
1. Consider the conic given by x2 + 2xy − 3y 2 + 4x − 5 = 0. Then a = 1, b = 1,
c = −3, d = 2, e = 0, f = −5,
∆=

1
1
2

1
2
−3
0
0 −5

= 32 .

Since ∆ = 0 the conic is irreducible. Further, b2 − ac = 4 > 0, hence the
conic is a hyperbola.
2. Consider the conic given by −2x2 + xy − x − y + 3 = 0. Then a = −2,
b = 1/2, c = 0, d = −1/2, e = −1/2, f = 3,
∆=
Since ∆ = 0 the conic
yields
1
−
−2x +
2

−2
1/2
1/2
0
−1/2 −1/2

−1/2
−1/2
3

=0.

is reducible. Completing the square of the conic
1
1
y−
2
2

2

25 1 2
5
+ y
+ − y+
4
8
8

=0.

Factorize the quadratic in y to give the diﬀerence of two squares
−

1
2

1
1
−2x + y −
2
2

2

+

1
2
(y − 5) = 0 .
8

Factorizing,
(x − 1) (−2x + y − 3) = 0 .
Hence, the conic is the union of the two lines x − 1 = 0 and 2x − y + 3 = 0.

EXERCISES
5.19. For each of the conics below determine whether the conic is irreducible or reducible. If it is irreducible then determine whether it is
an ellipse, a hyperbola, or a parabola. If the conic is reducible then
determine the linear factors.
(a) 4x2 − 3xy + y 2 − x + 2y + 7 = 0.

116

Applied Geometry for Computer Graphics and CAD

(b) −2x2 + y 2 + 3x − 4y + 1 = 0.
(c) 3x2 − 5xy − x − 2y 2 + 9y − 4 = 0.
(d) x2 − 3xy + 5y 2 − 2x + 6 = 0.
(e) 2x2 + 2xy − 5x − 3y + 3 = 0.
(f) 2x2 − 2y 2 + 3x + 4y + 7 = 0.
(g) 2xy + 3y = 5.
(h) 3x2 − xy − 2y 2 + 6x + 4y = 0.
(i) 2x2 + 2xy − 3x − 3y + 1 = 0.
(j) 2x2 − 4xy + 2y 2 − 9 = 0.
5.20. Let C(x, y) = 0 be a central conic. Any line through the centre is
called a diameter. The centre is the midpoint of the two points of
intersection of C with any diameter. Verify this fact for
(a) the hyperbola 4x2 − 9y 2 = 16, and
(b) the ellipse 4x2 + 9y 2 + x − 6y = 0.
5.21. There are conics which have no real points. For example, x2 + y 2 =
−1. Determine others.

5.6.2 Conics in Standard Form
It can be shown that hyperbolas and ellipses have two lines of reﬂectional
symmetry, and that a parabola has one. A conic for which the lines of symmetry
coincide with the coordinate axes is said to be in standard form. It will be
shown that any irreducible conic can be obtained by applying a composite
transformation consisting of a rotation and a translation to a conic in standard
form. Conversely, any conic can be obtained by applying a transformation to
a conic in standard form. The implicit and parametric standard forms of the
irreducible conics are given in Table 5.2.
Recall that in homogeneous coordinates, the conic (5.4) is given by (5.7).
Let x = (X, Y, W ) then (5.7) can be expressed in the matrix form
⎛
⎞⎛
⎞
a b d
X
C(X, Y, W ) = xMxT = X Y W ⎝ b c e ⎠ ⎝ Y ⎠ .
d e f
W
The discriminant of C is denoted ∆C = det(M).

5. Curves

117

Table 5.2
Conic

Standard forms for the irreducible conics

Implicit forms

Parametric forms
a(b2 +a2 t2 )
2ab2 t
a2 t2 −b2 , a2 t2 −b2

Hyperbola

x2 /a2 − y 2 /b2 = 1

, t ∈ R, t =

± (a cosh θ, b sinh θ) , θ ∈ R ;
(a sec θ, b tan θ) ,
θ ∈ − π , π , and θ ∈ π , 3π
2 2
2 2

b
a

;

.

t, mt2 , t ∈ R ;
mt2 , t , t ∈ R .

Parabola

y = mx2
x = my 2

Ellipse

x2 /a2 + y 2 /b2 = 1

a(1−t2 ) 2bt
1+t2 , 1+t2

, t∈R;

(a cos θ, b sin θ) ,

θ ∈ [0, 2π] .

Theorem 5.15
ˆ
Let C be the image of the conic C = xMxT following the application of a
non-singular planar transformation with transformation matrix A. Then
∆C = det(A)2 ∆C .
ˆ
So a non-singular transformation does not aﬀect the irreducibility of a conic.

Proof
Let the conic be C = xMxT . Then the transformation x = yA yields a conic
ˆ
ˆ
ˆ
C = (yA)M(yA)T = yAMAT yT = yMyT , where M = AMAT . Hence
∆C = det(AMAT ) = det(A) det(M) det(AT ) = det(A)2 det(M) = det(A)2 ∆C .
ˆ
Since A is non-singular, det(A) = 0. Therefore ∆C = 0 if and only if ∆C = 0.
ˆ
ˆ
Hence C is irreducible if and only if C is irreducible.

The distinctions of hyperbola, parabola, and ellipse apply with respect to a
particular Cartesian coordinate system. The eﬀect on a conic of an application
of an orthogonal change of coordinates (see Exercise 2.21) is expressed by the
following theorem.

118

Applied Geometry for Computer Graphics and CAD

Theorem 5.16
ˆ
Let C be the image of the conic C (given by (5.7)) following the application of
an orthogonal change of coordinates. Then
b2 − ac = ˆ2 − ac ,
b
ˆˆ
a+c = a+c,
ˆ ˆ
ˆ
where a, ˆ and c denote the corresponding coeﬃcients of C.
ˆ b
ˆ

Proof
ˆ
ˆ
ˆ
Let the orthogonal change of coordinates be X = X cos θ − Y sin θ + g W ,
ˆ
ˆ
ˆ
ˆ
Y = X sin θ + Y cos θ + hW , W = W (expressed in homogeneous coordinates).
Then substituting for X and Y in (5.7) yields
ˆˆ ˆ
ˆˆ
b ˆ ˆ ˆˆ
ˆˆ ˆ
aX 2 + 2ˆX Y + cY 2 + dX W + eY W + f W 2 = 0
ˆˆ
where
a = a cos2 θ + 2b cos θ sin θ + c sin2 θ ,
ˆ
ˆ = b cos2 θ − sin2 θ + (c − a) sin θ cos θ ,
b
c = a sin2 θ − 2b cos θ sin θ + c cos2 θ ,
ˆ
ˆ
d = bg sin θ + e sin θ + bh cos θ + d cos θ + ag cos θ + ch sin θ ,
e = ch cos θ − ag sin θ + bg cos θ − bh sin θ − d sin θ + e cos θ , and
ˆ
ˆ
f = ag 2 + ch2 + 2dg + 2bgh + f + 2eh .
Then
ˆ2 − ac =
b
ˆˆ

b cos2 θ − sin2 θ + (c − a) sin θ cos θ
− a cos2 θ + 2b cos θ sin θ + c sin2 θ
× a sin2 θ − 2b cos θ sin θ + c cos2 θ

= b2 − ac ,
and
a+c =
ˆ ˆ

a cos2 θ + 2b cos θ sin θ + c sin2 θ
+ a sin2 θ − 2b cos θ sin θ + c cos2 θ

= a+c.

2

5. Curves

119

Let A be the transformation matrix of an orthogonal change of coordiˆˆ
nates. Then, by Exercise 2.21, det(A) = 1. Since ˆ2 − ac = b2 − ac and
b
∆C = det(A)2 ∆C = ∆C the type of conic is unaﬀected by a change of coˆ
ordinates. If (5.4) is multiplied through by a constant µ, then the quantities
a + c, b2 − ac, and ∆ become µ (a + c), µ2 b2 − ac , and µ3 ∆. Thus the ratios
1/2

(a + c) : b2 − ac
: ∆1/3 are absolute invariants. A conic expressed in any
rectangular Cartesian coordinate system has the same absolute invariants.

Theorem 5.17
An irreducible conic can be mapped to a conic in standard form by applying
an orthogonal change of coordinates.

Proof
ˆ
ˆ
Let the conic be given by (5.7). First, apply a rotation X = X cos θ − Y sin θ,
ˆ sin θ + Y cos θ. Then (5.7) has the form
ˆ
and Y = X
ˆˆ ˆ
ˆˆ
b ˆ ˆ ˆˆ
eˆ ˆ
aX 2 + 2ˆX Y + cY 2 + 2dX W + 2ˆY W + f W 2 = 0 ,
ˆˆ

(5.10)

where the coeﬃcients are given by the expressions in Theorem 5.16, but with g
ˆˆ
and h set equal to zero. The X Y term can be eliminated by choosing the angle θ
ˆ vanishes: the required angle satisﬁes tan 2θ = 2b/(a−c)
so that the coeﬃcient b
if a = c, and θ = π/4 or 3π/4 if a = c. Provided a = 0 and c = 0, then (5.10)
ˆ
ˆ
has the form
ˆ
d ˆ
a X+ W
ˆ ˆ
a
ˆ

2

e ˆ
ˆ
+c Y + W
ˆ ˆ
c
ˆ

2

+

ˆ2
ˆ2
ˆ d −e
f−
a
ˆ
c
ˆ

ˆ

ˆ
W2 = 0 .

ˆ
d
Applying the translation T − a , − e , yields a standard form for the hyperbola
ˆ
c
ˆ
or ellipse given by

ˆ2
ˆ2
ˆ d −e
f−
a
ˆ
c
ˆ

aX 2 + cY 2 +
ˆˆ
ˆˆ

ˆ
W2 = 0 .

If a = 0, c = 0, then (5.10) has the form
ˆ
ˆ
e ˆ
ˆ
c Y + W
ˆ ˆ
c
ˆ

2

ˆˆ ˆ
ˆˆ
+ 2dX W + f W 2 = 0 .

ˆ

f
ˆ
Applying the translation T − 2d , − e gives
ˆ
c
ˆ

ˆˆ ˆ
cY 2 + 2dX W ,
ˆˆ

120

Applied Geometry for Computer Graphics and CAD

a standard form for the parabola. Similarly, a standard form for the parabola
is obtained when a = 0, c = 0. The case a = 0, c = 0 is not considered since
ˆ
ˆ
ˆ
ˆ
the conic is reducible.

Example 5.18
To determine the standard form for the ellipse
√
2x2 − 2 3xy + 4y 2 + 5x + 6y − 1 = 0 .
√
Then a = 2, b = − 3, c = 4, and the required rotation angle is given by
√
√
tan 2θ = 3, yielding θ = π/6. Then cos(π/6) = 3/2, sin(π/6) = 1 , and the
2
√
√
ˆ
ˆ
ˆ
ˆ
required rotation is X = 23 X − 1 Y , and Y = 1 X + 23 Y , giving the conic
2
2
√
√
√
2
√
1 ˆ
3 ˆ 1ˆ
3 ˆ 1ˆ
3ˆ
2
X− Y
X− Y
X+
Y
−2 3
2
2
2
2
2
2
√
√
2
3ˆ
3 ˆ 1ˆ ˆ
1 ˆ
X+
Y
X− Y W
+4
+5
2
2
2
2
√
1 ˆ
3ˆ ˆ
ˆ
+6
X+
Y W − W2 = 0 .
2
2
Simplifying yields
ˆ
ˆ
X 2 + 5Y 2 +

√
5√
5
ˆ ˆ
3 + 3 XW + 3 3 −
2
2

ˆ ˆ
ˆ
Y W − W2 = 0 .

ˆ
ˆ
Then, completing the squares in X and Y ,
ˆ
X+
−

1+

5√
3
3+
4
2
5√
3
3+
4
2

2

ˆ
+5 Y +

ˆ
W
2

+

3√
1
3−
10
4

3√
1
3−
10
4

2

2

ˆ
W2 = 0 ,

√
ˆ ¯
ˆ
¯
ˆ
and making the translation X = X + 5 3 + 3 W , Y = Y +
4
2
¯ = W gives
ˆ
W
827 18 √
¯
¯
¯
X 2 + 5Y 2 −
+
3 W2 = 0 .
100
5

3
10

√
3−

1
4

ˆ
W,

In Cartesian coordinates, the standard form of the conic is x2 + 5y 2 =
√
827
18
3 . Figure 5.11 shows the original conic and the computed stan100 + 5
dard form conic.

5. Curves

121

2

–7

–6

–5

–4

x

1
–3

–2

–1

1

2

3

4

–1
–2
y
–3
–4

Figure 5.11

EXERCISES
5.22. Determine the standard form of the following conics:
√
√
(a) 13x2 − 10xy + 13y 2 − 12 2x + 60 2y + 72 = 0.
√
√
(b) 6x2 + 12xy + 6y 2 − 35 2x − 37 2y + 118 = 0.
√
√
(c) 11x2 − 6x 3y − 6x 3 + y 2 + 2y − 63 = 0.
5.23. Determine the absolute invariants of the standard forms. Compute
the absolute invariants for each of the conics of the previous exercise,
and verify that the computed standard form has the same invariants.
5.24. Use Exercise 5.18 to show that a conic with eccentricity > 0 is a
hyperbola if > 1, an ellipse if < 1, or a parabola if = 1.
5.25. Show that a translation leaves the values of a, b, c unaltered. These
quantities are called translational invariants.

5.6.3 Intersections of a Conic with a Line
The points of intersection of a conic and a line are found by a process of
elimination of variables to give a quadratic polynomial equation in one of the
variables. The equation is solved, and backward substitution of the solutions
is used to determine the points of intersection. The derivation of the quadratic
depends on whether the conic and the line are given in implicit or in parametric
form. The procedure is explained by means of examples.

122

Applied Geometry for Computer Graphics and CAD

Example 5.19
To ﬁnd the intersections of the conic x2 − 3xy + y 2 + 4x − 2 = 0 and the line
parametrized by (x(t), y(t)) = (2t + 1, t − 1), shown in Figure 5.12, substitute
x = 2t + 1 and y = t − 1 into the conic equation to give
(2t + 1)2 + (t − 1)2 − 3(2t + 1)(t − 1) + 4(2t + 1) − 2 = −t2 + 13t + 7 = 0 .
The solutions are approximately t = −0.518 and t = 13.518. Substituting the
values of t into the parametric equation (x(t), y(t)) = (2t + 1, t − 1) gives the
two points of intersection (−0.036, −1.518) and (28.036, 12.518).

20
15
10
5

0

10

20

30

–5

Intersection of conic x2 − 3xy + y 2 + 4x − 2 = 0 and line

Figure 5.12
(2t + 1, t − 1)

Example 5.20
3t+t2
3t
1+2t2 , 1+2t2
3t+t2
substitute x = 1+2t2

with the line

To ﬁnd the intersection of the conic (x(t), y(t)) =
2x + y + 1 = 0, shown in Figure 5.13(a),
into the equation of the line to give
2

3t + t2
1 + 2t2

+

3t
1 + 2t2

+1=

and y =

3t
1+2t2

4t2 + 9t + 1
=0.
1 + 2t2

The solutions of 4t2 + 9t + 1 = 0 are approximately t = −2.133 and t =
3t+t2
3t
−0.117. Substituting for t in 1+2t2 , 1+2t2 yields the two points of intersection
(−0.183, −0.634) and (−0.329, −0.342).

Example 5.21
To determine the intersection of the line x + y − 1 = 0 and the conic

5. Curves

123

4
1

y
2

0.5

–1

–0.5

0

0.5

1

1.5

–5

–4

–3

–2

–1 0

1

2

3

4

x
–0.5

–2

–1

–4

(a)
(a) Intersection of conic

Figure 5.13

(b)
3t+t2
3t
1+2t2 , 1+2t2

and line 2x+y+1 = 0,

and (b) intersection of conic x2 − 2xy + 3y − 7 = 0 and line x + y − 1 = 0
x2 − 2xy + 3y − 7 = 0, shown in Figure 5.13(b), substitute y = 1 − x into
the conic equation to give
x2 − 2x (1 − x) + 3 (1 − x) − 7 = 3x2 − 5x − 4 = 0 .
Solving yields x = −0.591 and x = 2.257. Substituting the solutions into
y = 1 − x yields the points (−0.591, 1.591) and (2.257, −1.257).
If both the line and the conic are expressed in parametric form, then the
line is converted to implicit form, and the method of Example 5.20 is applied.

EXERCISES
5.26. Find the points of intersection of the following conics and lines:
(a) conic 9x2 − xy + y 2 − 4x + 2y + 1 = 0, line (x(t), y(t)) = (2t −
3, −3t + 4).
(b) line x + 3y − 6 = 0, conic 3x2 − 2xy + y 2 − 5x + 6y − 16 = 0.
(c) line −2x + 5y + 7 = 0, conic (x(t), y(t)) = (3t2 − 4t + 1, 2t2 − 9t).
(d) line (t + 1, t − 1), conic x2 + 2xy + x − y − 1 = 0.
(e) line −3x − 2y + 4 = 0, conic (t2 + 1, t − 1).
5.27. The conic segment (x(t), y(t)) = (3t2 − 4t − 1, 2t2 − 9t + 10), t ∈
[−1, 4] is to be clipped by the rectangle with bottom left corner
at (0, 0) and upper right corner (20, 20) as shown in Figure 5.14.
The clipping operation removes the parts of the conic contained
outside the rectangle. Determine the parameter values where the

124

Applied Geometry for Computer Graphics and CAD

conic intersects each side of the rectangle. For each conic segment
inside the rectangle, determine the parameter interval on which it is
deﬁned. For any parametrized conic, what is the maximum number
of segments that arise following a rectangular clipping operation?
20

10

0

0

10

20

Figure 5.14

5.6.4 Parametrization of an Irreducible Conic
An irreducible conic C(x, y) = 0 can be parametrized by performing the following steps.
1. Determine a point P(p1 , p2 ) on the conic.
2. Consider the family of lines y = (x−p1 )t+p2 , parametrized by t, consisting
of all lines in the plane through P. Each parameter value t corresponds to
a line in the family.
3. Determine the points of intersection of the line y = (x − p1 )t + p2 and the
conic as follows. Substitute y = (x − p1 )t + p2 in C(x, y) = 0 to give a
quadratic polynomial (dependent on t) qt (x) = 0. The roots of qt (x) = 0
are the x–coordinates of the intersection points. Since P(p1 , p2 ) is known to
be an intersection point of the conic and every line in the family, it follows
that x = p1 is a root of qt (x). Hence x − p1 is a factor of qt (x).
4. Factorise qt (x) as (x − p1 ) (β(t)x − α(t)) for some quadratic polynomials
α(t) and β(t). Then the second root of qt (x) = 0 is x = α(t)/β(t), giving the
x-coordinate of the other point of intersection as a function of t: x = x(t).
5. Substitute x = α(t)/β(t) in y = (x − p1 )t + p2 to give y = y(t).
6. It follows that (x(t), y(t)) parametrizes the conic, since every point Q on
the conic, distinct from P, is the intersection of the conic and the line PQ
through P.
Diﬀerent choices of the point P will give rise to alternative parametrizations of
the conic.

5. Curves

125

Example 5.22
Find a parametrization of the hyperbola −2x2 − 5xy + 4y 2 + x − 5y + 15 = 0
by considering lines through the point (2, 3).
It is easily checked that (2, 3) is a point on the conic. The family of lines
through (2, 3) is given by y = t (x − 2) + 3. Substituting for y in the equation
of the conic gives
2

−2x2 − 5x (t (x − 2) + 3) + 4 (t (x − 2) + 3) + x − 5 (t (x − 2) + 3) + 15 = 0 ,
which factorizes as
(x − 2) −2x − 5tx + 4t2 x − 8t2 + 19t − 18 = 0 .
Solving for x yields x = 2 and
x=

18 − 19t + 8t2
.
−2 − 5t + 4t2

(5.11)

The solution x = 2 corresponds to the known intersection (2, 3). Using (5.11)
to substitute for x in y = t (x − 2) + 3 gives
y=t

18 − 19t + 8t2
−6 + 7t + 3t2
−2 +3=
.
−2 − 5t + 4t2
−2 − 5t + 4t2

It follows that
(x(t), y(t)) =

18 − 19t + 8t2 −6 + 7t + 3t2
,
−2 − 5t + 4t2 −2 − 5t + 4t2

is a parametrization of the conic. The values of t for which the denominator
vanishes are the solutions of 4t2 − 5t − 2 = 0, that is, t = −0.319 and t =
1.569. Therefore the curve is deﬁned on the parameter intervals (−∞, −0.319),
(−0.319, 1.569), and (1.569, ∞). Each interval corresponds to a branch or a
part of a branch of the conic.

Example 5.23
Find a parametrization of the conic C(x, y) = x2 − 2xy + 4y 2 + 2x + y + 1 = 0.
First determine a point on the conic. One way to do this is to ﬁnd an
intersection of the conic with one of the axes. If this fails one can try intersecting
with other lines parallel to one of the axes. Set y = 0 in C(x, y) = 0. Then
x2 + 2x + 1 = 0. Thus x = −1. Hence (−1, 0) is a point on the conic. Next

126

Applied Geometry for Computer Graphics and CAD

consider the family of lines y = (x + 1)t through (−1, 0). Substituting y =
(x + 1)t in C(x, y) = 0, gives
x2 − 2x(x + 1)t + 4((x + 1)t)2 + 2x + (x + 1)t + 1 = 0 ,
and factorizing gives
(x + 1) −2xt + 4t2 x + x + 1 + 4t2 + t = 0 .
Each line in the family intersects the conic in two points: (−1, 0) and one other.
Setting the second factor equal to zero, and solving for x, gives the x-coordinate
of the unknown intersection point
x=−

4t2 + t + 1
.
4t2 − 2t + 1

The y-coordinate is obtained by substituting for x in y = (x + 1)t giving
y=

−

4t2 + t + 1
4t2 − 2t + 1

+1 t=−

3t2
.
4t2 − 2t + 1

Thus the conic is deﬁned parametrically by
(x(t), y(t)) =

−

3t2
4t2 + t + 1
,− 2
2 − 2t + 1
4t
4t − 2t + 1

.

The denominator 4t2 − 2t + 1 does not vanish for real values of t, and hence
the parametrization is deﬁned for all t.

EXERCISES
5.28. Determine another parametrization of the conic x2 − 2xy + 4y 2 +
2x + y + 1 = 0 of Example 5.23 by considering lines through the
point (−2, −1).
5.29. Convert the following conics from implicit to parametric form:
(a) x2 + 2y 2 − 2xy + 2y = 0; consider lines through (0, 0).
(b) x2 − 2xy + 5y 2 − 2x + 3y + 1 = 0.
(c) x2 + 2xy − y 2 − 1 = 0.
(d) 2x2 − y 2 + 4x − 2y = 0.

5. Curves

127

5.6.5 Converting from Parametric Form to Implicit Form
Conics deﬁned by polynomial coordinate functions are easily converted to implicit form.

Example 5.24
Consider the conic deﬁned by x = 2t2 − 3t and y = t2 + t − 2. Add scalar
multiples of the equations to eliminate the quadratic terms
x − 2y

=

2t2 − 3t − 2 t2 + t − 2

= −5t + 4 .
Solving for t in terms of x and y gives t = (−x + 2y + 4)/ 5. Substituting for t
in x = 2t2 − 3t (or alternatively, in y = t2 + t − 2) gives
x=2

−x + 2y + 4
5

2

−3

−x + 2y + 4
5

.

Expanding and simplifying gives an implicit equation for the conic
x2 − 4xy − 13x + 4y 2 + y − 14 = 0 .
In general, a conic is parametrized by rational functions and the approach
indicated in Example 5.24 is tedious. A more general method follows from the
following result.

Theorem 5.25
A necessary and suﬃcient condition that two quadratics
a0 + a1 t + a2 t2

=

0, and

(5.12)

2

=

0,

(5.13)

b0 + b 1 t + b 2 t
have a common solution is
a0 b2 − a2 b0
a0 b1 − a1 b0

a1 b2 − a2 b1
a0 b2 − a2 b0

=0.

(5.14)

Proof
Suppose (5.12) and (5.13) have a common solution. Then b2 ×(5.12)−a2 ×(5.13)
yields
(5.15)
(a0 b2 − a2 b0 ) + (a1 b2 − a2 b1 ) t = 0 .

128

Applied Geometry for Computer Graphics and CAD

Similarly, b0 ×(5.12)−a0 ×(5.13) yields
((a1 b0 − a0 b1 ) + (a2 b0 − a0 b2 ) t) t = 0 .

(5.16)

Eliminating t from (5.15) and (5.16) gives
(a0 b2 − a2 b0 ) (a2 b0 − a0 b2 ) − (a1 b0 − a0 b1 ) (a1 b2 − a2 b1 ) = 0 ,
and hence (5.14). The proof of the converse is left as an exercise for the reader.

Theorem 5.26
The conic with parametrization
a0 + a1 t + a2 t2
b0 + b1 t + b2 t 2
, y=
c0 + c1 t + c2 t2
c0 + c1 t + c2 t2
has an implicit equation of the form
x=

(5.17)

(A1 x + B1 y + C1 )2 − (A0 x + B0 y + C0 )(A2 x + B2 y + C2 ) = 0
where the coeﬃcients Ai , Bi , Ci are the signed 2 × 2 minors of the matrix
⎛
⎞
a0 a1 a2
Q = ⎝ b0 b1 b2 ⎠ .
c0 c1 c2

Proof
For all t at which the conic is deﬁned, (5.17) can be multiplied through by the
denominator to give
a0 − c0 x + (−c1 x + a1 ) t + (a2 − c2 x) t2

=

0 , and

(5.18)

b0 − c0 y + (−c1 y + b1 ) t + (b2 − c2 y) t

=

0.

(5.19)

2

Applying Theorem 5.25 to (5.18) and (5.19) gives the necessary and suﬃcient
2
condition D1 − D2 D3 = 0 where
D1

=

(b0 c2 − b2 c0 ) x + (a2 c0 − a0 c2 ) y + a0 b2 − a2 b0 ,

D2

=

(b1 c2 − b2 c1 ) x + (a2 c1 − a1 c2 ) y + a1 b2 − a2 b1 , and

D3

=

(b0 c1 − b1 c0 ) x + (a1 c0 − a0 c1 ) y + a0 b1 − a1 b0 .

2
The proof is now complete since every point (x, y) of the conic satisﬁes D1 −
D2 D3 = 0, a quadratic polynomial in x and y of the form

(A1 x + B1 y + C1 )2 − (A0 x + B0 y + C0 )(A2 x + B2 y + C2 ) = 0
where the coeﬃcients Ai , Bi , Ci are the signed minors of the matrix Q.

5. Curves

129

Example 5.27
To determine an implicit equation for the conic
18 − 19t + 8t2 −6 + 7t + 3t2
,
−2 − 5t + 4t2 −2 − 5t + 4t2

(x(t), y(t)) =

.

Apply Theorem 5.26 to
⎛

⎞
18 −19 8
Q = ⎝ −6
7 3 ⎠ .
−2
−5 4
The required minors are
(7) (4) − (−5) (3) = 43 ,

A0

=

A1

= − ((−6) (4) − (−2) (3)) = 18

Alternatively, compute the
⎛
A0 A1
⎝ B0 B1
C0 C1

etc.

transpose of the adjugate matrix of Q, to give
⎞ ⎛
⎞
A2
43
18
44
B2 ⎠ = ⎝ 36
88
128 ⎠ .
C2
−113 −102 12

Therefore
(A1 x + B1 y + C1 )2 − (A0 x + B0 y + C0 )(A2 x + B2 y + C2 )
= (18x + 88y − 102)2 − (43x + 36y − 113)(44x + 128y + 12) .
Expanding and simplifying gives 784 −2x2 − 5xy + x + 4y 2 − 5y + 15 = 0.
The solution reverses the computation of Example 5.22.

Exercise 5.30
Convert the following conics from parametric to implicit form:
(a) t2 − 1, t + 2 ,
(b) 2t2 − 1, t + 3 ,
(c) 2t2 + t − 1, t2 − 3t + 3 ,
(d)
(e)

t2 +1
t , 2t
2

,
2

4t +t+1
3t
− 4t2 −2t+1 , − 4t2 −2t+1 .

Theorem 5.26 can be generalized to planar rational curves of any degree (see
[23], [13]):

130

Applied Geometry for Computer Graphics and CAD

Theorem 5.28
Let
n
i
i=0 ai t
,
n
i
i=0 ci t

(x(t), y(t)) =

n
i
i=0 bi t
n
i
i=0 ci t

be a rational curve of degree of degree n. Then an implicit form is obtained
from the Bezout resultant
D0,0 · · ·
.
.
.

D0,n
.
.
.

···

Dn,n

Dn,0
where Di,j =

k≤min(i,j)
m=i+j−k+1

=0,

(bm ck − cm bk ) x+(ak cm − am ck ) y +(am bk − ak bm ).

5.7 Conics in Space
A conic in three-dimensional space is given parametrically by
a0 + a1 t + a2 t2 b0 + b1 t + b2 t2 c0 + c1 t + c2 t2
,
,
d0 + d1 t + d2 t2 d0 + d1 t + d2 t2 d0 + d1 t + d2 t2

.

Any conic in space is contained in a plane. To verify this, suppose every point
of the conic lies in the plane Ax + By + Cz + D = 0. Then
A a0 + a1 t + a2 t2

+ B b0 + b 1 t + b 2 t 2
+ C c0 + c1 t + c2 t2 + D d0 + d1 t + d2 t2 = 0 ,

that is,
(Aa2 + Bb2 + Cc2 + Dd2 ) t2

+

(Aa1 + Bb1 + Cc1 + Dd1 ) t

+ Aa0 + Bb0 + Cc0 + Dd0 = 0 . (5.20)
Since this holds for all t (in an interval) the coeﬃcients of (5.20) must be
identically zero, implying
Aa0 + Bb0 + Cc0 + Dd0

=

0,

Aa1 + Bb1 + Cc1 + Dd1

=

0 , and

Aa2 + Bb2 + Cc2 + Dd2

=

0.

The equations can be interpreted as deﬁning three planes in the threedimensional projective space with homogeneous coordinates (A, B, C, D). Thus

5. Curves

131

the coeﬃcients A, B, C, D can be determined using the method for computing
the intersection of three planes given in Section 3.4. This yields

(A, B, C, D) =

e1
a0
a1
a2

e2
b0
b1
b2

e3
c0
c1
c2

e4
d0
d1
d2

or any multiple of the determinant.
A planar representation of the conic can be obtained by applying a viewplane coordinate mapping. The origin and the X- and Y -axis directions in the
derived plane are speciﬁed, and the viewplane coordinate matrix VC is computed. Then VC is applied to (x(t), y(t), z(t)) to give a conic in the speciﬁed
Cartesian coordinate system.

Example 5.29
Consider the conic (x(t), y(t), z(t)) =

(A, B, C, D)

3+6t−4t2
9−6t2
1−3t+t2
−1−6t+2t2 , −1−6t+2t2 , −1−6t+2t2

. Then

e1 e2 e3 e4
3
9
1 −1
=
6
0 −3 −6
−4 −6
1
2
= 54e1 − 18e2 + 36e3 + 36e4
=

(54, −18, 36, 36) .

After dividing (A, B, C, D) through by 18, the conic is found to lie in the plane
3x − y + 2z + 2 = 0. This can be veriﬁed by substituting x = x(t), y = y(t), z =
z(t) into the equation of the plane,
3

3 + 6t − 4t2
−1 − 6t + 2t2

−

9 − 6t2
−1 − 6t + 2t2

+2

1 − 3t + t2
−1 − 6t + 2t2

+2=0.

Multiplying through by the denominator gives
3 3 + 6t − 4t2 − 9 − 6t2 + 2 1 − 3t + t2 + 2 −1 − 6t + 2t2 = 0 .
Expanding the brackets yields that the left-hand side of the equation is identically zero, and hence the conic lies in the derived plane.

132

Applied Geometry for Computer Graphics and CAD

Let the plane have origin and axes as speciﬁed in Example 4.11. Applying
the viewing coordinate mapping matrix VC to the conic gives
3 + 6t − 4t2 9 − 6t2 1 − 3t + t2
⎛
⎞
0.385
0.360 −0.333
⎜ 0.642
0.600
0.111 ⎟
⎟
×⎜
⎝ −0.706
0.960 −0.222 ⎠
0.449 −1.200
0.778
=

5.778 + 1.734t − 5.2t2

8.64 + 6.48t − 6.48t2

The planar representation of the conic is
The vector form for the conic in space is
O+

−1 − 6t + 2t2

5.778 + 1.734t − 5.2t2
−1 − 6t + 2t2

X+

−1 − 6t + 2t2

.

5.778+1.734t−5.2t2 8.64+6.48t−6.48t2
,
−1−6t+2t2
−1−6t+2t2

8.64 + 6.48t − 6.48t2
−1 − 6t + 2t2

.

Y,

where O, X and Y are as given in Example 4.11.

Exercise 5.31
By applying Theorem 5.6, show that the conic
(x(t), y(t), z(t)) =

9 + 3t − 4t2
4t − 3t2
1 + t2
,
,
2 3 + 4t + 4t2 3 + 4t + 4t2
3 + 4t + 4t

lies in the plane −16x + 55y + 273z − 43 = 0.

5.8 Applications of Conics
Example 5.30 (Headlights and Radar)
Parabolas have the special property that rays of light, emanating from a light
source positioned at the focus, are reﬂected in the parabola along parallel lines,
as illustrated in Figure 5.15. This property is used in the design of car headlight
reﬂectors. A reﬂector has the shape of a paraboloid, that is, a surface obtained
by rotating a parabola about its axis of symmetry. If a headlight bulb is positioned at the focus of the parabola then it produces a beam of light consisting
of the reﬂected parallel rays of light.
The same property is used in the design of radar or satellite dishes. Signals
from a distant point travel along (nearly) parallel rays. Signals which reach a
paraboloid shaped dish are reﬂected along linear paths which pass through the
focus. The satellite receiver is positioned at the focus in order to obtain the
best reception of the signals.

5. Curves

133

Figure 5.15

EXERCISES
5.32. Show that a ray of light emanating from the focus F(0, m) of the
parabola y = 4mx2 is reﬂected parallel to the axis of symmetry, that
is the y-axis, as follows.
(a) Determine the tangent vector/line at a point P(x, y) on the
parabola.
(b) Determine the angle α between the line FP and the tangent.
(c) Show that the angle between the tangent and y-axis is also α
and deduce that the reﬂection of the ray is parallel to the y-axis.
5.33. Show that all rays of light emanating from one focus of an ellipse are
reﬂected in lines containing the other focus. The reader may wish to
contemplate an elliptical snooker table with the cue ball positioned
at one focus and a single pocket positioned at the other focus. If the
ball is struck (without spin) with suﬃcient strength then the ball
will hit the elliptical cushion and rebound along a line containing
the pocket.

Example 5.31 (Suspension Bridges)
Suspension bridges are designed so that a cable hanging from two pillars or
towers carries the weight of the bridge uniformly along the cable. The resulting
shape of the cable is a parabola. Suppose the pillars are 1, 410 metres apart (the
span of the Humber Bridge, Hull, UK) and the height of the pillars is h metres.
Let the origin be the lowest point of the parabola, and let the horizontal plane

134

Applied Geometry for Computer Graphics and CAD

of the bridge be the x-axis. Then the parabola is symmetrical about the y-axis
and passes through the points (−705, h), (705, h), (0, 0). Let the parabola be
y = ax2 + bx + c. Then, clearly c = 0, and
2

h = a (−705) + b (−705) , and
2

h = a (705) + b (705) .
2

h
Thus a = h/ (705) and b = 0 giving the parabola y = 7052 x2 .
In reality, one must account for the earth’s curvature when modelling large
structures. So in the example of the bridge the distance between the base of
the pillars is 1, 410 metres, but the distance between the tops of the pillars is
greater.

Example 5.32 (Radar)
Discovered as recently as the 1940s, the method known as hyperbolic navigation has had a considerable inﬂuence on sea and air navigation. A receiver
records the radio signals transmitted from two ﬁxed stations. Assuming that
the velocity v of radio energy is constant, the distances travelled by radio energy are proportional to the time taken. Suppose the times taken to receive
the signals, sent at the same time, from each station are t1 and t2 . Then the
distance from each station is vt1 and vt2 . Hence the diﬀerence in distance of
the receiver from the stations is v(t1 − t2 ). The locus of all possible positions
of the receiver relative to the ﬁxed stations is a branch of a hyperbola with the
stations positioned at the foci (see Exercise 5.34). There are two points on the
hyperbola a given distance vt1 from the ﬁrst station and it remains to decide
which is the correct location. Commercial hyperbolic navigation systems include the Decca Navigation System, LORAN, Omega, and Global Positioning
Systems (GPS).

Exercise 5.34
Let F1 and F2 be ﬁxed points, and let d1 and d2 be the distances of a
point P from F1 and F2 respectively. Show that the locus of all points
P such that d1 − d2 is constant is a hyperbola.

6

B´zier Curves I
e

6.1 Introduction
Two of the most important mathematical representations of curves and surfaces used in computer graphics and computer-aided design are the B´zier and
e
B-spline forms. The original development of B´zier curves took place in the aue
tomobile industry during the period 1958–60 by two Frenchmen, Pierre B´zier
e
at Renault and Paul de Casteljau at Citr¨en. The development of B-splines
o
followed the publication in 1946 of a landmark paper [22] on splines. B-splines
will be discussed in detail in Chapter 8. Further discussion of the historical
development of B´zier curves may be found in [2], [6] and [10].
e
B´zier curves are polynomial curves (see Deﬁnition 5.1) which have a pare
ticular mathematical representation. Their popularity is due to the fact that
they possess a number of mathematical properties which facilitate their manipulation and analysis, and yet no mathematical knowledge is required in order
to use the curves. A B´zier curve of degree n is speciﬁed by a sequence of n + 1
e
points which are called the control points. The polygon obtained by joining the
control points with line segments in the prescribed order is called the control
polygon.
Control of the shape of a B´zier curve is facilitated by the fact that the
e
control polygon reﬂects the basic shape of the curve. In many drawing and
CAD packages the control points of a B´zier curve may be speciﬁed by clicking
e
with a mouse at the desired locations within a document window. The control
points are visible on the computer screen, and modiﬁcation of a control point

135

136

Applied Geometry for Computer Graphics and CAD

is executed with a simple click and drag operation of the mouse. As an aid to
design, many packages display the changing curve as a control point is modiﬁed.

6.2 B´zier Curves of Low Degree
e
6.2.1 Linear B´zier Curves
e
A linear B´zier curve is a line segment joining two control points b0 (p0 , q0 )
e
and b1 (p1 , q1 ), and parametrized by
(x(t), y(t)) = (1 − t)(p0 , q0 ) + t(p1 , q1 ),

for t ∈ [0, 1] ,

so that x(t) = (1 − t)p0 + tp1 , and y(t) = (1 − t)q0 + tq1 . Letting B(t) =
(x(t), y(t)), the curve can be written in the vector form
B(t) = (1 − t)b0 + tb1 .

(6.1)

The curve is deﬁned on the interval [0, 1], so the starting point of the curve
e
is B(0) = b0 and the ﬁnishing point is B(1) = b1 , that is, the B´zier curve
interpolates the ﬁrst and last control points.

Example 6.1
The B´zier form for the linear segment passing through points b0 (1, 2) and
e
b1 (3, 4) is B(t) = (1 − t)b0 + tb1 = (1 − t)(1, 2) + t(3, 4). Hence x(t) = (1 −
t) + 3t = 1 + 2t and y(t) = 2(1 − t) + 4t = 2 + 2t.

6.2.2 Quadratic B´zier Curves
e
Suppose three control points b0 (p0 , q0 ), b1 (p1 , q1 ), and b2 (p2 , q2 ) are speciﬁed.
Then the quadratic B´zier curve is deﬁned to be
e
B(t) = (1 − t)2 (p0 , q0 ) + 2(1 − t)t(p1 , q1 ) + t2 (p2 , q2 ),

for t ∈ [0, 1] .

The starting point of the curve is B(0) = b0 and the ﬁnishing point is B(1) =
b2 . The curve can be expressed in the parametric form (x(t), y(t)) where
x(t)

=

(1 − t)2 p0 + 2(1 − t)tp1 + t2 p2 , and

y(t)

=

(1 − t)2 q0 + 2(1 − t)tq1 + t2 q2 .

The triangle b0 b1 b2 obtained by joining the control points with line segments,
in their prescribed order, is called the control polygon.

6. B´zier Curves I
e

137

Example 6.2
The parametric form of the quadratic B´zier curve B(t) with control points
e
b0 (1, 2), b1 (4, −1), and b2 (8, 6) is (x(t), y(t)) where
x(t)

=

(1 − t)2 (1) + 2(1 − t)t(4) + t2 (8) = 1 + 6t + t2 , and

y(t)

=

(1 − t)2 (2) + 2(1 − t)t(−1) + t2 (6) = 2 − 6t + 10t2 .

The point B(0.5) is obtained by substituting t = 0.5 into the equations to give
x(0.5) = 4.25 and y(0.5) = 1.5, that is, B(0.5) = (4.25, 1.5). Alternatively, the
coordinates of the point B(0.5) can be evaluated using the vector form of the
curve
=

(1 − 0.5)2 (1, 2) + 2(1 − 0.5)(0.5)(4, −1) + (0.5)2 (8, 6)

=

B(t)

0.25(1, 2) + 0.5(4, −1) + 0.25(8, 6) = (4.25, 1.5) .

A plot of the curve is obtained by evaluating B(t) at a sequence of parameter
values in the interval [0, 1]. The curve and its control polygon are illustrated in
Figure 6.1.
6
5
4
3
2
1
0

0

1

2

3

4

5

6

7

8

-1

Figure 6.1
and b2 (8, 6)

Quadratic B´zier curve with control points b0 (1, 2), b1 (4, −1),
e

6.2.3 Cubic B´zier Curves
e
Suppose four control points b0 , b1 , b2 , and b3 are speciﬁed, then the cubic
B´zier curve is deﬁned to be
e
B(t) = (1 − t)3 b0 + 3(1 − t)2 tb1 + 3(1 − t)t2 b2 + t3 b3 ,

t ∈ [0, 1] .

(6.2)

As in the quadratic case, the polygon obtained by joining the control points in
the speciﬁed order is called the control polygon.

138

Applied Geometry for Computer Graphics and CAD

Cubic B´zier curves provide a greater range of shapes than quadratic B´zier
e
e
curves, since they can exhibit loops as shown in Figure 6.2(a), sharp corners
(called cusps) as shown in Figure 6.2(b), and inﬂections (see Exercise 6.12).
4

4

2

2

00

2

(a)

4

6

00

2

4

6

(b)

Figure 6.2
(a) Cubic B´zier curve containing a loop, and (b) cubic B´zier
e
e
curve containing a cusp
A further geometric property is obtained by determining the tangent vector
to the cubic B´zier curve at each of its endpoints. The derivative of Equation
e
(6.2) is
B (t) = −3(1 − t)2 b0 + 3(1 − 4t + 3t2 )b1 + 3t(2 − 3t)b2 + 3t2 b3 ,

t ∈ [0, 1] .

Thus B (0) = 3(b1 −b0 ). This implies that the tangent vector of B(t) at b0 has
−−
−→
the same direction as the vector b0 b1 joining control points b0 and b1 . Further,
−−
−→
the magnitude of the tangent vector is 3 times the length of b0 b1 . Likewise,
B (1) = 3(b3 − b2 ). Hence the tangent vector of B(t) at b3 has direction equal
−−
−→
to the direction of the line segment b2 b3 joining the last pair of control points.
Therefore, the choice of the ﬁrst two control points determines the starting
point and the starting direction of the B´zier curve, and the choice of the last
e
two control points determines the ﬁnishing point and direction. The shape of
the curve is controlled by the user’s choice of the control points. The geometric
property of the starting and ﬁnishing directions of B´zier curves is referred to
e
as the endpoint tangent property.
Two further B´zier cubics, together with their associated control polygons,
e
are shown in Figure 6.3. Note in particular the endpoint interpolation and
tangent properties.

EXERCISES
6.1. Write down the parametric form of the quadratic B´zier curve
e
B(t) with control points b0 (−1, 5), b1 (2, 0), and b2 (4, 6). Evaluate
B(0.75) and B(1.25).

6. B´zier Curves I
e

139

3
2
1
00

2

4

6

-1

Figure 6.3

Cubic B´zier curves with their associated control polygons
e

6.2. Show that a quadratic B´zier curve is a parabola.
e
6.3. Let b0 (1, 0), b1 (2, 3), b2 (5, 4), and b3 (2, 1) be the control points of
a cubic B´zier curve B(t). Determine B(t), B(0), B(0.5), and B(1).
e
6.4. Show that a cubic B´zier curve satisﬁes the endpoint interpolation
e
property: B(0) = b0 and B(1) = b3 .
6.5. Determine the tangent vectors at the endpoints of (a) a linear B´zier
e
curve, and (b) a quadratic B´zier curve.
e
6.6. Let b0 (1, 3), b1 (4, 6), b2 (5, 1), and b3 (2, 1) be the control points of
a cubic B´zier curve B(t). Determine the end tangent vectors. Make
e
a sketch of the curve together with its control polygon (without the
assistance of a computer or graphic calculator).
e
6.7. Whenever the control points b0 , b1 , b2 , and b3 of a cubic B´zier
curve are collinear, the curve is a straight line. In particular, let
b1 = (2b0 + b3 )/3, and b2 = (b0 + 2b3 )/3. Show that the cubic
B´zier curve simpliﬁes to the linear B´zier curve (1 − t)b0 + tb3 .
e
e
6.8. Let the control points of a cubic B´zier curve satisfy b1 = (b0 +
e
2b∗ )/3 and b2 = (b3 +2b∗ )/3 for some point b∗ . Show that the cubic
B´zier curve simpliﬁes to the quadratic B´zier curve (1 − t)2 b0 +
e
e
2t(1 − t)b∗ + t2 b3 .
6.9. Suggest plausible control points for the cubic B´zier curve illustrated
e
in Figure 6.4(a).
6.10. Figure 6.4(b) shows two cubic B´zier curves. Write down the control
e
points of a third cubic curve such that (a) the curves join at the
points indicated in the ﬁgure to form a single continuous curve, and
(b) at each point where two curves join the tangent vectors to the
curves have the same direction.
6.11. Write a program or use a computer package to draw quadratic and
cubic B´zier curves. Construct examples of B´zier curves and adjust
e
e

140

Applied Geometry for Computer Graphics and CAD

7
6
5
4
3
2
1
0

0 1 2 3 4 5 6 7 8 9 10

10
9
8
7
6
5
4
3
2
1
0

(a)

0 1 2 3 4 5 6 7 8 9 10

(b)
Figure 6.4

the control points to develop a “feel” for the relationship between
the control polygon and the curve.
6.12. Plot a cubic B´zier curve which has a point of inﬂection. (A point
e
of inﬂection is a point at which the direction of the curve changes
from being convex to concave, or vice versa, to give a curve with an
“S”-shape.) Hint: Choose an “S”-shaped control polygon.

6.3 The Eﬀect of Adjusting a Control Point
Consider a cubic B´zier curve with control points b0 , b1 , b2 , and b3 . The shape
e
of the curve can be changed by adjusting the position of one or more control
points. If b0 or b3 are adjusted, then the endpoint interpolation property implies that the starting or ﬁnishing point of the curve will change. If b1 or b2
are adjusted, then the start and ﬁnishing points remain unchanged, but the
start or ﬁnishing directions may change. It is possible to change control points
b1 or b2 without aﬀecting the end directions. If b1 is adjusted to a new point
on the line through b0 and the original position of b1 , then the magnitude
of the tangent vector will change but its direction will not. Hence the initial
direction of the curve remains unchanged. The adjustment of a control point is
illustrated in Figure 6.5. Likewise, if b2 is adjusted to a new point on the line
through b3 and the original position of b2 , then the ﬁnal direction of the curve
will not change. However, the adjustment of any control point always changes
the shape of the entire curve. The eﬀect of adjusting a control point of a general
B´zier curve, which will be introduced in Section 6.4, is similar.
e

6. B´zier Curves I
e

141

Figure 6.5
Adjustment of a control point so that the starting direction
of the curve is (a) unchanged, and (b) changed

6.4 The General B´zier Curve
e
Given n + 1 control points b0 , b1 , . . . , bn the B´zier curve of degree n is deﬁned
e
to be
n

B(t) =

bi Bi,n (t) ,

(6.3)

i=0

where
Bi,n (t) =

n!
(n−i)!i! (1

− t)n−i ti ,

0,

if 0 ≤ i ≤ n
otherwise

(6.4)

are called the Bernstein polynomials or Bernstein basis functions of degree
n. To distinguish B´zier curves from “rational” B´zier curves which will be
e
e
introduced in Section 7.5, they are often referred to as integral B´zier curves.
e
The original application of Bernstein polynomials is explored in Exercise 6.17.
The polygon formed by joining the control points b0 , . . . , bn in the speciﬁed
order is called the B´zier control polygon. It is a straightforward exercise to show
e
that the cases n = 1, n = 2, and n = 3 correspond to the linear, quadratic,
and cubic B´zier curves encountered in the previous sections. The Bernstein
e
polynomials of degrees 2 and 3 are illustrated in Figure 6.6.
1

1

0.5

0.5

00

Figure 6.6

0.5

1

00

0.5

1

Bernstein polynomials of (a) degree 2, and (b) degree 3

142

n
i
n
n

Applied Geometry for Computer Graphics and CAD

n!
The quantities (n−i)!i! are called binomial coeﬃcients and are denoted by
n!
or n Ci . Recall the convention that 0! = 1, and therefore n = n!0! = 1 and
0
n!
= 0!n! = 1.

Example 6.3
For a B´zier cubic n = 3, and B0,3 (t) = (1 − t)3 , B1,3 (t) = 3(1 − t)2 t, B2,3 (t) =
e
3(1 − t)t2 , and B3,3 (t) = t3 .

Example 6.4
The Bernstein polynomials of degree 4 are B0,4 (t) = (1−t)4 , B1,4 (t) = 4(1−t)3 t,
B2,4 (t) = 6(1 − t)2 t2 , B3,4 (t) = 4(1 − t)t3 , and B4,4 (t) = t4 , as illustrated in
Figure 6.7.
1

0.5

00

Figure 6.7

0.5

1

Bernstein polynomials of degree 4

The binomial coeﬃcients arise in the result known as the binomial theorem.

Theorem 6.5 (Binomial)
For any natural number n, and any real numbers x and y
n

(x + y)n =
i=0

n n−i i
x y .
i

Example 6.6
Expand (x + y)3 using the binomial theorem. Then
(x + y)3

=

3 3
3 2
3
3 3
x +
x y+
xy 2 +
y
0
1
2
3

= x3 + 3x2 y + 3xy 2 + y 3 .

6. B´zier Curves I
e

143

Example 6.7
3

To expand ((1 − t) + t) using the binomial theorem, let x = 1 − t and y = t,
and apply the result obtained in Example 6.6
3

((1 − t) + t) = (1 − t)3 + 3(1 − t)2 t + 3(1 − t)t2 + t3 .
It follows that B0,3 (t) + B1,3 (t) + B2,3 (t) + B3,3 (t) = 1.

EXERCISES
4

6.13. By expanding ((1 − t) + t) , show that the Bernstein basis functions
of degree 4 sum to 1.
6.14. Determine the Bernstein polynomials of degree 5.
6.15. Show that

n
i

6.16. Show that

1
0

+

n
i+1

=

n+1
i+1

.

Bi,3 (t) dt = 1 , for i = 0, . . . , 3.
4

6.17. Bernstein polynomials ﬁrst appeared in a proof of the Weierstrass
theorem which states that any continuous function can be approximated by a polynomial function to within any speciﬁed tolerance.
The Bernstein approximation B(t) of degree n of a function f (t)
over an interval [0, 1] is deﬁned to be
n

f (ti )Bi,n (t) ,

B(t) =
i=0

i
where ti = n . The proof of the theorem states that for any tolerance
ε there is a choice of n for which

|f (t) − B(t)| < ε ,
that is, the approximation deviates from the actual function by less
than the tolerance ε. The main limitation of the approximation is
that for a given ε, the choice of n is not easily determined.
(a) Plot the Bernstein approximations of degree 5, 9, and 13 for the
function f (t) = sin(πt) over the interval [0, 1].
(b) For each approximation, plot the error function
err(t) = |sin(πt) − B(t)| ,
and hence determine the maximum absolute error of the approximations.

144

Applied Geometry for Computer Graphics and CAD

(c) Make a guess at the value of n for which the Bernstein approximation has error less than 0.01 over the interval [0, 1].

6.5 Properties of the Bernstein Polynomials
The Bernstein polynomials have a number of important properties which give
rise to properties of B´zier curves.
e
Partition of Unity: The Bernstein polynomials of degree n sum to one
n

Bi,n (t) = 1,

t ∈ [0, 1] .

i=0

Positivity: The Bernstein polynomials are non-negative on the interval [0, 1],
Bi,n (t) ≥ 0,

t ∈ [0, 1] .

Symmetry:
Bn−i,n (t) = Bi,n (1 − t) , for i = 0, . . . , n .
Therefore, the graph of Bn−i,n (t) is a reﬂection of the graph of Bi,n (1 −
t). This can be observed in Figures 6.6 and 6.7 which show plots of the
quadratic, cubic, and quartic Bernstein polynomials.
Recursion: The Bernstein polynomials of degree n can be expressed in terms
of the polynomials of degree n − 1
Bi,n (t) = (1 − t)Bi,n−1 (t) + tBi−1,n−1 (t) ,
for i = 0, . . . , n, where B−1,n−1 (t) = 0 and Bn,n−1 (t) = 0.
The partition of unity and positivity properties give rise to two important
properties of B´zier curves, namely, invariance under transformations and the
e
convex hull property. These properties are derived in Section 6.7. As a consequence of the symmetry property, a symmetrical control polygon gives rise
to a symmetrical curve. The recursion property gives rise to the de Casteljau
algorithm described in Section 6.8.

Proof
(Partition of unity) Applying the binomial theorem to ((1 − t) + t)n = 1 gives
n

((1 − t) + t)n =
i=0

n
n−i i
t =
(1 − t)
i

n

Bi,n (t) = 1 .
i=0

6. B´zier Curves I
e

145

(Recursion) The recursion property is proved as follows. By deﬁnition,
Bi,n−1 (t)
Bi−1,n−1 (t)

n−1
(1 − t)n−1−i ti , and
i
n−1
(1 − t)n−i ti−1 .
i−1

=
=

For i = 0,
B0,n (t) = (1 − t)n = (1 − t)B0,n−1 (t) + tB−1,n−1 (t)
since B−1,n−1 (t) = 0. Similarly, for i = n,
Bn,n (t) = tn = (1 − t)Bn,n−1 (t) + tBn−1,n−1 (t)
since Bn,n−1 (t) = 0. For 1 ≤ i ≤ n − 1,
(1 − t)Bi,n−1 (t) + tBi−1,n−1 (t) =
=

n−1
n−1
(1 − t)n−i ti +
(1 − t)n−i ti
i
i−1
n−1
n−1
+
(1 − t)n−i ti .
i
i−1

Applying Exercise 6.15,
(1 − t)Bi,n−1 (t) + tBi−1,n−1 (t) =

n
(1 − t)n−i ti = Bi,n (t) .
i

The proofs of the properties of positivity and symmetry are left as exercises.

EXERCISES
6.18. Prove the positivity property.
6.19. Prove the symmetry property.
n

i
6.20. Show that i=0 n Bi,n (t) = t. Deduce the linear precision property
i
i
that if bi = 1 − n a + n b for some ﬁxed points a and b (so the
control points are evenly distributed along the line segment ab), then
n
the resulting B´zier curve B(t) = i=0 bi Bi,n (t) is the straight line
e
segment ab.

146

Applied Geometry for Computer Graphics and CAD

6.21. Let B(t) be a B´zier curve of degree n with control points b0 , . . . , bn .
e
Let C(t) be the B´zier curve of degree n + 1 with control points c0 =
e
b0 , cn+1 = bn , and ci = (1 − αi )bi + αi bi−1 where αi = i/ (n + 1),
for i = 1, . . . , n. Show that C(t) = B(t) for all t ∈ [0, 1]. The process
of representing a B´zier curve of degree n by a B´zier curve of higher
e
e
degree is called degree raising. Degree-raising algorithms are used to
increase the number of control points to give greater freedom for
designing curve shapes.

6.6 Convex Hulls
An important and useful property of B´zier curves is that of the convex hull
e
property (CHP) which will be derived in Section 6.7. The CHP and the de
Casteljau algorithm, derived in Section 6.8, lead naturally to geometric algorithms for rendering a B´zier curve, and for ﬁnding the points of intersection
e
of two B´zier curves. In order to describe the CHP it is necessary to deﬁne the
e
convex hull of a set of points. Given a set of points X = {x0 , x1 , . . . , xn } the
convex hull of X, denoted by CH{X}, is deﬁned to be the set of points
n

CH{X} =

a0 x0 + · · · + an xn

ai = 1 , ai ≥ 0

.

(6.5)

i=0

For points in a plane, the convex hull CH{X} may be visualized as follows.
Imagine an “elastic band” placed around the entire set of points. The band is
permitted to shrink around the points to form a polygon, the vertices of which
are a subset of the original set of points. The region bounded by the polygon
is the convex hull of the set of points.
The deﬁnition of the convex hull is valid for points in space. The intuitive elastic band is replaced by an “elastic balloon” which is permitted to
shrink around the points to form a polyhedron. The convex hull is the region
bounded by the polyhedron. Several examples of convex hulls are illustrated in
Figure 6.8.

Figure 6.8

6. B´zier Curves I
e

147

6.7 Properties of B´zier Curves
e
Theorem 6.8
A B´zier curve B(t) of degree n with control points b0 , ..., bn satisﬁes the
e
following properties.
Endpoint Interpolation Property: B(0) = b0 and B(1) = bn .
Endpoint Tangent Property:
B (0) = n (b1 − b0 )

and B (1) = n (bn − bn−1 ) .

Convex Hull Property (CHP): For all t ∈ [0, 1], B(t) ∈ CH{b0 , ..., bn }.
Thus every point of a B´zier curve lies inside the convex hull of its deﬁning
e
control points. The convex hull of the control points is often referred to as
the convex hull of the B´zier curve.
e
Invariance under Aﬃne Transformations: Let T be an (aﬃne) transformation (for example, a rotation, reﬂection, translation, or scaling). Then
n

T

n

bi Bi,n (t)
i=0

T (bi ) Bi,n (t) .

=
i=0

Variation Diminishing Property (VDP): For a planar B´zier curve B(t),
e
the VDP states that the number of intersections of a given line with B(t)
is less than or equal to the number of intersections of that line with the
control polygon.

Proof
The proof of the endpoint interpolation property is Exercise 6.23. The endpoint
tangent property follows from Theorem 7.3 which will be proved later.
(Convex Hull Property) From the deﬁnition of the convex hull expressed in
Equation (6.5) it is suﬃcient to show that every point B(t) on a B´zier curve
e
n
has the form a0 b0 + · · · + an bn for some constants ai satisfying i=0 ai = 1.
Let ai = Bi,n (t), then positivity implies ai ≥ 0, the partition of unity implies
n
that i=0 ai = 1, and the proof is complete. Figure 6.9 illustrates the CHP for
a cubic B´zier curve.
e
(Aﬃne Invariance) Let an aﬃne transformation T be given by
(x , y ) = (ax + by + c, dx + ey + f ) ,

148

Applied Geometry for Computer Graphics and CAD

3

2

1

00

1

2

3

Convex hull property for a cubic B´zier curve
e

Figure 6.9

and let a B´zier curve of degree n have control points bi (pi , qi ) for i = 0, . . . , n.
e
Then
n

n

pi Bi,n (t),

B(t) = (x(t), y(t)) =
i=0

qi Bi,n (t)

.

i=0

Applying the transformation yields
n

T(B(t))

=

n

a

pi Bi,n (t) + b
i=0
n

d

pi Bi,n (t) + e
i=0

Then, by partition of unity,

n
i=0

i=0
n

qi Bi,n (t) + c
i=0
n

pi Bi,n (t) + e

qi Bi,n (t) + f
n

i=0
n

(dpi + eqi + f )Bi,n (t)
i=0

(api + bqi + c, dpi + eqi + f )Bi,n (t)
i=0
n

T(bi )Bi,n (t) .

=
i=0

Bi,n (t)
i=0

(api + bqi + c)Bi,n (t),

=

Bi,n (t),
i=0
n

i=0

n

=

n

pi Bi,n (t) + b

i=0

.

Bi,n (t) = 1, and
n

a

d

qi Bi,n (t) + f
i=0

n

T(B(t)) =

qi Bi,n (t) + c,
i=0
n

6. B´zier Curves I
e

149

Example 6.9
Consider a cubic B´zier curve with vertices b0 (1, 0), b1 (2, 3), b2 (5, 4), and
e
b3 (2, 1). To apply a rotation through an angle π/4 about the origin in the
anticlockwise direction to the curve, it is suﬃcient to apply the rotation matrix
Rot(π/4) to the homogeneous coordinates of the control points:
⎛
⎞
⎛
⎞
⎛
⎞
1 0 1
0.707 0.707 1.0
cos π/4 sin π/4 0
⎜ 2 3 1 ⎟
⎜
⎟
⎜
⎟ ⎝ − sin π/4 cos π/4 0 ⎠ = ⎜ −0.707 3.536 1.0 ⎟ .
⎝ 5 4 1 ⎠
⎝ 0.707 6.364 1.0 ⎠
0
0 1
2 1 1
0.707 2.121 1.0
The control points of the rotated curve are b0 (0.707, 0.707), b1 (−0.707, 3.536),
b2 (0.707, 6.364), and b3 (0.707, 2.121). The curve and its rotated image are
illustrated in Figure 6.10.
6
5
4
3
2
1
0

Figure 6.10

1

2

3

4

5

Application of a rotation to a cubic B´zier curve
e

Figure 6.11 illustrates two lines intersecting a B´zier curve and its control
e
polygon. The upper line intersects the polygon in two points but does not
intersect the curve. The lower line intersects both the polygon and the curve
in two points. In both cases, the number of intersections with the given line is
equal to or greater than the number of intersections of the line with the curve.
Thus the variation diminishing property is satisﬁed. The proof of the variation
diminishing property is beyond the scope of this book, and the reader is referred
to [15].

150

Applied Geometry for Computer Graphics and CAD

2

1

00

Figure 6.11

1

2

Variation diminishing property

EXERCISES
6.22. Plot the cubic B´zier curve deﬁned by control points b0 (0, 1),
e
b1 (2, 5), b2 (4, 6), and b3 (8, 1). On the same plot, draw the control
polygon. Observe that the resulting curve satisﬁes the convex hull
property. Next plot the B´zier cubic with control points b0 (1, 1),
e
b1 (3.4, 1.8), b2 (6, 6.5), and b3 (9, 1). Does the newly displayed curve
violate the convex hull property? Explain.
6.23. Prove the endpoint interpolation property for the general B´zier
e
curve: B(0) = b0 and B(1) = bn .
6.24. Prove that when the control points are collinear, the resulting B´zier
e
curve is a straight line segment.
6.25. Determine the control points of the image of the B´zier curve with
e
control points b0 (0, 0), b1 (2, 1), b2 (3, −1), and b3 (1, −2) when the
following transformations have been applied
(a) a translation of 3 units in the x-direction and 4 units in the
y-direction,
(b) a rotation about the origin through an angle of π/2 radians in
an anti-clockwise direction,
(c) a reﬂection in the line y = x.
For each transformation plot the image curve and its control polygon.
6.26. The basis functions B0,3 (t) = (1 − t)2 , B1,3 (t) = 2t(1 − t)2 , B2,3 (t) =
2t2 (1 − t), B0,3 (t) = t2 give rise to a representation for cubic curves
3
B(t) = i=0 bi Bi,3 (t).
(a) Show that if b1 = b2 then B(t) is a quadratic curve with control
polygon b0 , b1 and b3 .

6. B´zier Curves I
e

151

(b) Show that the representation satisﬁes end interpolation and
tangent properties similar to B´zier curves.
e

6.8 The de Casteljau Algorithm
The de Casteljau algorithm provides a method for evaluating the point on a
B´zier curve corresponding to the parameter value t ∈ [0, 1]. In Section 6.9 it
e
will be shown that the same algorithm can be used to divide a curve into two
curve segments. For the case of a cubic B´zier curve with control points b0 ,
e
b1, b2 , and b3 , and for a speciﬁed parameter value t ∈ [0, 1], the de Casteljau
algorithm is expressed by the recursive formula
b0 = bi ,
i
bj = (1 − t)bj−1 + tbj−1 ,
i
i
i+1
for j = 1, 2, 3 and i = 0, . . . , 3 − j. The formula generates a triangular set of
values (6.6) for which b3 = B(t) for the speciﬁed value of t:
0
b0
0

b0
1

b0
2

b1
0

b1
1

b1
2

b2
0

b0
3

b2
1

b3
0

(6.6)

Example 6.10
A cubic B´zier curve has control points b0 (1.0, 1.0), b1 (2.0, 7.0), b2 (8.0, 6.0),
e
and b3 (12.0, 2.0). The point B(0.25) is determined by applying the de Casteljau
algorithm with t = 0.25. Then
b1
0

=

b1
1

=

b1
2
b2
0

=
=

3
1
4 (1.0, 1.0) + 4 (2.0, 7.0) = (1.25, 2.5),
3
1
4 (2.0, 7.0) + 4 (8.0, 6.0) = (3.5, 6.75),
3
1
4 (8.0, 6.0) + 4 (12.0, 2.0) = (9.0, 5.0),
3
1
4 (1.25, 2.5) + 4 (3.5, 6.75) = (1.8125, 3.5625),

etc.

152

Applied Geometry for Computer Graphics and CAD

The algorithm gives the following table of points:
(1.0, 1.0)
(2.0, 7.0)
(8.0, 6.0)
(12.0, 2.0)
3
3
3
↓ 1
↓ 1
↓ 1
4
4
4
4
4
4
(1.25, 2.5)
(3.5, 6.75)
(9.0, 5.0)
3
3
1
1
4 ↓
4
4 ↓
4
(1.8125, 3.5625)
(4.875, 6.3125)
3
1
4 ↓
4
(2.578, 4.25)
The algorithm yields B(0.25) = (2.578, 4.25). Geometrically, each step of the
algorithm is a linear interpolation of the control polygon as illustrated in Figure 6.12.

b1

7

1

b1
b2

6

2

b1

b1
2

5
3

4

b0

3

b1
0

2
0

b

b3

2
1
0

b0
0

1

Figure 6.12

2

3

4

5

6

7

8

9

10 11

12

The de Casteljau algorithm with t = 0.25

Theorem 6.11
Let a B´zier curve of degree n be given by control points b0 , . . . , bn , and let
e
t ∈ [0, 1] be any parameter value. Then B(t) = bn , where b0 = bi , and
0
i
bj = bj−1 (1 − t) + bj−1 t ,
i
i
i+1
for j = 1, . . . , n, and i = 0, . . . , n − j.

Proof
The de Casteljau algorithm follows from the recursion property of the Bernstein
polynomials
(6.7)
Bi,n (t) = (1 − t)Bi,n−1 (t) + tBi−1,n−1 (t) .

6. B´zier Curves I
e

153

Then
n

B(t)

=

n

bi ((1 − t)Bi,n−1 (t) + tBi−1,n−1 (t))

bi Bi,n (t) =
i=0
n

i=0
n

bi (1 − t)Bi,n−1 (t) +

=
i=0

bi tBi−1,n−1 (t) .
i=0

Since Bn,n−1 (t) = 0, and B−1,n−1 (t) = 0 it follows that
n−1

n

bi (1 − t)Bi,n−1 (t) +

B(t) =
i=0

bi tBi−1,n−1 (t) .
i=1

Next renumber the second summation by replacing i by i + 1,
n−1

n−1

bi (1 − t)Bi,n−1 (t) +

B(t) =
i=0

bi+1 tBi,n−1 (t)
i=0

n−1

(bi (1 − t) + bi+1 t) Bi,n−1 (t) .

=
i=0

Set b1 = bi (1 − t) + bi+1 t = b0 (1 − t) + b0 t for i = 0, . . . , n − 1, then
i
i
i+1
n−1

b1 Bi,n−1 (t) .
i

B(t) =

(6.8)

i=0

Equation (6.8) expresses B(t) as a B´zier curve of degree n − 1 with control
e
points b1 , . . . , b1 . Applying a similar argument yields
0
n−1
n−2

b2 Bi,n−2 (t) ,
i

B(t) =
i=0

where b2 = b1 (1 − t) + b1 t for i = 0, . . . , n − 2. In general,
i+1
i
i+1
n−j

bj Bi,n−j (t) ,
i

B(t) =
i=0

where bj = bj−1 (1 − t) + bj−1 t for i = 0, . . . , n − j. In particular, j = n gives
i
i
i+1
0

bn Bi,n−n (t) = bn .
i
0

B(t) =
i=0

154

Applied Geometry for Computer Graphics and CAD

EXERCISES
6.27. A cubic B´zier curve has control points b0 (1, 0), b1 (3, 3), b2 (5, 5),
e
and b3 (7, 2). Evaluate the point B(0.25) by (a) applying the de Casteljau algorithm, and (b) substituting t = 0.25 into the deﬁning equation of the B´zier curve. Make a sketch illustrating the points derived
e
in applying de Casteljau algorithm.
6.28. Apply the de Casteljau algorithm to the quartic B´zier curve with
e
control points b0 (3.0, 3.0), b1 (4.0, 2.0), b2 (−1.0, 0.0), b3 (6.0, 1.0),
and b4 (8.0, 5.0), and evaluate the point B(0.6).
6.29. (Used in Theorem 6.13) Prove that the intermediate control points
deﬁned in the de Casteljau algorithm satisfy
j

bj =
k

Bi,j (t)bi+k .
i=0

6.30. Show that
n
(1 − t)Bi (t) =
n
tBi (t) =

n+1−i
n+1
Bi (t) ,
n+1
i+1
n+1
Bi+1 (t) .
n+1

6.31. (Used in Theorem 6.13) Use Exercise 6.29 (or otherwise) to show
n
that Bi,n (αt) = j=0 Bi,j (α)Bj,n (t).

6.9 Subdivision of a B´zier Curve
e
A B´zier curve is generally deﬁned over the interval [0, 1] and given by
e
n
B(t) =
i=0 bi Bi,n (t). On occasions, only a part of a curve is of interest.
For instance, suppose that a B´zier curve is “cut” at the parameter value t = α
e
to give two curve segments, denoted by Bleft (t) and Bright (t), deﬁned over the
intervals [0, α], and [α, 1] as shown in Figure 6.13. Since Bleft (t) and Bright (t)
are polynomial curves they can be represented in B´zier form over the interval
e
[0, 1]. Theorem 6.13 will show that to determine the control points of Bleft (t)
and Bright (t) it is suﬃcient to apply the de Casteljau algorithm to B(t) with
t = α. For a cubic B´zier curve, the theorem implies that the control points of
e
Bleft (t) are b0 , b1 , b2 , b3 , and the control points of Bright (t) are b3 , b2 , b1 , b0 .
0
0
0
0
0
1
2
3
The two sets of points are observed to be two edges of the triangle of control

6. B´zier Curves I
e

155

points (6.6). Subdivision is one way of creating extra control points in order
to give additional freedom for curve design. For instance, one segment of the
curve can be left untouched while the other part of the curve is changed.

Bright

B(a)
Bleft

0

a

1

Figure 6.13

Example 6.12
A B´zier cubic B(t) has control points b0 (1.0, 1.0), b1 (2.0, 7.0), b2 (8.0, 6.0),
e
and b3 (12.0, 2.0). The control points of the two curve segments Bleft (t) and
Bright (t), obtained by cutting B(t) at the parameter value t = 0.25, are determined from the triangle of points computed in Example 6.10. Bleft has control
points b0 (1.0, 1.0), b1 (1.25, 2.5), b2 (1.8125, 3.5625), b3 (2.578, 4.25), and Bright
has control points b0 (2.578, 4.25), b1 (4.875, 6.3125), b2 (9.0, 5.0), b3 (12.0, 2.0).

Theorem 6.13 (Subdivision)
n

For a general B´zier curve B(t) =
e
i=0 bi Bi,n (t), the control points of
the two curve segments obtained by subdivision at parameter value t are
b0 , b1 , . . ., bn−1 , bn for Bleft and bn , bn−1 , . . ., b1 , b0 for Bright , where the
n
0
0
0
0
n−1
0
1
bj are the points computed in the de Casteljau algorithm (Theorem 6.11).
i

Proof
Suppose B(t) is subdivided at t = α. The segment Bleft is deﬁned by Bleft (t) =
n
i=0 bi Bi,n (t) over the interval [0, α]. Thus the curve can be reparametrized
n
as Bleft (t) = i=0 bi Bi,n (αt), over the interval [0, 1]. Hence Exercise 6.30 gives
⎛
⎞
n

Bleft (t) =
i=0

bi ⎝

n

j=0

Bi,j (α)Bj,n (t)⎠ =

n

n

j=0

i=0

bi Bi,j (α) Bj,n (t) .

156

Applied Geometry for Computer Graphics and CAD

Finally, Exercise 6.28 (with k = 0) and the fact that Bi,j (α) = 0 whenever
i > j, gives
n

j

Bleft (t) =

n

bj Bj,n (t) .
0

bi Bi,j (α) Bj,n (t) =
j=0

i=0

j=0

Therefore the segment is deﬁned by control points bj (j = 0, . . . , n) over the
0
interval [0, 1] as required.
The result for Bright follows from an application of the symmetry property
as follows. Substitute t for 1 − t which maps the interval [α, 1] onto the interval
[0, 1 − α]. Apply the result for Bleft with the control points in the reverse order
and with 1 − α in place of α.

EXERCISES
6.32. A cubic B´zier curve B(t) is given by the four control points
e
b0 (0.2, 0.0), b1 (1.0, 0.4), b2 (1.8, 1.2), and b3 (3.4, 0.0).
(a) Use the de Casteljau algorithm to evaluate the point B(0.25).
(b) Use the triangular array of points evaluated in part (a) to write
down the sets of control points, deﬁning the segments Bleft and
Bright , that are obtained when B(t) is subdivided at t = 0.25.
6.33. Plot the curves B(t), Bleft (t), and Bright (t) obtained in Example 6.12
and verify that the union of the two segments is equal to the original
curve.
6.34. A B´zier curve B(t) is given by the four control points b0 (0.3, 0.1),
e
b1 (0.9, 0.6), b2 (1.3, −0.1), b3 (0.7, −0.4).
(a) Use the de Casteljau algorithm to evaluate the point B(1/3).
(b) Write down the control points deﬁning Bleft and Bright obtained
by subdividing B(t) at t = 1/3.
6.35. Determine the number of additions and multiplications that are required to compute the coordinates of one point of a cubic B´zier
e
curve by (a) using the de Casteljau algorithm, (b) evaluating the
equation of B(t) (assume that the value of 1 − t is computed just
once). Repeat the calculation for a quartic B´zier curve. Deduce the
e
number of additions and multiplications that are required for a general B´zier curve. Is the de Casteljau algorithm the most eﬃcient
e
method of computing a point?

6. B´zier Curves I
e

157

6.36. By writing a program, or using a computer package, implement the
de Casteljau algorithm for a general B´zier curve to (a) obtain the
e
coordinate of any point on the curve, and (b) determine the control
points of the two segments obtained by subdivision.

6.10 Applications
In this section the de Casteljau algorithm is applied to three problems: (i)
rendering a B´zier curve, (ii) ﬁnding the points of intersection of a B´zier curve
e
e
and a line, and (iii) ﬁnding the points of intersection of two B´zier curves.
e
The reader should note that there are alternative methods which solve these
problems. The algorithms discussed in this section indicate how the properties
of the B´zier representation can be applied to these problems.
e

6.10.1 Rendering
To render a curve means to obtain a plot of it. The main step of the rendering
algorithm is an application of the de Casteljau algorithm to subdivide the curve.
Step 1: Apply the de Casteljau algorithm with t = 1/2 to subdivide the B´zier
e
curve into two curve segments denoted Bleft and Bright .
Step 2: If Bleft is “near linear” (using the criterion described below) then go
to step 3; else, go to step 1 and apply the algorithm to Bleft . Similarly, if
Bright is near linear go to step 3; else go to step 1 and apply the algorithm
to Bright .
The algorithm continues to subdivide the newly obtained curve segments
that are not near linear. Eventually, the subdivision produces curve segments
that are near linear and no further subdivisions take place.
Step 3: The segment is near linear and can be approximated by its control
polygon. Draw the control polygon.
Each time step 3 is executed, the control polygon of a segment of the curve
is drawn. The union of all these control polygons gives a linear approximation
of the original B´zier curve.
e
Test to Determine Whether a B´zier Curve is Near Linear
e
There are a number of ways of deciding whether or not a curve is close to being linear. One method requires the user to specify a tolerance > 0. For a plane

158

Applied Geometry for Computer Graphics and CAD

curve, the control points are enclosed in a rectangle (see Figure 6.14(a)), called
a minmax bounding box, with lower left corner (xmin , ymin ) and upper right
corner (xmax , ymax ), where xmin /xmax is the minimum/maximum x-coordinate
of any control point, and ymin /ymax is the minimum/maximum y-coordinate of
any control point. The curve is considered linear if the horizontal or vertical
dimensions of the box are less than . The smaller the tolerance the greater the
number of subdivisions computed, and the smoother the resulting approximation to the curve.
A more sophisticated alternative is to determine the largest distance of
any interior control point (i.e. a control point which is not an endpoint) from
the line through the endpoints of the curve as shown in Figure 6.14(b). This
is a more computationally expensive method than the minmax box method,
but generally it will result in fewer subdivisions which will give a saving in
computations. A further improvement of the algorithm can be obtained by

4

b1

2

b3
b0

00

Figure 6.14

2

4

6

b2

(a) Minmax bounding box, and (b) test for near linearity

subdividing at values other than t = 1/2. In general, the point B(1/2) is not
exactly half-way along the curve. So the algorithm could be improved if the
subdivision takes place nearer to half-way as this would reduce the number of
subdivisions. To determine the value of t which corresponds to half-way requires
considerable additional computation, and it is not obvious whether this results
in a more eﬃcient algorithm.

6.10.2 Intersection of a Planar B´zier Curve and a Line
e
A planar B´zier curve B(t) of degree n can intersect a line in the plane in up
e
to n points. (It is assumed that B(t) is not a line segment and intersecting in
an inﬁnite set.) A simple algorithm to compute the points of intersection is as
follows.

6. B´zier Curves I
e

159

Step 1: Test whether the convex hull of the control points intersects the line
(see below for details). If so, go to step 2 as there may be an intersection;
else, the curve does not intersect the line and the curve may be disregarded.
Step 2: Test to see if the curve is near linear. If so, go to step 3; else, apply
the de Casteljau algorithm to subdivide the curve into two B´zier curve
e
segments and repeat step 1 with each segment.
Step 3: The curve (or curve segment) is linear and may be approximated by
a line segment (for example, by the line joining the ﬁrst and last control
points), and intersected with using the algorithm implemented in Exercise
6.36. The intersection is a point of intersection of the B´zier curve and .
e
Test to Determine Whether a Convex Hull Intersects a Line
Suppose the line has the equation ax+by+c = 0. A line partitions the plane
into two regions, one on either side of the line. The regions are distinguished
by the fact that points (x, y) in one region satisfy ax + by + c > 0, and points
in the other satisfy ax + by + c < 0. All control points of a curve lie on one
side of the line if and only if the convex hull does not intersect the line. Thus a
simple check for intersection would be to determine whether axi + byi + c has
the same sign for every control point bi (xi , yi ) (i = 0, . . . , n) as illustrated in
Figure 6.15.
Neither the convex
hull nor the curve
intersects the line

Both the convex
hull and the curve
intersect the line

Figure 6.15

Convex hull
intersects the
line, but the
curve does not

Convex hull test

6.10.3 Intersection of Two B´zier Curves
e
Determining the points of intersection of two curves is a complex problem. A
curve of degree m intersects another of degree n in up to m × n points. (This
result follows from a more general result known as Bezout’s theorem [11].)

160

Applied Geometry for Computer Graphics and CAD

For example, two cubic curves can meet in as many as nine points. A simple
algorithm to compute the intersection points of two B´zier curves is as follows.
e
Step 1: Test to see if the convex hulls of the control polygons intersect (see
below for details). If so, go to step 2 as the curves may intersect; else the
curves cannot intersect and may be disregarded.
Step 2: Test whether the curves are linear. If so, go to step 3; else, apply the
de Casteljau algorithm to subdivide each curve into two segments, and to
give a total of four pairs of curve segments. Go to step 1 and apply the
algorithm to each pair.
Thus, each pair of subdivided curve segments is treated in a similar manner
to the original pair. Each subdivision produces curves with control points that
have successively smaller convex hulls. The subdivision process will stop when
the curve segments are near linear. Alternatively, the subdivision process could
be coded to stop after a ﬁxed number of iterations (obviously with some loss
of precision in the computation of the intersection points).
Step 3: Since both curves are near linear, the curves may be approximated
by line segments (for example, by the line joining the ﬁrst and last control
points). The two linear segments are intersected (using the algorithm of
Exercise 6.36) to determine the point of intersection of the two segments.
Test to Determine Whether Two Convex Hulls are Intersecting
The simplest method is to enclose each convex hull in a minmax bounding
box. The two boxes are easily checked for overlap.

EXERCISES
6.37. Implement the B´zier rendering algorithm using (a) the simple recte
angular bounding box criterion, and (b) the distance to line criterion.
Compare the performance of the two algorithms for curves of small
and large degrees, and for nearly linear curves which are parallel or
at an angle to the x- or y-axes.
6.38. Determine algorithms which (a) approximate a nearly linear B´zier
e
curve by a line, and (b) determine the intersection of two linear segments. Use the algorithms to implement the line/B´zier intersection,
e
and B´zier/B´zier intersection algorithms.
e
e

7

B´zier Curves II
e

7.1 Spatial B´zier Curves
e
n

A spatial B´zier curve B(t) =
e
i=0 bi Bi,n (t) is obtained when the control
e
points bi are three-dimensional. Spatial B´zier curves satisfy the properties of
planar B´zier curves given in Section 6.7, namely, the endpoint interpolation
e
and endpoint tangent conditions, invariance under aﬃne transformations, the
convex hull property (CHP), and the variation diminishing property (VDP). In
general, the convex hull of the set of control points is a volume. In the special
case when the control points are coplanar the convex hull is a planar region
and the CHP implies that the B´zier curve is contained in a plane. The VDP
e
in the spatial case states that a plane intersects a B´zier curve in less than or
e
equal to the number of intersections of that plane with the control polygon.
The de Casteljau algorithm is executed in a similar manner to the twodimensional case, except that the linear interpolation is applied to three coordinates rather than two (as illustrated in the next example).

Example 7.1
Let a spatial cubic B´zier curve be speciﬁed by control points b0 (1, 2, 1),
e
b1 (3, 0, 4), b2 (6, −3, 2), and b3 (4, 2, 3). The endpoints of the curve are b0 (1, 2, 1)
and b3 (4, 2, 3). The endpoint tangent vectors are 3 ((3, 0, 4) − (1, 2, 1)) =
(6, −6, 9) and 3 ((4, 2, 3) − (6, −3, 2)) = (−6, 15, 3). The point B(0.3), for instance, is obtained by applying the de Casteljau algorithm with t = 0.3 to the

161

162

Applied Geometry for Computer Graphics and CAD

three-dimensional control points
(1, 2, 1)
(1.6, 1.4, 1.9)
(2.29, 0.71, 2.35)
(2.908, 0.173, 2.566)

(3, 0, 4)
(3.9, −0.9, 3.4)
(4.35, −1.08, 3.07)

(6, −3, 2)
(5.4, −1.5, 2.3)

(4, 2, 3)

Hence B(0.3) = (2.908, 0.173, 2.566). The de Casteljau algorithm also subdivides the curve into two segments (as described in Section 6.9): Bleft deﬁned
by control points
(1, 2, 1), (1.6, 1.4, 1.9) , (2.29, 0.71, 2.35) , (2.908, 0.173, 2.566)
and Bright deﬁned by control points
(2.908, 0.173, 2.566) , (4.35, −1.08, 3.07) , (5.4, −1.5, 2.3) , (4, 2, 3) .

7.2 Derivatives of B´zier Curves
e
Many computations involving curves, such as determining tangents and normals, require the calculation of derivatives. Derivatives of B´zier curves are
e
obtained from the derivatives of the Bernstein basis functions. For instance,
the derivatives of the cubic Bernstein basis functions B0,3 (t) = (1 − t)3 ,
B1,3 (t) = 3(1 − t)2 t, B2,3 (t) = 3(1 − t)t2 , and B3,3 (t) = t3 are
B0,3 (t)

= −3(1 − t)2 = −3B0,2 (t) ,

B1,3 (t)

=

3(1 − t)2 − 6t(1 − t) = 3(1 − 4t + 3t2 ) = 3B0,2 (t) − 3B1,2 (t) ,

B2,3 (t)

=

3t(2 − 3t) = 3B1,2 (t) − 3B2,2 (t) , and

B3,3 (t)

=

3t2 = 3B2,2 (t) .

Hence, the derivative of a cubic B´zier curve B(t) =
e
B (t)

3
i=0

bi Bi,3 (t) is

= −3b0 B0,2 (t) + 3b1 (B0,2 (t) − B1,2 (t))
+ 3b2 (B1,2 (t) − B2,2 (t)) + 3b3 B2,2 (t) ,
= 3(b1 − b0 )B0,2 (t) + 3(b2 − b1 )B1,2 (t) + 3(b3 − b2 )B2,2 (t) .

The generalizations of the above formulae for B´zier curves of degree n are
e
expressed in Theorems 7.2 and 7.3.

7. B´zier Curves II
e

163

Theorem 7.2
The ﬁrst and second derivatives of the Bernstein basis functions Bi,n (t) of
degree n satisfy
(i − nt)
Bi,n (t) ,
t(1 − t)

Bi,n (t)

=

Bi,n (t)

=

Bi,n (t)

= n (Bi−1,n−1 (t) − Bi,n−1 (t)) .

i(i − 1) − 2i(n − 1)t + n(n − 1)t2
2

t2 (1 − t)

Bi,n (t) ,

Proof
Diﬀerentiating Bi,n (t) =

Bi,n (t) =
=

n
i

(1 − t)n−i ti by the product rule gives

n
− (n − i) (1 − t)n−i−1 ti + i(1 − t)n−i ti−1
i
i − nt
n
(1 − t)n−i ti ,
t(1 − t)
i

which establishes the ﬁrst formula. The second formula is obtained by diﬀerentiating the ﬁrst formula,
Bi,n (t) =
=
=

i − nt
t(1 − t)

Bi,n (t) +

(2it − nt2 − i)
2

t2 (1 − t)

(i − nt)
B (t) ,
t(1 − t) i,n

Bi,n (t) +

(i − nt)

2

t2 (1 − t)

2 Bi,n (t)

i(i − 1) − 2i(n − 1)t + n(n − 1)t2
2

t2 (1 − t)

Bi,n (t) .

The third formula is Exercise 7.5.

Theorem 7.3
The ﬁrst derivative of a B´zier curve of degree n is
e
n−1
(1)

B (t) =

bi Bi,n−1 (t) ,
i=0

(1)

where bi

= n (bi+1 − bi ).

(7.1)

164

Applied Geometry for Computer Graphics and CAD

Proof
Applying the third formula Bi,n (t) = n (Bi−1,n−1 (t) − Bi,n−1 (t)) of Theorem
7.2 and using the fact that B−1,n−1 (t) = Bn,n−1 (t) = 0, gives
n

B (t) =

n

bi n (Bi−1,n−1 (t) − Bi,n−1 (t))

bi Bi,n (t) =
i=0
n

i=0
n

nbi Bi−1,n−1 (t) −

=

nbi Bi,n−1 (t)

i=0

i=0

n

n−1

nbi Bi−1,n−1 (t) −

=
i=1

nbi Bi,n−1 (t) .
i=0

Renumbering the ﬁrst summation of the previous line gives
n−1

n−1

nbi+1 Bi,n−1 (t) −

B (t) =
i=0

n−1

n (bi+1 − bi ) Bi,n−1 (t) .

nbi Bi,n−1 (t) =
i=0

i=0

The second and higher order derivatives of B(t) are obtained by repeated applications of the ﬁrst derivative formula. Note that the formulae apply to spatial
as well as planar B´zier curves.
e

Corollary 7.4
The second derivative of a B´zier curve of degree n is
e
n−2
(2)

B (t) =

bi Bi,n−2 (t) ,
i=0

(2)

where bi

(1)

(1)

= (n − 1) bi+1 − bi

= n (n − 1) (bi+2 − 2bi+1 + bi ).

Corollary 7.5
The rth derivative of a B´zier curve of degree n is
e
n−r
(r)

B(r) (t) =

bi Bi,n−r (t) ,
i=0

where

r
(r)

bi

= n(n − 1) . . . (n − r + 1)

(−1)r−j
j=0

r
bi+j .
j

7. B´zier Curves II
e

165

Example 7.6
Consider the cubic B´zier curve deﬁned by control points b0 (2, 1), b1 (5, 6),
e
b2 (6, 2), and b3 (9, 3). The diﬀerences of the control points are
(5, 6) − (2, 1) = (3, 5), (6, 2) − (5, 6) = (1, −4), (9, 3) − (6, 2) = (3, 1) .
Multiply each diﬀerence by 3 to give the control points of the ﬁrst derivative
(1)

(1)

(1)

b0 (9, 15), b1 (3, −12), b2 (9, 3) .
Therefore, the derivative of the cubic is the quadratic B´zier curve
e
(1 − t)2 (9, 15) + 2(1 − t)t(3, −12) + t2 (9, 3) .
To determine the second derivative, take the diﬀerences of the control points
of the ﬁrst derivative
(3, −12) − (9, 15) = (−6, −27) ,

(9, 3) − (3, −12) = (6, 15) ,

(2)

(2)

and multiply by (n − 1) = 2 to give b0 (−12, −54) and b1 (12, 30). Hence the
second derivative of the cubic is the linear B´zier curve
e
(1 − t)(−12, −54) + t(12, 30) .

(7.2)

Then, for instance, the tangent vector of the curve at the point corresponding
to parameter t = 0.5 is obtained by substituting t = 0.5 in the ﬁrst derivative
(1 − 0.5)2 (9, 15) + 2(1 − 0.5)0.5(3, −12) + 0.52 (9, 3) = (6.0, −1.5) .

EXERCISES
7.1. Apply the de Casteljau algorithm with t = 0.3 to the spatial cubic B´zier curve B(t) with control points b0 (2, 7, 4), b1 (4, 6, 5),
e
b2 (5, 8, 4), and b3 (3, 5, 3). Determine B(0.3) and the control points
of the two curve segments obtained by subdividing at t = 0.3.
7.2. Determine the ﬁrst and second derivatives of the cubic B´zier curve
e
with control points b0 (6, 3), b1 (4, 3), b2 (1, 2), and b3 (−1, 2).
7.3. Determine the ﬁrst and second derivatives of the quartic B´zier
e
curve with control points b0 (1, 1), b1 (1, 3), b2 (5, 6), b3 (6, 2), and
b4 (4, −1).
7.4. Determine an expression, in terms of the control points, for the acceleration vectors (second derivatives) at the endpoints of a B´zier
e
curve of degree n.

166

Applied Geometry for Computer Graphics and CAD

7.5. Prove the ﬁnal result of Theorem 7.2 that the Bernstein basis functions satisfy Bi,n (t) = n (Bi−1,n−1 (t) − Bi,n−1 (t)).
7.6. Extend your computer implementation of the de Casteljau algorithm
to apply to spatial B´zier curves.
e

7.3 Conversions Between Representations
All polynomial curves can be represented in B´zier form. Suppose a polynomial
e
curve of degree n is expressed in the monomial form
a0 + a1 t + · · · + an tn = (p0 + p1 t + · · · + pn tn , q0 + q1 t + · · · + qn tn )

(7.3)

over the interval [0, 1]. The points ai are called monomial control points. The
curve can be converted into B´zier form by multiplying the monomial control
e
points by a conversion matrix. For instance, expanding the expression for a
quadratic B´zier curve gives
e
b0 (1 − t)2 + b1 2(1 − t)t + b2 t2 = (b0 − 2b1 + b2 )t2 + (−2b0 + 2b1 )t + b0 . (7.4)
A comparison of the coeﬃcients with those of a2 t2 + a1 t + a0 gives
a0 = b0 ,

a1 = 2(b1 − b0 ),

and a2 = b0 − 2b1 + b2 .

The relationship between the control points of the two representations can be
expressed in the matrix form
⎛
⎞ ⎛
⎞
⎞⎛
a0
1
0 0
b0
⎝ a1 ⎠ = ⎝ −2
(7.5)
2 0 ⎠ ⎝ b1 ⎠ .
a2
b2
1 −2 1
The inverse matrix can be used to express the B´zier control points in terms
e
of the monomial control points
⎛
⎞ ⎛
⎞
⎞⎛
b0
1 0 0
a0
⎝ b1 ⎠ = ⎝ 1 1 0 ⎠ ⎝ a1 ⎠ .
(7.6)
2
b2
a2
1 1 1
The two conversion matrices are denoted
⎛
⎛
⎞
1
0 0
1
Bez = ⎝ −2
2 0 ⎠ , and Bez−1 = ⎝ 1
1
1 −2 1
T

Let a = a0 a1 a2
and b =
and (7.6) may be written

b0

b1

b2

T

0
1
2

1

⎞
0
0 ⎠ .
1

, then the conversions (7.5)

a = Bez·b , and b = Bez−1 ·a .

(7.7)

7. B´zier Curves II
e

167

Example 7.7
The curve (2 + 5t − 3t2 , 4 − t + 6t2 ) is converted into quadratic B´zier form as
e
follows
⎛
⎞⎛
⎞ ⎛
⎞
1 0 0
2
4
2.0 4.0
⎝ 1 1 0 ⎠ ⎝ 5 −1 ⎠ = ⎝ 4.5 3.5 ⎠ .
2

1

1

−3

1

6

4.0

9.0

Hence the control points of the quadratic B´zier curve are
e
b0 (2.0, 4.0),

b1 (4.5, 3.5),

and b2 (4.0, 9.0) .

EXERCISES
7.7. Convert the curve (1 − t2 , 4 − 2t + 3t2 ) into B´zier form.
e
7.8. Convert the quadratic B´zier curve with control points
e
b0 (−3.0, −3.0), b1 (1.0, −1.0), and b2 (−1.0, 2.0) into monomial form.
7.9. Let B =
that

B0,2 (t)

B1,2 (t) B2,2 (t)

and T =

1 t

t2

. Show

B = T·Bez, and B(t) = T·Bez·b .

(7.8)

The procedure for conversion between the general B´zier curve and a curve
e
in monomial form is similar. Let
B0,n (t) B1,n (t) . . .

a=

a0

a1

...

an

T

,

Bn,n (t)

,

T=

1 t ...

b=

B=

b0

b1

tn
...

,
bn

T

,

and let the matrices Bez = (Bezi,j ) and Bez−1 = Bez−1 , 0 ≤ i, j ≤ n, have
i,j
entries respectively deﬁned by
Bezi,j
Bez−1
i,j

(−1)i−j
0,

=

=

i
j

n
j

n
i

i
j

, if i ≥ j
otherwise

, if j ≤ i

0,

, and

.

otherwise

Then identities (7.7) and (7.8) hold. The most eﬃcient computer implementation for conversion between ai and bi is yielded by the equivalent formulae
i

ai

=

(−1)
j=0
i

bi

=
j=0

i
j

i−j

n
i
n
j

i
bj ,
j
aj .

168

Applied Geometry for Computer Graphics and CAD

EXERCISES
7.10. Following the approach taken for conversions of quadratic polynomial curves, show that for cubic curves
⎛
⎞
1
0
0 0
⎜ −3
3
0 0 ⎟
⎟ .
Bez = ⎜
⎝ 3 −6
3 0 ⎠
−1
3 −3 1
7.11. Show that the matrix
⎛

Bez−1

3
⎜ 3
= 1/3 ⎜
⎝ 3
3

0
1
2
3

0
0
1
3

⎞
0
0 ⎟
⎟
0 ⎠
3

is the inverse of the matrix Bez given in Exercise 7.10.
e
7.12. Convert the curve (2 − 3t − 4t2 + 7t3 , −4 + 8t − 5t3 ) into B´zier form.
7.13. Convert the B´zier curve with control points b0 (2, −1), b1 (5, 2),
e
b2 (7, 3), and b3 (6, −1) into monomial form.

7.4 Piecewise B´zier Curves
e
A B´zier curve of degree n has n + 1 control points. Curves of high degree
e
are not often used since there is only a weak relationship between the shape
of the curve and the shape of the control polygon. Further, operations such
as the evaluation of points require a large number of arithmetical operations,
and so there is an increased risk of computational errors. In contrast, curves
of low degree have few control points, and therefore yield a limited range of
curve shapes. To widen the range of shapes without increasing the degree of
the curve, a number of B´zier curves can be joined end to end to form a single
e
continuous curve called a piecewise B´zier curve. In practice, the joins of the
e
curves are required to be smooth.

Deﬁnition 7.8
An arbitrary interval B´zier curve B(t) of degree n with control points
e

7. B´zier Curves II
e

169

b0 , . . . , bn deﬁned on an interval [tmin , tmax ] is given by
n

bi Bi,n

B(t) =
i=0

t − tmin
tmax − tmin

where Bi,n denote the Bernstein basis functions of degree n. The arbitrary
interval B´zier curve B(t) is a reparametrization of the ordinary B´zier curve
e
e
n
ˆ
ˆ
B(t) = i=0 bi Bi,n (t), t ∈ [0, 1]. B(t) is said to be the normalization of B(t).

Deﬁnition 7.9
Let I = [a, b]. P(t) is said to be a piecewise B´zier curve if there exist t0 <
e
e
t1 < · · · < tr−1 < tr such that a = t0 and b = tr , and arbitrary interval B´zier
curves Bj (t) deﬁned on [tj , tj+1 ] (j = 0, . . . , r − 1), such that (i) P(t) = Bj (t)
for t ∈ (tj , tj+1 ), (ii) P(tj ) = Bj−1 (tj ) or P(tj ) = Bj (tj ) (possibly both) for
j = 1, . . . , r − 1, and (iii) P(t0 ) = B0 (t0 ) and P(tr ) = Br−1 (tr ). The parameter
values tj are called breakpoints. If the largest degree of the curves Bj (t) is n,
then the piecewise B´zier curve is said to have degree n. The terms quadratic,
e
cubic, etc. are used to describe piecewise curves of degrees two, three, etc.

Remark 7.10
The deﬁnition ensures that P(t) is single valued on the interval [a, b]. In practice, a piecewise B´zier curve is considered simply as a union of B´zier curves
e
e
and therefore P(tj ) has two values (j = 1, . . . , r − 1), namely Bj−1 (tj ) and
Bj (tj ). In many applications only continuous curves are considered, in which
case P(tj ) = Bj−1 (tj ) = Bj (tj ) and so P(t) is single valued everywhere.

Example 7.11
Consider three arbitrary interval B´zier curves B0 (t), t ∈ [−2, 0]; B1 (t), t ∈
e
[0, 3]; B2 (t), t ∈ [3, 4] with the following control points
B0 (t) :

b0 (2, −1), b1 (5, 2), b2 (7, 3), b3 (8, −1)

B1 (t) :

b0 (8, −1), b1 (8, −3), b2 (7, −4), b3 (5, −4)

B2 (t) :

b0 (5, −4), b1 (3, −4), b2 (4, −2), b3 (6, −2) .

Let P(t) be the piecewise B´zier curve deﬁned on the interval [−2, 4] given by
e
⎧
⎨ B0 (t) , −2 ≤ t < 0
P(t) =
0≤t<3 .
B (t) ,
⎩ 1
3≤t≤4
B2 (t) ,

170

Applied Geometry for Computer Graphics and CAD

The breakpoints are t0 = −2, t1 = 0, t3 = 3, t4 = 4. Since the parametrization
does not aﬀect the trace of a curve, P(t) can be plotted by drawing the nore
malizations of Bj (t) which are the B´zier curves deﬁned by the same sets of
control points. The curve is shown in Figure 7.1.

3
2
1
0
-1

0

1

3

2

4

5

6

7

8

-2
-3
-4

Figure 7.1

Recall that a parametric curve C(t) is said to be C k -continuous whenever all
of the coordinate functions are C k -continuous. Since a polynomial function is
C ∞ , a piecewise polynomial function is C ∞ everywhere except at the parameter
values corresponding to the joins of the individual functions. It can be shown
that, at the join of two polynomial functions of degrees p and q, the piecewise
function is at most C k -continuous where k = min(p, q). It follows that at the
join of two polynomial curves of degrees p and q, the piecewise curve is at most
C k -continuous where k = min(p, q).

Example 7.12
Consider the curve (x(t), y(t)) = (t, f (t)) where
f (t) =

3t2 + 2t + 1,
t + 1,

if t ≤ 0
if t > 0

.

The curve is shown in Figure 7.2(a). Since any polynomial function is C ∞ ,
x(t) = t is C ∞ everywhere, and y(t) = f (t) is C ∞ everywhere except possibly
at t = 0, the parameter value at which the second polynomial function takes
over from the ﬁrst in the deﬁnition of f . It is easily checked that f (t) is C 0 . To
determine whether f (t) is C 1 it is necessary to consider its ﬁrst derivative
f (t) =

6t + 2,
1,

if t ≤ 0
if t > 0

.

7. B´zier Curves II
e

171

2

2
1.5

1

1
–1

0

1

–0.5 0

(a) Graph of (t, f (t))

Figure 7.2

0.5

1

(b) Graph of f (t)

The graph of f (t) is shown in Figure 7.2(b). It is clear that f is not C 1 :
geometrically, the graph of f (t) has a break at t = 0. Hence (t, f (t)) is a
C 0 -continuous curve, but not C 1 .
The piecewise curve in this example is the join of the two polynomial curves
(t, 3t2 + 2t + 1) and (t, t + 1). Since k = min(2, 1) = 1 for curves of degrees p = 2
and q = 1, the maximum continuity possible is C 1 ; the example only achieves
C 0 -continuity.
Suppose P(t) is a piecewise B´zier curve deﬁned on I = [a, b], consisting
e
of B´zier curves Bj (t) deﬁned on intervals Ij = [tj , tj+1 ] (j = 0, . . . , r − 1) as
e
expressed in Deﬁnition 7.9. Since the coordinate functions of P(t) are piecewise polynomial functions, P(t) is C ∞ at all parameter values which are not
breakpoints. Suppose Bj (t) has degree nj and control points bj ,. . .,bj j . Then
n
0
P(t) is continuous at t = tj if and only if limt→t+ P(t) = limt→t− P(t) = P(tj ).
j
j
(This is a standard criterion for continuous functions, see [25].) But
lim P(t) =
+

t→tj

lim P(t) =

t→t−
j

lim Bj (t) = bj ,
0
+

and

t→tj

lim Bj−1 (t) = bj−1 .
nj−1

t→t−
j

Thus P(t) is continuous at t = tj if and only if P(tj ) = bj−1 = bj . Hence
nj−1
0
the last control point of Bj−1 (t) should equal the ﬁrst control point of Bj (t).
Therefore P(t) is continuous if and only if bj−1 = bj for all j = 1, . . . , r − 1.
nj−1
0

Example 7.13
Consider the piecewise cubic B´zier curve consisting of two cubic B´zier curves
e
e
B(t) and C(t) with control points b0 , b1 , b2 , b3 and c0 , c1 , c2 , c3 respectively.

172

Applied Geometry for Computer Graphics and CAD

Assuming that B(t) is the ﬁrst curve and C(t) is the second, the piecewise
cubic B´zier curve is C 0 if and only if b3 = c0 .
e
Let P(p) denote the pth derivative of P(t). Then
lim P(p) (t)
+

=

t→tj

(p)

lim P

t→t−
j

(t)

(p)

lim Bj (t) ,
+

t→tj

=

(p)

lim Bj−1 (t) .

t→t−
j

Thus B(t) is C k if and only if for all p ≤ k and for all j = 1, . . . , r − 1,
(p)

(p)

Bj−1 (tj ) = Bj (tj ) .

(7.9)

The condition (7.9) for C k -continuity can be expressed in terms of the normalt−tmin
ˆ
ized B´zier curves. Since Bj (t) = Bj ( tmax −tmin ) the chain rule yields
e
1
1
ˆ (p) (1) =
ˆ (p) (0) .
pB
pB
(tj − tj−1 ) j−1
(tj+1 − tj ) j

(7.10)

ˆ (p)
This is a more useful formula since the derivatives of Bj are easily obtained
in terms of the control points using Theorem 7.3 and its corollaries.

Deﬁnition 7.14
Suppose two regular curves B(s), s ∈ [s0 , s1 ], and C(t), t ∈ [t0 , t1 ], meet at
a point P = B(s1 ) = C(t0 ). Then the two curves are said to meet with Gk continuity whenever there is a reparametrization α : [u0 , u1 ] → [s0 , s1 ] such
that s1 = α(u1 ) and
di B
(α(u))
dui

=
u=u1

di C
(t)
dti

t=t0

for all i = 0, . . . , k. This type of continuity is called geometric continuity. (The
notation |t=t0 indicates that the function is evaluated at t0 .)
If two curves meet with G1 -continuity at a point P, then their tangent
vectors at P have the same direction, but they may have diﬀerent magnitudes.
To the eye, the curves meet smoothly and the curves are said to be visually
tangent continuous at P. It is left as an exercise to the reader to show that
B(s) and C(t) are G1 -continuous at P if and only if
µ

dB
dC
(s1 ) =
(t0 )
ds
dt

(7.11)

7. B´zier Curves II
e

173

for some µ = 0 (using the notation of Deﬁnition 7.14), and that C 1 -continuity
is obtained whenever (7.11) is satisﬁed for µ = 1.
Suppose P(t) is a continuous piecewise B´zier curve. Then P(t) is visually
e
tangent continuous at t = tj whenever there exist constants µj > 0, such that
e
e
µj Bj−1 (tj ) = Bj (tj ). When the piecewise B´zier curve is given by B´zier
curves Bj (t) deﬁned on intervals of unit length (that is tj − tj−1 = 1 for all
ˆ (p)
ˆ (p)
j) condition (7.10) simpliﬁes to Bj−1 (1) = Bj (0). Then Theorem 7.3 yields
the conditions for C k -continuity and visual tangent continuity in terms of the
control points alone. So, in eﬀect the intervals can be ignored and it is common
practice to work as if ordinary B´zier curves are being used to construct the
e
piecewise curve. Examples are given below.

Example 7.15
Consider a piecewise B´zier curve consisting of two cubic B´zier curves B(t) and
e
e
C(t) (deﬁned on intervals of unit length) with control points b0 , b1 , b2 , b3 , and
c0 , c1 , c2 , c3 , respectively. Suppose that b3 = c0 so that the piecewise curve is
continuous. Visual tangent continuity is obtained when µB (1) = C (0). Then
B (1) = 3(b3 − b2 ) and C (0) = 3(c1 − c0 ), giving µ3(b3 − b2 ) = 3(c1 − c0 ).
Substituting c0 = b3 and simplifying gives c1 = (1 + µ) b3 − µb2 . Hence b2 ,
b3 , and c1 are collinear, and b3 lies between b2 and c1 . Geometrically, the
visual tangent continuity implies that the tangent direction at the end of the
ﬁrst segment equals the tangent direction at the beginning of the second segment. The resulting join of the two curves appears smooth, but the underlying
parametrization is not C 1 -continuous. C 1 -continuity is achieved when µ = 1,
so that the magnitudes and directions of the tangents are equal. Hence c0 = b3
and c1 = 2b3 − b2 . The arguments above are easily generalized to give continuity conditions for B´zier curves of degree n expressed in Theorem 7.17.
e

Example 7.16
Consider the piecewise curve consisting of two cubic B´zier curves (deﬁned on
e
intervals of unit length) with control points b0 (2, 5), b1 (3, 1), b2 (5, 1), b3 (6, 3),
and c0 (6, 3), c1 (8, 7), c2 (5, 8), c3 (3, 6). Since b3 = c0 = (6, 3), the two curves
join to form a continuous curve. Further, the condition c1 = (1 + µ) b3 − µb2
gives
(8, 7) = (1 + µ) (6, 3) − µ(5, 1)
which is satisﬁed for µ = 2 > 0, and hence the curve is visually tangent
continuous. C 1 -continuity can be obtained by adjusting a control point. For
instance, if c1 is changed to (7, 5), then c1 = 2b3 − b2 is satisﬁed.

174

Applied Geometry for Computer Graphics and CAD

Theorem 7.17
Two B´zier curves of degree n,
e
n

n

bi Bi,n (t),

B(t) =
i=0

and C(t) =

ci Bi,n (t),
i=0

deﬁned on intervals of unit length, join to form a piecewise curve with
1. C 0 -continuity if and only if bn = c0 (or cn = b0 );
2. C 1 -continuity if and only if bn = c0 and c1 = 2bn − bn−1 (or cn = b0 and
b1 = 2cn − cn−1 );
3. visual tangent continuity if and only if bn = c0 , and
c1 = (1 + µ) bn − µbn−1 ,
for some µ (or cn = b0 and b1 = (1 + µ) cn − µcn−1 ).

Corollary 7.18
Using the earlier notation, a piecewise B´zier curve B(t) for which the B´zier
e
e
curves Bj (t) are deﬁned on unit length intervals has
1. C 0 -continuity if and only if bi = bi+1 for i = 1, . . . , r − 1;
n
0
2. C 1 -continuity if and only if bi = bi+1 and bi+1 = 2bi − bi
n
n
n−1 for i =
0
1
1, . . . , r − 1;
3. visual tangent continuity if and only if bi = bi+1 and bi+1 = (1 + µi ) bi −
n
n
0
1
µi bi , for some µi , for i = 1, . . . , r − 1.
n−1

EXERCISES
7.14. Consider the piecewise curve consisting of two cubic B´zier curves
e
with control points b0 (2, 1), b1 (4, 2), b2 (5, 4), b3 (3, 6), and c0 (3, 6),
c1 (2, 7), c2 (0, 5), c3 (0, 3). Show that the curves have visual tangent
continuity. Plot the curves and their control polygons. Alter the control point b2 so that the curves join with C 1 -continuity.
7.15. Determine the conditions on the control points for C 0 -, C 1 -, and
e
C 2 -continuity of two quadratic B´zier curves (deﬁned on intervals of
unit length).
7.16. Determine the conditions on the control points for C 2 -continuity of
two cubic B´zier curves (deﬁned on unit intervals). Determine the
e
e
conditions for C 2 -continuity of two B´zier curves of degree n.

7. B´zier Curves II
e

175

7.5 Rational B´zier Curves
e
In Section 5.6.1 it was shown that there are three types of irreducible conics,
namely, hyperbolas, parabolas, and ellipses. Parabolas can be parametrized
by polynomial functions, whereas hyperbolas and ellipses are parametrized
by rational functions. Thus quadratic B´zier curves, which have polynomial
e
parametrizations, exclude hyperbolas and ellipses. In order to represent such
curves it is necessary to introduce rational B´zier curves.
e

Deﬁnition 7.19
A rational B´zier curve of degree n with control points b0 , . . . , bn and corree
sponding scalar weights wi is deﬁned to be
B(t) =

n
i=0 wi bi Bi,n (t)
n
i=0 wi Bi,n (t)

,

t ∈ [0, 1] ,

with the understanding that if wi = 0, then wi bi is to be replaced by bi . It is
assumed that not all the weights are zero. When bi ∈ R2 (i = 0, . . . , n) then
the curve is planar, and when bi ∈ R3 the curve is spatial. Note that the term
integral B´zier curve is used to describe non-rational B´zier curves.
e
e
ˆ
Let bi = (xi , yi , zi ). Deﬁne homogeneous control points bi by
ˆ
bi =

(wi xi , wi yi , wi zi , wi ),
(xi , yi , zi , 0),

if wi = 0
if wi = 0

.

In homogeneous coordinates the rational B´zier curve is given by
e
n

ˆ
bi Bi,n (t)

B(t) =
i=0

which takes the form of an integral B´zier curve, but with homogeneous control
e
n
points. Since
i=0 Bi,n (t) = 1, by the partition of unity property, integral
B´zier curves are obtained whenever w0 = · · · = wn .
e
A rational B´zier curve can also be written in the basis form
e
n

B(t) =

bi Ri,n (t)
i=0

⎧
⎨

where
Ri,n (t) =

⎩

wi Bi,n (t)
n
j=0 wj Bj,n (t)
Bi,n (t)
n
j=0 wj Bj,n (t)

, if wi = 0
, if wi = 0

.

176

Applied Geometry for Computer Graphics and CAD

Example 7.20
The rational quadratic with control points b0 (−1, 0), b1 (2, 1), and b2 (4, −1)
and corresponding weights 1, 1, 2 is shown in Figure 7.3(a), and with weights
1, 0.6, 2 is shown in Figure 7.3(b).
1

1

0.5
-1

0.5

0
-0.5

1

2

3

4

-1

-1

0
-0.5

1

2

3

4

-1

(a)

(b)

Figure 7.3
Rational B´zier curve with control points (−1, 0), (2, 1),
e
(4, −1), and (a) weights 1, 1, 2, and (b) weights 1, 0.6, 2

Example 7.21
The unit quarter circle in the ﬁrst quadrant can be represented as a quadratic
rational B´zier curve with control points b0 (1, 0), b1 (1, 1), and b2 (0, 1) and
e
weights w0 = 1, w1 = 1, and w2 = 2. Then
(1 − t)2 w0 b0 + 2t(1 − t)w1 b1 + t2 w2 b2
=
=

(1 − t)2 (1, 0) + 2t(1 − t)(1, 1) + 2t2 (0, 1)
1 − t2 , 2t ,

(1 − t)2 w0 + 2t(1 − t)w1 + t2 w2
=
Hence B(t) =
quarter circle.

(1 − t)2 + 2t(1 − t) + 2t2 = 1 + t2 .

1−t2
2t
1+t2 , 1+t2

which is a familiar parametrization of the unit

Example 7.22
The spatial rational cubic B´zier curve with control points b0 (1, 0, 1),
e
b1 (2, 1, −1), b2 (5, 4, 2), and b3 (2, −3, 1) and weights 1, 2, 2, 1 is shown in Figure 7.4.
A quadratic rational B´zier curve has the form
e
B(t) =

w0 b0 B0,2 (t) + w1 b1 B1,2 (t) + w2 b2 B2,2 (t)
.
w0 B0,2 (t) + w1 B1,2 (t) + w2 B2,2 (t)

(7.12)

7. B´zier Curves II
e

177

2
1
0
-1
-2
0
2
45

Figure 7.4

4

3

2

1

Spatial rational B´zier curve
e

It was noted in Sections 5.6.4 and 5.6.5 that any conic can be parametrized by
quadratic rational functions, and conversely, that any curve parametrized by
quadratic rational functions is a conic. Thus quadratic rational B´zier curves
e
are conics. The classiﬁcation of conics, given in Table 5.1, determines the type
of a quadratic B´zier curve (assumed not to be a line) to be as follows:
e
2
ellipse when w1 − w0 w2 < 0;
2
parabola when w1 − w0 w2 = 0;
2
hyperbola when w1 − w0 w2 > 0.

7.5.1 Properties of Rational B´zier Curves
e
Rational B´zier curves inherit a number of the properties of integral B´zier
e
e
curves.
Convex Hull Property: Suppose wi > 0 for all i = 0, . . . , n. Then every
point on the curve lies in the convex hull of the control polygon.
Invariance under Aﬃne Transformations: If T is an aﬃne transformation, then
T

n
i=0 wi bi Bi,n (t)
n
i=0 wi Bi,n (t)

=

n
i=0

wi T (bi ) Bi,n (t)
n
i=0 wi Bi,n (t)

.

Variation Diminishing Property: Suppose wi > 0 for all i. The VDP holds
as for integral B´zier curves. See Section 6.7.
e
Endpoint Interpolation: B(0) = b0 , B(1) = bn .
n−1
Endpoint Tangent: B (0) = n w1 (b1 − b0 ) and B (1) = n wwn (bn − bn−1 ).
w0
See Section 7.5.4.

178

Applied Geometry for Computer Graphics and CAD

Invariance under Projective Transformations: If T is a projective transformation, then
n

T

n

ˆ
bi Bi,n (t)

ˆ
T bi Bi,n (t) .

=

i=0

i=0

See Section 7.5.3 for details.

Lemma 7.23
The circular arc, radius r, centred at the origin with endpoints (r, 0) and
(r cos θ, r sin θ), θ ∈ [−π, π], has a rational quadratic B´zier representation given
e
by control points
b0 (r, 0), b1 r, r tan

θ
2

, b2 (r cos θ, r sin θ) ,

and weights w0 = w2 = 1 and w1 = cos θ .
2

Proof
Then
x(t) =
y(t) =

r(1 − t)2 + 2rt(1 − t) cos θ + rt2 cos θ
2
(1 − t)2 + 2t(1 − t) cos θ + t2
2
2rt(1 − t) sin θ + rt2 sin θ
2
(1 − t)2 + 2t(1 − t) cos θ + t2
2

,

and

.

The tedious task of showing that the curve is circular, that is x(t)2 +y(t)2 = r2 ,
is left to the reader. The CHP implies that the curve lies within the triangular
region deﬁned by the control points, and thus the curve is a circular arc.

Example 7.24
The unit quarter circle in the ﬁrst quadrant obtained by taking r = 1, θ = π
2
in Lemma 7.1 does not give the parametrization of Example 7.1. The curve is
√
given by b0 (1, 0), b1 (1, 1) , b2 (0, 1), w0 = w2 = 1, w1 = 1/ 2, which yields
√
√
√
2 (1 − t) t + 1 + 2
(1 − t)2 + 2t(1 − t)
√
√
x(t) =
,
=
2t2 − 2t + 2 + 2
(1 − t)2 + t(1 − t) 2 + t2
√ √
√
2 2+2−t t
2t(1 − t) + t2
√
√ .
y(t) =
=
2+
2
2 − 2t + 2 +
2t
(1 − t)
2t(1 − t) + t
2

7. B´zier Curves II
e

179

2t−1
The arclength function for this parametrization is s(t) = 2 arctan √2+1 +π/4
which, surprisingly, diﬀers from the unit speed arclength function s(t) = π t by
2
less than 0.0167 over the interval [0, 1]. The parametrization of Example 7.21
has arclength function s(t) = 2 arctan t which diﬀers from s(t) = π t by as much
2
as 0.1451.

Rational B´zier curves oﬀer greater ﬂexibility for curve design since for a
e
given set of control points there are an inﬁnite number of curves depending on
the choice of weights. When a weight is adjusted the whole curve changes, but
in a predictable manner, as described in the next theorem.

Theorem 7.25
Suppose a weight wk is changed to wk + δwk , then every point b = B(t) moves
to the point bw = (1 − α)b + αbk where
α=

n
i=0

δwk Bk,n (t)
.
wi Bi,n (t) + δwk Bk,n (t)

Proof
For α deﬁned as above
1−α=

n
i=0

n
i=0

wi Bi,n (t)
wi Bi,n (t) + δwk Bk,n (t)

Then
bw

n
i=0 wi bi Bi,n (t) + δwk bk Bk,n (t)
n
i=0 wi Bi,n (t) + δwk Bk,n (t)
n
δwk Bk,n (t)
i=0 wi bi Bi,n (t)
+ n
bk
n
wi Bi,n (t) + δwk Bk,n (t)
wi Bi,n (t) + δwk Bk,n (t)
i=0
i=0
n
n
i=0 wi Bi,n (t)
i=0 wi bi Bi,n (t)
n
n
wi Bi,n (t) + δwk Bk,n (t)
i=0
i=0 wi Bi,n (t)

=
=
=

δwk Bk,n (t)
bk
wi Bi,n (t) + δwk Bk,n (t)
(1 − α)b + αbk .
+

=

n
i=0

180

Applied Geometry for Computer Graphics and CAD

EXERCISES
7.17. Prove the convex hull property for rational B´zier curves of degree
e
n with positive weights.
7.18. Prove the endpoint interpolation property for rational B´zier curves
e
of degree n.
2
7.19. Show that when w1 − w0 w2 = 0, a rational quadratic B´zier curve
e
can be reparametrized to give an integral quadratic B´zier curve.
e

7.20. Consider a rational quadratic B´zier curve given by (7.12). Suppose
e
w0 = w2 = 1, and deﬁne the midpoint M = 1 (b0 + b2 ) and the
2
shoulder point S = (1 − s)M + sb1 where s = w1 /(1 + w1 ). Show
that the curve is (a) an ellipse when −1 < w1 < 1 (s < 1/2), (b) a
parabola when w1 = 1 or w1 = −1 (s = 1/2 or ∞), or (c) a hyperbola when w1 > 1 or w1 < −1 (s > 1/2). Further show that S is the
point on the curve corresponding to t = 1/2.

7.5.2 de Casteljau Algorithm for Rational Curves
The de Casteljau algorithm for integral B´zier curves extends to the rational
e
case. There are two ways of performing the algorithm.
Method 1.

Suppose

n
i=0 wi bi Bi,n (t)
n
i=0 wi Bi,n (t)

B(t) =

where bi = (xi , yi ) for planar curves and bi = (xi , yi , zi ) for spatial curves. Let
ˆ
ˆ
bi = (wi xi , wi yi , wi ) for planar curves and bi = (wi xi , wi yi , wi zi , wi ) for spatial
curves. Apply the de Casteljau algorithm for integral B´zier curves (described
e
in Section 6.8), treating the weight wi as an additional coordinate.
Method 2. The ﬁrst method, though straightforward to implement and computationally eﬃcient, is prone to computational errors under certain conditions. The problem is avoided if the homogeneous control points are converted
to Cartesian coordinates at the end of each iteration. The new algorithm is
⎧
j−1
j−1
wi+1
wi
⎨ j
bi = (1 − t) wj bj−1 + t wj bj−1
i
i+1
,
(7.13)
i
i
⎩ wj = (1 − t)wj−1 + twj−1
i

i

for j = 1, . . . , n and i = 0, . . . , n − j.

i+1

7. B´zier Curves II
e

181

The rational de Casteljau algorithm evaluates the point B(t) and subdivides
the curve at the point corresponding to the parameter value t.

Example 7.26
Let a rational cubic B´zier curve have control points b0 (1, 1), b1 (2, 7), b2 (8, 6),
e
b3 (12, 1) and weights w0 = 1, w1 = 2, w2 = 2, w3 = 1. Then the rational de
Casteljau algorithm with t = 0.25 yields the triangles of weights
1.0
1.25
1.4375
1.5625

2.0
2.0
1.9375

2.0
1.75

1.0

and control points
(1.0, 1.0)
(1.4, 3.4)
(2.1304, 4.5652)
(2.91, 5.14)

(2.0, 7.0)
(3.5, 6.75)
(4.6452, 6.4194)

(8.0, 6.0)
(8.5714, 5.2857)

(12.0, 1.0)
.

Thus B(0.25) = (2.91, 5.14).

7.5.3 Projections of Rational B´zier Curves
e
The property of invariance under projective transformations is a useful feature
for the computer display of rational B´zier curves. To apply a projective transe
formation to a rational B´zier curve, it is suﬃcient to apply the transformation
e
to the control points and weights in the manner described below. The transformed images of the control points and weights deﬁne the rational B´zier curve
e
which is the image of the original curve. The property is proved as follows. Let
M be a 4 × 4 projective transformation matrix. In homogeneous coordinates
the curve
n
wi bi Bi,n (t)
B(t) = i=0
n
i=0 wi Bi,n (t)
with bi = (xi , yi , zi ) is expressed as
n

ˆ
bi Bi,n (t) ,

B(t) =
i=0

ˆ
ˆ
where bi = (xi wi , yi wi , zi wi , wi ) if wi = 0, and bi = (xi wi , yi wi , zi wi , 0) if
wi = 0. Applying M yields
n

n

ˆ
bi Bi,n (t) M =

B(t)M =
i=0

n

ˆ
bi M Bi,n (t) =
i=0

ˆi Bi,n (t) ,
c
i=0

(7.14)

182

Applied Geometry for Computer Graphics and CAD

deﬁning a rational B´zier curve with control points ci and weights deﬁned by
e
ˆ
the homogeneous control points ˆi = bi M. In particular, if M is the 4 × 4
c
projection matrix of a perspective or parallel projection, then the image of
a rational B´zier curve is determined by projecting the homogeneous control
e
points. The image curve has control points which are the projected images of
the original control points but the weights have changed. Thus the projected
image of an integral B´zier curve is, in general, a rational B´zier curve.
e
e
It is easily shown that the argument expressed in (7.14) also applies to
the viewplane coordinate mapping matrix VC. Furthermore, the invariance of
planar rational B´zier curves under aﬃne transformations applies to the device
e
coordinate mapping DC . Thus the whole process of viewing a rational B´zier
e
curve can be executed by applying the complete viewing pipeline matrix VP =
M · VC · DC to the control points.

Example 7.27
Consider the perspective projection of Example 4.7 onto the xy-plane with
viewpoint V(1, 5, 3). Further, suppose that the viewplane origin is (1, 2, 0),
the X-axis has direction (3, 4, 0), and the Y -axis has direction (8, −6, 0), as in
Example 4.8. The product M · VC of the projection matrix M and viewplane
coordinate matrix VC is
⎛
⎞⎛
⎞ ⎛
⎞
−3
0 0
0
0.6
0.8 0.0
0.0
−1.8 −2.4
⎜ 0 −3 0
0 ⎟ ⎜ 0.8 −0.6 0.0 ⎟ ⎜ −2.4
1.8
0.0 ⎟
⎜
⎟⎜
⎟=⎜
⎟ .
⎝ 1
⎠ ⎝ 0.0
⎠ ⎝ 2.4 −1.8
5 0
1
0.0 0.0
1.0 ⎠
0

0 0

−3

−2.2

0.4

1.0

6.6

−1.2

−3.0

(The viewing pipeline can be completed by applying a device coordinate mapping D.) The projection and conversion to viewplane coordinates of the cubic
rational B´zier curve B(t) with control points b0 (0, 0, 0), b1 (1, 0, 0), b2 (1, 0, 1),
e
b3 (1, 1, 1), and weights 1, 2, 2, 1 is obtained as follows. The homogeneous control
ˆ
ˆ
ˆ
ˆ
points are b0 (0, 0, 0, 1), b1 (2, 0, 0, 2), b2 (2, 0, 2, 2), b3 (1, 1, 1, 1). Thus,
⎛
⎞
⎛
⎞
⎛
⎞
ˆ
b0
0 0 0 1
6.6
−1.2 −3.0
⎜ ˆ ⎟
⎜ 2 0 0 2 ⎟
⎜ 9.6
−7.2 −6.0 ⎟
⎜ b1 ⎟
⎟
⎜
⎟
⎜ ˆ ⎟ M · VC = ⎜
⎝ 2 0 2 2 ⎠ M · VC = ⎝ 14.4 −10.8 −4.0 ⎠ .
⎝ b2 ⎠
ˆ
1 1 1 1
4.8
−3.6 −2.0
b3
The projected curve is given by homogeneous control points ˆ0 (6.6, −1.2, −3.0),
c
c
c
ˆ1 (9.6, −7.2, −6.0), ˆ2 (14.4, −10.8, −4.0), ˆ3 (4.8, −3.6, −2.0). Since all the
c
weights are negative, the ˆi can be multiplied by −1 to give points with
c
corresponding positive weights. After dividing through by the weights the

7. B´zier Curves II
e

183

projected curve is found to be the planar quadratic B´zier curve with cone
trol points c0 (−2.2, 0.4), c1 (−1.6, 1.2), c2 (−3.6, 2.7), and c3 (−2.4, 1.8), and
weights 3, 6, 4, and 2.
For instance, the point B(0.75) = (0.99, 0.27, 0.81) projects to the point
with homogeneous coordinates
0.99

0.27

0.81

M · VC =

1.0

6.114

−4.548

−2.19

,

and Cartesian coordinates (−2.791781, 2.076712). The point can also be computed using the control points and weights of the projected curve
3

wi bi Bi,n (t)

=

(−6.6, 1.2)(0.25)3 + (−9.6, 7.2)3(0.25)2 (0.75)

i=0

+ (−14.4, 10.8)3(0.25)(0.75)2 + (−4.8, 3.6)(0.75)3
=

(−9.553125, 7.10625) ,

3

=

3(0.25)3 + 18(0.25)2 (0.75) + 12(0.25)(0.75)2 + 2(0.75)3

=

wi Bi,n (t)

3.421875 .

i=0

Hence B(0.75) = (−9.553125, 7.10625) /3.421875 = (−2.791781, 2.076712).
The projection of the curve is shown in Figure 7.5.
2.8
2.4
2
1.6

V

1.2
0.8
0.4
0
–1

0

1

2

3

4

0
5

1

Figure 7.5

184

Applied Geometry for Computer Graphics and CAD

EXERCISES
7.21. Apply the rational de Casteljau algorithm to the cubic curve with
control points b0 (3, 2), b1 (7, 6), b2 (5, 3), b3 (3, 0) and weights
w0 = 2, w1 = 3, w2 = 5, w3 = 1 to determine (a) the point B(0.6),
and (b) the control points of the two B´zier curve segments obtained
e
following a subdivision at the point B(0.6).
7.22. A rational B´zier curve B(t) with w0 = 0 and wn = 0 can be
e
reparametrized to give a rational B´zier curve for which w0 = wn =
e
1. Prove this by (a) dividing the denominator and numerator of B(t)
by w0 to give a rational curve with w0 = 1, and (b) verifying that
the transformation
t = t1 /(a + (1 − a)t1 ) ,

(1 − t) = a(1 − t1 ) /(a + (1 − a)t1 ) ,

√
where a = n wn , yields a new rational curve in the variable t1 with
w0 = wn = 1.
7.23. Implement the rational de Casteljau algorithm and the operation of
projecting a rational B´zier curve.
e
7.24. Compute the control points and weights of the image of the rational B´zier curve with control points (1, 2, −1), (3, 5, 4), (−1, 3, 3),
e
(0, 1, 2), and weights 2, 1/2, 4, 3, when projected from the point
(9, 7, 5) onto the plane 3x + 3y + 12 = 0. Assume that the viewplane coordinate system has origin (−4, 0, 0), and that the X- and
Y -axes have directions (−1, 1, 0) and (0, 0, 1) respectively.
7.25. Show that the application of a projective transformation M = (mij )
of an integral B´zier curve with control points bi = (xi , yi , zi ) yields
e
a rational B´zier curve with control points
e
ci = (ci,1 /wi , ci,2 /wi , ci,3 /wi ) ,
and weights wi , where ci,j = xi m1j + yi m2j + zi m3j + m4j and wi =
xi m14 +yi m24 +zi m34 +m44 . Using the notation of Theorem 4.5, deduce that a projection M yields weights wi = (xi n1 + yi n2 + zi n3 ) v4
+ (−n1 v1 − n2 v2 − n3 v3 ). Hence show that a projection of an integral curve is an integral curve if and only if (a) the projection is
parallel, or (b) the projection is perspective and the curve lies in a
plane parallel to the viewplane (not containing the viewpoint).

7. B´zier Curves II
e

185

7.5.4 Derivatives of Rational B´zier Curves
e
A recursive formula to determine the derivative of a rational B´zier curve is
e
obtained from the following method for diﬀerentiating rational functions. Let
F (t) = f (t)/ g(t). Then the quotient rule gives
F (t) =

g(t)f (t) − g (t)f (t)
f (t) − g (t)F (t)
.
=
2
g(t)
g(t)

(7.15)

The Leibnitz rule [27] for obtaining the derivatives of a product of two functions
yields that the rth derivative of f (t) = g(t)F (t) is
r

f

(r)

(t)

=
i=0

r (i)
g (t)F (r−i) (t)
i
r

r (i)
g (t)F (r−i) (t) .
i

= g(t)F (r) (t) +
i=1

Hence
f (r) (t) −
F

(r)

(t) =

r
i=1

r
i

g (i) (t)F (r−i) (t)
.

g(t)

(7.16)

Thus the rth derivative of F (t) can be obtained in terms of the ﬁrst r − 1
derivatives of F (t), and the ﬁrst r derivatives of f (t) and g(t).
Consider a rational B´zier curve of degree n
e
B(t) =

n
i=0 wi bi Bi,n (t)
n
i=0 wi Bi,n (t)

n

.

n

Let f (t) = i=0 wi bi Bi,n (t) and g(t) = i=0 wi Bi,n (t). The derivatives of f (t)
and g(t) are obtained by applying the algorithm to determine the derivatives
of integral B´zier curves given in Section 7.2, where wi bi are considered to be
e
the control points of f (t), and the weights wi are considered to be the control
points of g(t). In particular, for n = 1 and n = 2
B (t)

=

B (t)

=

n
i=0

n

wi bi Bi,n (t)) − ( i=0 wi Bi,n (t)) B(t)
,
n
i=0 wi Bi,n (t)
( n wi bi Bi,n (t)) −2( n wi Bi,n (t)) B (t)−( n wi Bi,n (t))
i=0
i=0
i=0
(

n
i=0

wi Bi,n (t)

B(t)

.

Therefore,
B (0) =

n (w1 b1 − w0 b0 ) − n (w1 − w0 ) b0
w1
=n
(b1 − b0 ) .
w0
w0

n−1
Similarly, B (1) = n wwn (bn − bn−1 ). The endpoint tangent condition of Section 7.5.1 is now proved.

186

Applied Geometry for Computer Graphics and CAD

Example 7.28
Consider the rational cubic B´zier curve with control points b0 (2, 1), b1 (5, 6),
e
b2 (6, 2), b3 (9, 3) and weights w0 = 3, w1 = 2, w2 = 1, w3 = 4. Multiply bi
3
by wi to give the control points of f (t) = i=0 wi bi Bi,n (t) : (6, 3), (10, 12),
(6, 2), (36, 12). Hence f (t) has control points 3((10, 12) − (6, 3)) = (12, 27),
3((6, 2) − (10, 12)) = (−12, −30), and 3((36, 12) − (6, 2)) = (90, 30). The control
3
values of g(t) = i=0 wi Bi,n (t) are 3, 2, 1, 4, and hence the control values of
g (t) are 3(2 − 3) = −3, 3(1 − 2) = −3, 3(4 − 1) = 9. Then B (0.25) is computed
as follows:
f (0.25)

= (1 − 0.25)3 (6, 3) + 3(1 − 0.25)2 (0.25)(10, 12)
+ 3(1 − 0.25)(0.25)2 (6, 2) + (0.25)3 (36, 12)
=

g(0.25)

(8.156, 6.797) ,

= (1 − 0.25)3 3 + 3(1 − 0.25)2 (0.25)2
+ 3(1 − 0.25)(0.25)2 1 + (0.25)3 4 = 2.313 ,

f (0.25)

= (1 − 0.25)2 (12, 27) + 2(1 − 0.25) (0.25) (−12, −30)
2

+ (0.25) (90, 30) = (7.875, 5.8125) ,
g (0.25)

2

= (1 − 0.25)2 (−3) + 2(1 − 0.25) (0.25) (−3) + (0.25) (9) = −2.25 .

Hence
B(0.25) = f (0.25)/g(0.25) = (8.156, 6.797)/ 2.313 = (3.526, 2.939) ,
and
B (0.25)

f (0.25) − g (0.25)B(0.25)
g(0.25)
(7.875, 5.813) − (−2.25) (3.526, 2.939)
=
2.313
≈ (6.835, 5.372) .
=

EXERCISES
7.26. Evaluate, at t = 0.5, the ﬁrst derivative of the rational cubic B´zier
e
curve with control points b0 (0, 0), b1 (2, 1), b2 (3, 3), b3 (2, 0) and
weights w0 = 1, w1 = 2, w2 = 2, w3 = 1.
7.27. Evaluate, at t = 0.25, the second derivative of the rational B´zier
e
curve given in Example 7.28.
7.28. Implement an algorithm to determine the ﬁrst derivative of a rational
B´zier curve. If time is available then implement an algorithm to
e
determine higher order derivatives.

8

B-splines

8.1 Integral B-spline Curves
A piecewise polynomial curve has a B-spline basis representation with properties similar to those of a B´zier curve. A B-spline curve deﬁned on the interval
e
[a, b] is speciﬁed by the following information:
1. The degree d (or order d + 1), so that each segment of the piecewise polynomial curve has degree d or less.
2. A sequence of m + 1 real numbers t0 , t1 , . . . , tm , called the knot vector ,
such that ti ≤ ti+1 (i = 0, . . . , m − 1), td = a and tm−d = b. The knots
t0 , t1 , ..., td and tm−d , tm−d+1 , . . . , tm are called end knots, and the knots
td+1 , td+2 , ..., tm−d−1 are called interior knots.
3. Control points b0 , . . . , bn .
A B-spline curve is deﬁned in terms of B-spline basis functions.

Deﬁnition 8.1
The B-spline basis functions of degree d, denoted Ni,d (t), deﬁned by the knot

187

188

Applied Geometry for Computer Graphics and CAD

vector t0 , t1 , . . . , tm are deﬁned recursively as follows:
Ni,0 (t)
Ni,d (t)

1, if t ∈ [ti , ti+1 )
,
0, otherwise
t − ti
ti+d+1 − t
Ni,d−1 (t) +
Ni+1,d−1 (t) ,
ti+d − ti
ti+d+1 − ti+1

=
=

(8.1)
(8.2)

for i = 0, . . . , n and d ≥ 1. If the knot vector contains a suﬃcient number
of repeated knot values, then a division of the form Ni,d−1 (t)/ (ti+d − ti ) =
0/0 (for some i) may be encountered during the execution of the recursion.
Whenever this occurs, it is assumed that 0/0 = 0.

Deﬁnition 8.2
The B-spline curve of degree d (or order d + 1) with control points b0 , ..., bn
and knots t0 , ..., tm is deﬁned on the interval [a, b] = [td , tm−d ] by
n

bi Ni,d (t) ,

B(t) =
i=0

where Ni,d (t) are the B-spline basis functions of degree d. To distinguish Bspline curves from their rational form (which will be introduced in Section 8.2)
they are often referred to as integral B-splines.

Example 8.3
Let d = 2, and t0 = 2, t1 = 4, t2 = 5, t3 = 7, t4 = 8, t5 = 10, t6 = 11,
with control points b0 (1, 2), b1 (3, 5), b2 (6, 2), b3 (9, 4). Then the k = 0 basis
functions are
N0,0 (t)

=

1,
0,

if t ∈ [2, 4)
,
otherwise

N1,0 (t) =

1,
0,

if t ∈ [4, 5)
,
otherwise

N2,0 (t)

=

1,
0,

if t ∈ [5, 7)
,
otherwise

N3,0 (t) =

1,
0,

if t ∈ [7, 8)
,
otherwise

N4,0 (t)

=

1,
0,

if t ∈ [8, 10)
,
otherwise

N5,0 (t) =

1,
0,

if t ∈ [10, 11)
.
otherwise

8. B-splines

189

The k = 1 basis functions are determined in terms of these
N0,1 (t) =
=
N1,1 (t) =
=
N2,1 (t) =
N3,1 (t) =
N4,1 (t) =

t−t0
t2 −t
t−2
5−t
t1 −t0 N0,0 (t) + t2 −t1 N1,0 (t) = 4−2 N0,0 (t) + 5−4 N1,0 (t)
t−2
2 N0,0 (t) + (5 − t) N1,0 (t) ,
t−t1
t3 −t
t−4
7−t
t2 −t1 N1,0 (t) + t3 −t2 N2,0 (t) = 5−4 N1,0 (t) + 7−5 N2,0 (t)
(t − 4) N1,0 (t) + 1 (7 − t) N2,0 (t) ,
2
t−t2
t4 −t
1
t3 −t2 Ni,0 (t) + t4 −t3 N3,0 (t) = 2 (t − 5) N2,0 (t) + (8 − t) N3,0 (t) ,
t−t3
t5 −t
1
t4 −t3 N3,0 (t) + t5 −t4 N4,0 (t) = (t − 7) N3,0 (t) + 2 (10 − t) N4,0 (t)
t−t4
t6 −t
1
t5 −t4 N4,0 (t) + t6 −t5 N5,0 (t) = 2 (t − 8) N4,0 (t) + (11 − t) N5,0 (t)

Finally, the k = 2 basis functions can be computed
N0,2 (t) =
=
=
N1,2 (t) =
=
=
N2,2 (t) =
=
=
N3,2 (t) =
=
=

t−t0
t3 −t
t−2
7−t
t2 −t0 N0,1 (t) + t3 −t1 N1,1 (t) = 3 N0,1 (t) + 3 N1,1 (t)
t−2 t−2
3
2 N0,0 (t) + (5 − t) N1,0 (t)
7−t
+ 3 (t − 4) N1,0 (t) + 7−t N2,0 (t)
2
2
2
1
1
6 (t − 2) N0,0 (t) + 3 −2t + 18t − 38 N1,0 (t)
2
+ 1 (7 − t) N2,0 (t) ,
6
t−t1
t4 −t
t−4
8−t
t3 −t1 N1,1 (t) + t4 −t2 N2,1 (t) = 3 N1,1 (t) + 3 N2,1 (t)
t−4
(t − 4) N1,0 (t) + 7−t N2,0 (t)
3
2
+ 8−t t−5 N2,0 (t) + (8 − t) N3,0 (t)
3
2
2
1
(t − 4) N1,0 (t) + 1 −t2 + 12t − 34 N2,0 (t)
3
3
2
+ 1 (8 − t) N3,0 (t) ,
3
t−t2
t5 −t
t−5
10−t
t4 −t2 N2,1 (t) + t5 −t3 N3,1 (t) = 3 N2,1 (t) + 3 N3,1 (t)
t−5 t−5
3
2 N2,0 (t) + (8 − t) N3,0 (t)
10−t
+ 3 (t − 7) N3,0 (t) + 10−t N4,0 (t)
2
2
1
(t − 5) N2,0 (t) + 1 −2t2 + 30t − 110 N3,0 (t)
6
3
2
1
+ 6 (10 − t) N4,0 (t) ,
t−t3
t6 −t
t−7
11−t
t5 −t3 N3,1 (t) + t6 −t4 N4,1 (t) = 3 N3,1 (t) + 3 N4,1 (t)
t−7
(t − 7) N3,0 (t) + 10−t N4,0 (t)
3
2
+ 11−t t−8 N4,0 (t) + (11 − t) N5,0 (t)
3
2
2
1
(t − 7) N3,0 (t) + 1 −t2 + 18t − 79 N4,0 (t)
3
3

+

1
3

2

(11 − t) N5,0 (t) .

,
.

190

Applied Geometry for Computer Graphics and CAD

N 0,1 N 1,1

1
0

1

2

3

4

5

N 2,1 N 3,1
6
t

7

8

N 4,1
9

10

11

12

Figure 8.1
Basis functions of degree 1 for the knot vector t0 = 2, t1 = 4,
t2 = 5, t3 = 7, t4 = 8, t5 = 10, t6 = 11
The k = 2 basis functions may be expressed in the form
⎧
⎪ 0,
t<2
⎪
⎪ 1
⎪ (t − 2)2 ,
⎪
2≤t<4
⎨ 6
1
N0,2 (t) =
−2t2 + 18t − 38 , 4 ≤ t < 5 ,
⎪ 3
⎪ 1 (7 − t)2 ,
⎪ 6
5≤t<7
⎪
⎪
⎩
0,
7≤t
⎧
⎪ 0,
t<4
⎪
⎪
⎪ 1 (t − 4)2 ,
⎪
4≤t<5
⎨ 3
1
N1,2 (t) =
−t2 + 12t − 34 , 5 ≤ t < 7 ,
⎪ 3
⎪ 1 (8 − t)2 ,
⎪ 3
7≤t<8
⎪
⎪
⎩
0,
8≤t

N2,2 (t)

N3,2 (t)

⎧
⎪ 0,
⎪
⎪
⎪ 1 (t − 5)2 ,
⎪
⎨ 6
1
=
−2t2 + 30t − 110
⎪ 3
⎪ 1 (10 − t)2 ,
⎪ 6
⎪
⎪
⎩
0,
⎧
⎪ 0,
⎪
⎪ 1
⎪ (t − 7)2 ,
⎪
⎨ 3
1
=
−t2 + 18t − 79 ,
⎪ 3
⎪ 1 (11 − t)2 ,
⎪ 3
⎪
⎪
⎩
0,

,

t<5
5≤t<7
7≤t<8
8 ≤ t < 10
10 ≤ t
t<7
7≤t<8
8 ≤ t < 10
10 ≤ t < 11
11 ≤ t

,

and

.

Plots of the degree 1 and 2 basis functions are shown in Figures 8.1 and 8.2.
Observe that the basis functions satisfy Ni,2 (t) > 0 for t ∈ (ti , ti+3 ) and
Ni,2 (t) = 0 elsewhere. General B-spline basis functions satisfy similar “positivity” and “local support” properties (see Theorem 8.5). The B-spline curve

8. B-splines

191

N 0,2

1
0

1

2

3

4

N 1,2

7

6
t

5

N 2,2

N 3,2

8

9

10

11

12

Figure 8.2
Basis functions of degree 2 for the knot vector t0 = 2, t1 = 4,
t2 = 5, t3 = 7, t4 = 8, t5 = 10, t6 = 11
is deﬁned on the interval [5, 8] by
B(t)

=

(1, 2)N0,2 (t) + (3, 5)N1,2 (t) + (6, 2)N2,2 (t) + (9, 4)N3,2 (t)
⎧
2
1
1
2
⎪
⎪
6 (7 − t) (1, 2) + 3 −t + 12t − 34 (3, 5)
⎪
if 5 ≤ t < 7,
⎨
2
+ 1 (t − 5) (6, 2),
6
=
⎪ 1 (8 − t)2 (3, 5) + 1 −2t2 + 30t − 110 (6, 2)
⎪
3
⎪ 3
if 7 ≤ t ≤ 8.
2
⎩
+ 1 (t − 7) (9, 4),
3
(8.3)

The B-spline curve, shown in Figure 8.3, is the union of two polynomial curve
segments.
4
3
2
1
0

1

Figure 8.3

2

3

4

5

6

7

B-spline of Example 8.3

Whereas a B´zier curve of degree d has exactly d + 1 control points, a Be
spline of degree d can have any number of control points provided a suﬃcient
number of knots are speciﬁed. Therefore, in order to deﬁne complex curve
shapes, B-splines can be given additional freedom by increasing the number of
control points, yet without increasing the degree of the curve.
Each basis function Ni,d (t) is deﬁned by d + 2 knots ti , . . . , ti+d+1 . So if
n + 1 control points are required, then it is necessary to specify n + d + 2 knots
t0 , . . . , tn+d+1 . Therefore, the number of knots equals the number of control

192

Applied Geometry for Computer Graphics and CAD

points plus the degree plus one, giving the identity
m=n+d+1.
A knot vector can have repeated knot values. The number of times a knot value
occurs is called the multiplicity of the knot. Deﬁne a new sequence u0 , . . . , ur
(u0 < · · · < ur ), called the breakpoints, consisting of the distinct values of the
interior knots. Then the B-spline is the union of the polynomial curve segments
Bi (t) of degree d, t ∈ [ui , ui+1 ).

Example 8.4
The breakpoints of Example 8.3 are u0 = 5, u1 = 7, and u2 = 8, and the
B-spline consists of two segments. In Figure 8.3, the start and end points of
each segment are indicated by a • on the curve. The parametric equations of
the two polynomial curve segments are obtained from Equation (8.3)
B0 (t)

1
6

=

2

(7 − t) (1, 2) +

1
3

−t2 + 12t − 34 (3, 5) +

− 65 + 8t − 2 t2 , − 701 +
3
3
18

=

133
9 t

−

23 2
18 t

1
6

2

(t − 5) (6, 2)

,

deﬁned on [u0 , u1 ) = [5, 7), and
B1 (t)

=
=

1
3

2

2
1
3 −2t + 30t − 110
2 2
340
100
7 2
3t , − 9 + 9 t − 9t

(8 − t) (3, 5) +

− 155 +
3

38
3 t

−

(6, 2) +

1
3

2

(t − 7) (9, 4)

,

deﬁned on [u1 , u2 ) = [7, 8].

Theorem 8.5
The B-spline basis functions Ni,k (t) satisfy the following properties.
Positivity: Ni,k (t) > 0 for t ∈ (ti , ti+k+1 ).
Local Support: Ni,k (t) = 0 for t ∈ (ti , ti+k+1 ).
/
Piecewise Polynomial: Ni,k (t) are piecewise polynomial functions of
degree k.
Partition of Unity:

r
j=r−k

Nj,k (t) = 1, for t ∈ [tr , tr+1 ).

Continuity: If the interior knot ti has multiplicity pi , then Ni,k (t) is C k−pi
at t = ti . Ni,k (t) is C ∞ elsewhere.

8. B-splines

193

Proof
The ﬁrst three properties are proved by induction on k. The initial induction
step k = 0 is satisﬁed since it is clear from (8.1) that the basis functions Ni,0 (t)
satisfy the positivity and local support properties, and that they are piecewise
polynomial functions.
The induction hypothesis is that all basis functions of degree k, Ni,0 (t), . . . ,
Ni,k (t), satisfy the three properties. Then
Ni,k+1 (t) =

t − ti
ti+k+2 − t
Ni,k (t) +
Ni+1,k (t) ,
ti+k+1 − ti
ti+k+2 − ti+1

where Ni,k (t) > 0 for t ∈ (ti , ti+k+1 ), Ni,k (t) = 0 for t ∈ (ti , ti+k+1 ),
/
/
Ni+1,k (t) > 0 for t ∈ (ti+1 , ti+k+2 ), Ni+1,k (t) = 0 for t ∈ (ti+1 , ti+k+2 ).
/
/
Suppose t ∈ (ti , ti+k+2 ), then t ∈ (ti , ti+k+1 ), and t ∈ (ti+1 , ti+k+2 ). Thus
/
Ni,k (t) = 0 and Ni+1,k (t) = 0, and hence Ni,k+1 (t) = 0 as required. Next,
suppose t ∈ (ti , ti+k+2 ). If t ∈ (ti , ti+k+1 ), then
t − ti
ti+k+2 − t
> 0,
> 0, Ni,k (t) > 0, Ni+1,k (t) ≥ 0 ,
ti+k+1 − ti
ti+k+2 − ti+1
which imply Ni,k+1 (t) > 0. Otherwise, t ∈ (ti+1 , ti+k+2 ) and
t − ti
ti+k+2 − t
> 0,
> 0, Ni,k (t) ≥ 0, Ni+1,k (t) > 0 ,
ti+k+1 − ti
ti+k+2 − ti+1
which imply Ni,k+1 (t) > 0. In either case Ni,k+1 (t) > 0 as required.
Since the product of a polynomial and a piecewise polynomial is piecewise
polynomial, and the sum of two piecewise polynomials is piecewise polynomial,
it follows from (8.2), and the fact that Ni,k (t) and Ni,k+1 (t) are piecewise
polynomial, that Ni,k+1 (t) is piecewise polynomial. Hence, by induction, the
ﬁrst three properties are proved.
The partition of unity property is also proved by induction. The initial step
k = 0 is trivial. The induction hypothesis is that the partition of unity property
holds for the basis functions of degree k − 1. Then
r

Nj,k (t) = Nr−k,k (t) + · · · + Nr−1,k (t) + Nr,k (t)
j=r−k

194

Applied Geometry for Computer Graphics and CAD

t−tr−k
tr −tr−k Nr−k,k−1 (t)

=

··· +
+

t−tr−1
tr+k−1 −tr−1 Nr−1,k−1 (t)

t−tr
tr+k −tr Nr,k−1 (t)

t−tr−k
tr −tr−k Nr−k,k−1 (t)

=

··· +

tr+k −t
tr+k −tr

+

· · · + Nr,k−1 (t) +

+

+

+

tr+k −t
tr+k −tr Nr,k−1 (t)

tr+k+1 −t
tr+k+1 −tr+1 Nr+1,k−1 (t)
tr+1 −t
tr+1 −tr−k+1

+

t−tr
tr+k −tr

t−tr−k
tr −tr−k Nr−k,k−1 (t)

=

tr+1 −t
tr+1 −tr−k+1 Nr−k+1,k−1 (t)

+

+

Nr,k−1 (t) +

t−tr−k+1
tr+1 −tr−k+1

Nr−k+1,k−1 (t) +

tr+k+1 −t
tr+k+1 −tr+1 Nr+1,k−1 (t)

+ Nr−k+1,k−1 (t) +

tr+k+1 −t
tr+k+1 −tr+1 Nr+1,k−1 (t)

.

Since Nr−k,k−1 (t) = 0 for t ∈ (tr−k , tr ), and Nr+1,k−1 (t) = 0 for t ∈
/
/
(tr+1 , tr+k+1 ), it follows that
r

r

Nj,k (t) = Nr−k+1,k−1 (t) + · · · + Nr,k−1 (t) =
j=r−k

Nj,k−1 (t) .
j=r−k−1

The induction hypothesis implies
r

Nj,k−1 (t) = 1 .
j=r−k−1

Hence

r

Nj,k (t) = 1 ,
j=r−k

and the partition of unit property is proved.
The property of continuity is proved in Lemma 8.15.

8.1.1 Properties of the B-spline Curve
A number of properties of B-spline curves are expressed in the following theorem.

Theorem 8.6
n

A B-spline curve B(t) = i=0 bi Ni,d (t) of degree d deﬁned on the knot vector
t0 , . . . , tm satisﬁes the following properties.

8. B-splines

195

Local Control: Each segment is determined by d + 1 control points. If t ∈
[tr , tr+1 ) (d ≤ r ≤ m − d − 1), then
r

bi Ni,d (t) .

B(t) =
i=r−d

Thus to evaluate B(t) it is suﬃcient to evaluate Nr−d,d (t), . . . , Nr,d (t).
Convex Hull: If t ∈ [tr , tr+1 ) (d ≤ r ≤ m − d − 1), then
B(t) ∈ CH{br−d , ..., br } .
Continuity: If pi is the multiplicity of the breakpoint t = ui , then B(t) is
C d−pi (or greater) at t = ui , and C ∞ elsewhere.
Invariance under Aﬃne Transformations: Let T be an aﬃne transforman
n
tion. Then T ( i=0 bi Ni,d (t)) = i=0 T (bi ) Ni,d (t).

Proof
Suppose t ∈ [tr , tr+1 ). Then the positivity property implies that Ni,d (t) = 0
n
for all i ≤ r − d − 1 and for all i ≥ r + 1. Hence B(t) = i=0 bi Ni,d (t) =
r
j=r−d bj Nj,d (t), and the local control property is proved.
r
Further, the partition of unity property gives j=r−d Nj,d (t) = 1. It follows from the deﬁnition of the convex hull (Section 6.6) and the local control
property that B(t) ∈ CH{br−d , ..., br } for all t, thus establishing the convex
hull property.
Since B(t) is piecewise polynomial, it is C ∞ everywhere except at the breakpoints t = ui where the individual polynomial segments join. If ui is a breakpoint of multiplicity pi , then Ni,d (t) is C d−pi at t = ui and C ∞ elsewhere.
Hence, at t = ui , B(t) is a sum of functions which are either C d−pi or C ∞ .
Hence B(t) has continuity C d−pi .
Invariance under aﬃne transformations is proved in a similar manner to the
corresponding result for B´zier curves.
e

196

Applied Geometry for Computer Graphics and CAD

8.1.2 B-spline Types
Open B-splines
In general, B-spline curves do not interpolate the ﬁrst and last control points
b0 and bn . For curves of degree d, endpoint interpolation and an endpoint
tangent condition are obtained by open B-splines for which the end knots satisfy
t0 = t1 = ... = td and tm−d = tm−d+1 = ... = tm . A minor modiﬁcation of the
deﬁnition of the basis functions (8.1) is required in order to accommodate the
multiplicity of the knots: Nm−d−1 should take the value 1 at t = m − d (and 0
elsewhere). Since td ∈ [td , td+1 ), the local control property with r = d gives
d

B(td ) =

bj Nj,d (td ) .
j=0

For 0 ≤ j ≤ d,
Nj,d (td ) =

td −tj
tj+d −tj Nj,d−1 (td )

+

tj+1+d −td
tj+1+d −tj+1 Nj+1,d−1 (td )

.

Since t0 = t1 = ... = td , then tj = td , and therefore (applying the convention
0/0 = 0 for the case j = 0)
Nj,d (td ) = (0) Nj,d−1 (td ) +

tj+1+d −td
tj+1+d −tj+1 Nj+1,d−1 (td )

.

Therefore
Nj,d (td ) =

tj+1+d −td
tj+1+d −tj+1

td −tj+1
tj+d −tj+1 Nj+1,d−2 (td )

+

tj+2+d −td
tj+2+d −tj+2 Nj+2,d−2 (td )

.

Repeated similar simpliﬁcations and replacements of basis functions by ones of
lower order yields
Nj,d (td ) =

tj+1+d −td
tj+1+d −tj+1

tj+2+d −td
tj+2+d −tj+2

...

td+j+d −td
td+j+d −tj+d

Nj+d,0 (td ) .

(8.4)

Since Nj+d,0 (td ) = 0 for j > 0, it follows from (8.4) that Nj,d (td ) = 0 for j > 0.
When j = 0, identities (8.4) and Nd,0 (td ) = 1 give
N0,d (td ) =

t1+d −td
t1+d −t1

t2+d −td
t2+d −t2

...

td+d −td
td+d −td

Hence
d

B(td ) =

bj Nj,d (td ) = b0 .
j=0

Similarly,
B(tm−d ) = bn .

Nd,0 (td ) = 1 .

8. B-splines

197

In Example 8.19 it is shown that open B-splines also satisfy
B (td ) =

d
td+1 −t1 (b1

− b0 ) and B (tm−d ) =

d
tm−1 −tm−d−1 (bn

− bn−1 ) . (8.5)

Thus b0 , b1 deﬁne the initial tangent direction, and bn−1 , bn deﬁne the ﬁnal tangent direction of an open B-spline curve. The endpoint interpolation
and endpoint tangent properties imply that open B-splines behave in a similar
manner to B´zier curves.
e

Example 8.7
Let t0 = 0, t1 = 0, t2 = 0, t3 = 1, t4 = 2, t5 = 3, t6 = 4, t7 = 4, and t8 = 4.
The k = 0 basis functions are
1, if t ∈ [ti , ti+1 )
.
Ni,0 =
0, otherwise
The k = 1 basis functions are
N0,1 (t)

=

(t−0)
(0−0) N0,0

+

(0−t)
(0−0) N1,0

=0

N1,1 (t)

=

(t−0)
(0−0) N1,0

+

(1−t)
(1−0) N2,0

= (1 − t)N2,0 (t)

N2,1 (t)

=

(t−0)
(1−0) N2,0

+

(2−t)
(2−0) N3,0

= tN2,0 (t) + (2 − t)N3,2 (t) ,

=

(t−1)
(2−1) N3,0

+

(3−t)
(3−1) N4,0

= (t − 1)N3,0 (t) + (3 − t)N4,0 (t) ,

=

(t−2)
(3−2) N4,0

+

(4−t)
(4−2) N5,0

= (t − 2)N4,0 (t) + (4 − t)N5,0 (t) ,

N5,1 (t)

=

(t−3)
(4−3) N5,0

+

(4−t)
(4−4) N6,0

= (t − 3)N5,0

N6,1 (t)

=

(t−4)
(4−4) N6,0

+

(4−t)
(4−4) N7,0

=0

N3,1 (t)
N4,1 (t)

(using the convention 0/0 = 0) ,
(using 0/0 = 0) ,

(using 0/0 = 0) ,

(using 0/0 = 0) .

The k = 2 basis functions are
N0,2 (t)

=

N1,2 (t) =
N2,2 (t) =
N3,2 (t) =
N4,2 (t) =
N5,2 (t)

=

(1 − t)2 N2,0 (t) ,
2
1
1
2 (4 − 3t)tN2,0 (t) + 2 (2 − t) N3,0 (t) ,
2
1 2
3
9
1 2
2 t N2,0 (t) + (−t + 3t − 2 )N3,0 + ( 2 − 3t + 2 t )N4,0 ,
2
2
1
11
1 2
2 (t − 1) N3,0 (t) + (− 2 + 5t − t )N4,0 + (8 − 4t + 2 t )N5,0
2
1
3 2
2 (t − 2) N4,0 (t) + (−16 + 10t − 2 t )N5,0 ,
(t − 3)2 N5,0 (t) .

,

An open B-spline of degree d = 2, deﬁned on the given knot vector, consists of
the four segments
B1 (t)

=

B2 (t) =
B3 (t) =
B4 (t) =

(1 − t)2 b0 + 1 t(4 − 3t)b1 + 1 t2 b2 ,
2
2
1
2 (2
1
2 (3
1
2 (4

− t) b1 +
2

− t) b2 +
2

− t) b3 +
2

2
1
2 (−2t
2
1
2 (−2t
2
1
2 (−3t

+
+

t ∈ [0, 1] ,

6t − 3)b2 + 1 (t −
2
10t − 11)b3 + 1 (t
2

1)2 b3 ,
− 2) b4 ,
2

+ 20t − 32)b4 + (t − 3) b5 ,
2

t ∈ [1, 2] ,
t ∈ [2, 3] ,
t ∈ [3, 4] .

198

Applied Geometry for Computer Graphics and CAD

Note that B(0) = b0 and B(4) = b5 , and hence the B-spline interpolates the
ﬁrst and last control points.

EXERCISES
8.1. Let t0 = 0, t1 = 1, t2 = 2, t3 = 3, t4 = 4, t5 = 5, and t6 = 6. Determine the basis functions for a B-spline of degree 2. Use the method
of Examples 8.3 and 8.4 to obtain the equations of the segments of
a B-spline of degree 2 deﬁned on this knot vector.
8.2. Let t0 = 0, t1 = 1, t2 = 2, t3 = 3, t4 = 4, t5 = 5, t6 = 6, t7 = 7.
Determine the basis functions required for a B-spline of degree 3.
(The results of the previous exercise are useful!) Obtain the segments
of a B-spline of degree 3 deﬁned on this knot vector.
8.3. Let t0 = 0, t1 = 0, t2 = 0, t3 = 1, t4 = 2, t5 = 3, t6 = 3, and t7 = 3.
Determine the segments of an open B-spline of degree 2 deﬁned on
this knot vector.
8.4. The open cubic B-spline with knot vector t0 = t1 = t2 = t3 = 0
and t4 = t5 = t6 = t7 = 1 has just one segment which satisﬁes the
endpoint conditions. Determine the basis functions, and show that
the open B-spline is a cubic B´zier curve.
e
Uniform B-splines
A B-spline is said to be uniform whenever its knots are equally spaced, and
non-uniform otherwise. Let the knot vector be t0 = 0, t1 = 1, t2 = 2, . . . , tm =
m. The basis functions for the uniform B-spline of degree 2 on this knot vector
are obtained as follows:
Ni,0 (t) =

1,
0,

if t ∈ [ti , ti+1 )
otherwise

.

N0,1 (t)

=

(t−0)
(1−0) N0,0

+

(2−t)
(2−1) N1,0

= tN0,0 + (2 − t)N1,0 ,

N1,1 (t)

=

(t−1)
(2−1) N1,0

+

(3−t)
(3−2) N2,0

= (t − 1) N1,0 + (3 − t)N2,0 ,

=

(t−2)
(3−2) N2,0

+

(4−t)
(4−3) N3,0

= (t − 2) N2,0 + (4 − t)N3,0 .

N2,1 (t)

8. B-splines

N0,2 (t)

199

=
=
=
=

(t−0)
(3−t)
1
1
(2−0) N0,1 (t) + (3−1) N1,1 (t) = 2 tN0,1 (t) + 2 (3 − t)N1,1 (t)
1
1
2 t (tN0,0 + (2 − t)N1,0 ) + 2 (3 − t) ((t − 1)N1,0 + (3 − t)N2,0 )
2
1 2
1
1
1
2 t N0,0 + 2 t(2 − t) + 2 (3 − t)(t − 1) N1,0 + 2 (3 − t) N2,0
⎧ 1 2
t ∈ [0, 1]
⎨ 2t ,
− 1 3 − 6t + 2t2 , t ∈ [1, 2] .
⎩ 12
2
t ∈ [2, 3]
2 (3 − t) ,

The ith basis function is

=

t−i
i+3−t
(i+2)−i Ni,1 (t) + (i+3)−(i+1) Ni+1,1 (t)
t−i
i+3−t
2 Ni,1 (t) +
2 Ni+1,1 (t)

=

t−i
2

Ni,2 (t) =

+
=

t−i
(i+1)−i Ni,0 (t)
i+3−t
2

+

(i+2)−t
(i+2)−(i+1) Ni+1,0 (t)

t−(i+1)
(i+2)−(i+1) Ni+1,0 (t)

2
1
2 (t − i) Ni,0 (t)
+ 1 ((t − i)(i + 2 − t) + (i
2
+ 1 (i + 3 − t)2 Ni+2,0 (t) .
2

+

i+3−t
(i+3)−(i+2) Ni+2,0 (t)

+ 3 − t)(t − i − 1)) Ni+1,0 (t)

Thus the ith segment Bi (t), deﬁned on [i + 2, i + 3), is given by
i+2

Bi (t)

=

bj Nj,2 (t)
j=i

=

2
1
2 (i + 3 − t) bi
+ 1 ((t − i − 1)(i + 3
2
+ 1 (t − i − 2)2 bi+2 .
2

− t) + (i + 4 − t)(t − i − 2)) bi+1

Finally, the reparametrization t → t + i + 2 deﬁnes the segment on the interval
[0, 1] by
=

1
2 (1

=

Bi (t)

1
2

− t)2 bi + 1 (1 + 2t − 2t2 )bi+1 + 1 t2 bi+2
2
2
⎛
⎞
⎞⎛
1 −2 1
bi
2 0 ⎠ ⎝ bi+1 ⎠ .
t2 t 1 ⎝ −2
bi+2
1
1 0

(8.6)

Points on each segment are eﬃciently computed since the basis functions
1
1 2
2 1
2
2 (1 − t) , 2 (1 + 2t − 2t ), 2 t have only to be evaluated once for each t.
For uniform B-splines of degree d = 3, a similar method gives
⎛
⎞
⎞⎛
−1
3 −3 1
bi
⎜ 3 −6
3 0 ⎟ ⎜ bi+1 ⎟
⎟ .
⎟⎜
Bi (t) = 1 t3 t2 t 1 ⎜
6
⎝ −3
0
3 0 ⎠ ⎝ bi+2 ⎠
1

4

1

0

bi+3

200

Applied Geometry for Computer Graphics and CAD

Example 8.8
Consider the uniform B-spline B(t) of degree d = 2 deﬁned on the knot vector
t0 = 0, t1 = 1, t2 = 2, t3 = 3, t4 = 4, t5 = 5, t6 = 6, t7 = 7, and with control
points b0 (3, 2), b1 (7, −1), b2 (5, 2), b3 (4, 5), b4 (2, 3). The curve is deﬁned on
the interval [td , tm−d ] = [2, 5]. There are three curve segments deﬁned on the
sub-intervals [2, 3], [3, 4], and [4, 5]. For instance, to determine the point B(3.6)
which lies on the i = 1 segment, t = 3.6 is translated into the interval [0, 1]
using t → t − i − 2. The required parameter is t = 3.6 − 1 − 2 = 0.6, and (8.6)
gives
− 0.6)2 (7, −1) + 1 (1 + 2(0.6) − 2(0.6)2 )(5, 2) + 1 (0.6)2 (4, 5)
2
2

=

1
2 (1

=

B1 (0.6)

(4.98, 2.3) .
Periodic B-splines and Closed Periodic B-splines

In a number of applications, it is desirable to represent closed curves for
which the starting point equals the ﬁnishing point. A closed B´zier curve can
e
be obtained by choosing control points which form a closed control polygon.
But, in general, B-splines do not interpolate the ﬁrst and last control points,
and therefore a closed control polygon does not yield a closed curve. Closure of
the curve is obtained by imposing conditions on the control points and knots.
For instance, an open B-spline could be used for this purpose. An alternative
is to use a closed periodic B-spline.
A periodic B-spline of degree d and with n + 1 control points is obtained by
choosing knots t0 ≤ . . . ≤ tn arbitrarily, and then setting
tn+i = tn+i−1 + (ti − ti−1 ) ,
for i = 1, . . . , d + 1. A knot vector of this form is called a periodic knot vector.
In particular, a uniform B-spline is a special case of a periodic B-spline.
A closed periodic B-spline of degree d and control points b0 , . . . , bn , bn+1 =
b0 , bn+2 = b1 , . . . , bn+d = bd−1 is obtained by choosing knots t0 ≤ . . . ≤ tn+1
arbitrarily, and forming a periodic knot vector with n + 2d + 2 knots.

Example 8.9
Let d = 3 and n = 4. Let the ﬁrst ﬁve control points be b0 (1, 2), b1 (3, 7),
b2 (6, 6), b3 (6, −2), b4 (1, −1), and let the remaining control points be b5 (1, 2),
b6 (3, 7), b7 (6, 6). Suppose the ﬁrst n + 2 = 6 knots are t0 = 0.0, t1 = 0.5,
t2 = 2.0, t3 = 3.0, t4 = 3.1, t5 = 3.4. The periodic knot vector is obtained by

8. B-splines

201

taking
t6

=

3.4 + (0.5 − 0.0) = 3.9 ,

t7 = 3.9 + (2.0 − 0.5) = 5.4 ,

t8

=

5.4 + (3.0 − 2.0) = 6.4 ,

t9 = 6.4 + (3.1 − 3.0) = 6.5 ,

t10

=

6.5 + (3.4 − 3.1) = 6.8 ,

t11 = 6.8 + (5.4 − 3.9) = 8.3 .

The B-spline and its control polygon are illustrated in Figure 8.4.

6
4
2

0

1

2

3

4

5

6

-2

Figure 8.4

Closed periodic B-spline of degree 3

EXERCISES
8.5. Evaluate the uniform B-spline of Example 8.8 at t = 2.5 and t = 4.2.
8.6. Let d = 3, and b0 (0, 0), b1 (2, 0), b2 (4, 2), b3 (2, 4), b4 (0, 2). Suppose
the ﬁrst knots are t0 = 0, t1 = 1, t2 = 2, t3 = 3, t4 = 4, t5 = 5.
Compute the knots and control points required to form a closed
B-spline curve.
8.7. Let d = 3, and b0 (3, 5), b1 (4, 8), b2 (7, 2), b3 (6, −3), b4 (3, −1). Suppose the ﬁrst knots are t0 = 0.3, t1 = 0.4, t2 = 1.3, t3 = 2.5, t4 = 2.9,
t5 = 3.7. Compute the knots and control points required to form a
closed B-spline curve.

202

Applied Geometry for Computer Graphics and CAD

Open Uniform B-splines
Open B-splines for which the interior knots are uniform are referred to as
open uniform B-splines. Example 8.7 is an open uniform B-spline.

Example 8.10
Let t0 = 0, t1 = 0, t2 = 0, t3 = 1, t4 = 2, t5 = 3, t6 = 3, and t7 = 3. The basis
functions for open uniform B-splines of degree 2 deﬁned on this knot vector are
⎧
t<0
⎨ 0,
2
N0,2 =
(t − 1) , 0 ≤ t < 1 ,
⎩
0,
1≤t
⎧
t<0
⎪ 0,
⎪
⎨
2t − 3 t2 ,
0≤t<1
2
N1,2 =
,
1
2
⎪ 3
⎪ 2 − t + 2 (t − 1) , 1 ≤ t < 2
⎩
0,
2≤t

N2,2

N3,2

N4,2

⎧
t<0
⎪ 0,
⎪ 1 2
⎪ t ,
⎪
0≤t<1
⎨ 2
=
− 1 + t − (t − 1)2 , 1 ≤ t < 2 ,
⎪ 52
⎪ − t + 1 (t − 2)2 , 2 ≤ t < 3
⎪ 2
⎪
2
⎩
0,
3≤t
⎧
t<1
⎪ 0,
⎪ 1
⎨
(t − 1)2 ,
1≤t<2
2
=
,
⎪ − 3 + t − 3 (t − 2)2 , 2 ≤ t < 3
⎪ 2
2
⎩
0,
3≤t
⎧
t<2
⎨ 0,
=
(t − 2)2 , 2 ≤ t < 3 .
⎩
0,
3≤t

EXERCISES
8.8. Let t0 = 0, t1 = 0, t2 = 0, t3 = 2, t4 = 4, t5 = 6, t6 = 8, t7 = 8,
t8 = 8. Obtain the basis functions for open uniform B-splines of
degree 2 deﬁned on this knot vector.
8.9. Let t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 1, t5 = 2, t6 = 3, t7 = 4,
t8 = 4, t9 = 4, t10 = 4. Obtain the basis functions for open uniform
B-splines of degree 3 deﬁned on this knot vector.

8. B-splines

203

8.10. Use a computer package to plot the cubic open uniform B-spline
deﬁned on the knot vector of Exercise 8.8 with control points (2, 4),
(−2, 4), (−2, 0), (0, 0), (2, 0), (2, −4), (−2, −4).

8.1.3 Application: Font Design
An interesting application of B-splines is to font design. The boundary of each
character in a font is speciﬁed by B-spline (or B´zier) curves. Figures 8.5(a) and
e
(b) show a letter ‘G’ together with its deﬁning control polygons. Diﬀerent font
sizes are obtained by applying scaling transformations to the control points, and
making use of the property of invariance under aﬃne transformations. Italic
fonts may be obtained by applying a shear transformation (Figure 8.5(c)) or
a projection (Figure 8.5(d)). Projections of B-splines are discussed in Section
8.2.1. The B-spline data required to store the font deﬁnition is considerably
less than, for instance, storing a bitmap representation for each character.

(a)

(b)
Figure 8.5

(c)

(d)

B-spline font deﬁnition

8.1.4 Application: Morphing or Soft Object Animation
Morphing is a technique used in computer graphics in which a shape is gradually deformed over an period of time. Morphing has been used in animation
sequences of feature ﬁlms. In practice, morphing can involve a number of advanced computational methods including surface deformation, surface rendering, and texture mapping. In this section the process of deformation is exempliﬁed by a simple version of the technique where the initial and ﬁnal shapes are
B-spline curves (including B´zier curves as a special case). It is assumed that
e
the B-splines have the same degree and knot vector, though these restrictions
can be removed by applying knot insertion (Section 8.3) and degree raising
algorithms [13].

204

Applied Geometry for Computer Graphics and CAD

Let B(t) and C(t) be B-splines of degree d with control points b0 , . . . , bn
and c0 , . . . , cn respectively, and deﬁned on the knot vector t0 , . . . , tm .

Deﬁnition 8.11
An N -step deformation of B(t) into C(t) is a sequence of B-splines D0 (t), D1 (t),
. . . , DN (t) such that D0 (t) = B(t) and DN (t) = C(t).
The N +1 curves Dk (t) (k = 0, . . . , N +1) are the “in-between” curves which
deﬁne the gradual change from curve B into curve C. In order to describe a
deformation it is suﬃcient to prescribe the control points dk , . . . , dk of Dk (t).
n
0
A linear N -step deformation Dk (t) is given by
dk = bi +
i

k
N (ci

− bi ) for k = 0, . . . , N .

(8.7)

Thus d0 = bi and dN = ci .
i
i

Example 8.12
Let the control points of a curve B(t) be b0 (1, 0), b1 (0, 0), b2 (−1, 5), b3 (1, 3),
b4 (3, 5), b5 (2, 0), b6 (1, 0), and the control points of a curve C(t) be c0 (1, 0),
c1 (−3, 1), c2 (−4, 5), c3 (1, 4), c4 (6, 5), c5 (5, 1), c6 (1, 0). Let t0 = · · · = t6 = 0
e
and t7 = · · · = t13 = 1. Then both B-splines are B´zier curves of degree 6 and
dk
0

=

k
(1, 0) + ((1, 0) − (1, 0)) N = (1, 0) ,

dk
1

=

k
(0, 0) + ((−3, 1) − (0, 0)) N =

−3k k
N , N

,

=

(−1, 5) + ((−4, 5) − (−1, 5))

= −1 −

3k
N ,5

=

(1, 3) + ((1, 4) − (1, 3))

=

(3, 5) + ((6, 5) − (3, 5))

=

(2, 0) + ((5, 1) − (2, 0))

=

(1, 0) + ((1, 0) − (1, 0))

dk
2
dk
3
dk
4
dk
5
dk
6

k
N
k
N
k
N
k
N

k
N

k
N

,

3k
N ,5
3k k
N, N

,

= 1, 3 +
= 3+
= 2+

,

,

= (1, 0) .

The in-between curves for N = 4 are shown in Figure 8.6. More general
k
deformations can be obtained by replacing N in (8.7) by more general functions
of k. For example, let λi,k (s) be continuous functions such that λi,0 (0) = 0,
λi,N (1) = 1. Then a deformation Di (t) is given by
dk = bi + λi,k
i

k
N

(ci − bi ) for k = 0, . . . , N .

(8.8)

Exercise 8.11
Implement the B-spline deformation given by (8.8). Experiment with
diﬀerent choices of functions λi,k (s).

8. B-splines

205

3
2
1
-1

Figure 8.6

0

1

2

3

Linear deformation of a B-spline curve

8.1.5 The de Boor Algorithm
Evaluations of points on a B-spline curve can be performed using a method
known as the de Boor algorithm. Just as the de Casteljau algorithm for B´zier
e
curves is a consequence of the recursive property of the Bernstein basis functions, the de Boor algorithm follows from the recursion property of the B-spline
basis functions
t − ti
ti+k+1 − t
Ni,k−1 (t) +
Ni+1,k−1 (t) .
(8.9)
Ni,k (t) =
ti+k − ti
ti+k+1 − ti+1
Suppose t ∈ [tr , tr+1 ). Then (8.9) implies
r

bi Ni,k (t)

B(t) =
i=r−k
r

r
t−ti
bi ti+k −ti Ni,k−1 (t) +

=
i=r−k

ti+k+1 −t
bi ti+k+1 −ti+1 Ni+1,k−1 (t) .

i=r−k

Replacing i by i − 1 in the second sum gives
r

B(t) =

bi
i=r−k

t − ti
Ni,k−1 (t) +
ti+k − ti

r+1

bi−1
i=r−k+1

ti+k − t
Ni,k−1 (t) ,
ti+k − ti

and since Nr+1,k−1 (t) = Nr−k,k−1 (t) = 0 on [tr , tr+1 ),
r

B(t) =

bi
i=r−k+1

t − ti
ti+k − t
+ bi−1
ti+k − ti
ti+k − ti

Let
b1 (t) = bi−1
i

Ni,k−1 (t) .

ti+k − t
t − ti
+ bi
,
ti+k − ti
ti+k − ti

for i = r − k + 1, . . . , r. Note that b1 is dependent on the parameter value t.
i
In a similar manner, Ni,k−1 (t) can be expressed in terms of the basis functions

206

Applied Geometry for Computer Graphics and CAD

of degree k − 2 and so on. For a curve of degree d, the result is a recursive
procedure
⎫
j
j
bj (t) = (1 − αi (t))bj−1 (t) + αi (t)bj−1 (t) , ⎬
i
i−1
i
t − ti
(8.10)
j
,
αi (t) =
⎭
ti+d−j+1 − ti
for j = 1, . . . , d, i = r−d+j, . . . , r, where b0 (t) = bj , b−1 = 0, and bm−d+1 = 0
j
(where 0 denotes (0, 0) for a plane curve and (0, 0, 0) for a spatial curve). The
jth step yields B(t) in terms of the basis functions of degree d − j (note bj is
i
a function of t)
r

bj Ni,d−j (t) .
i

B(t) =
i=r−d+j

r

Thus when j = d, the algorithm yields the point B(t) = i=r bd Ni,0 (t) = bd
r
i
on the curve.
To summarize, for a given parameter value t, the de Boor algorithm (8.10)
yields a triangular array of points such that bd = B(t).
r
b0
r−d
b1
r−d+1
.
.
.
bd−1
r−1
bd = B(t) .
r

b0
r−d+1
...

. . . . . . b0
r
. . . b1
r

...
bd−1
r

Example 8.13
The de Boor algorithm can be applied to evaluate the uniform B-spline of
Example 8.8 at t = 3.6. Then d = 2, and since 3.6 ∈ [3, 4) = [t3 , t4 ), it
follows that r = 3. The ﬁrst row of points is b0 (7, −1), b0 (5, 2), b0 (4, 5). The
1
2
3
algorithm with j = 1 . . . 2, i = (1 + j) . . . 3, yields
1
α2

=

2
α3

=

t − t2
3.6 − 2
t − t3
3.6 − 3
1
= 0.8, α3 =
= 0.3 ,
=
=
t4 − t2
4−2
t5 − t3
5−3
t − t3
3.6 − 3
= 0.6 ,
=
t4 − t3
4−3

b1
2

=

(1 − 0.8) (7, −1) + 0.8 (5, 2) = (5.4, 1.4) ,

b1
3
b2
3

=

(1 − 0.3) (5, 2) + 0.3 (4, 5) = (4.7, 2.9) ,

=

(1 − 0.6) (5.4, 1.4) + 0.6 (4.7, 2.9) = (4.98, 2.3) .

Hence B(3.6) = (4.98, 2.3) verifying the result of Example 8.8.

8. B-splines

207

EXERCISES
8.12. Apply the de Boor algorithm to evaluate the uniform B-spline of
Example 8.8 at t = 2.5 and t = 4.2.
8.13. An open B-spline B(t) of degree d = 2 is deﬁned on the knot vector
t0 = 0, t1 = 0, t2 = 0, t3 = 1, t4 = 2, t5 = 3, t6 = 3, t7 = 3,
and with control points b0 (1, 1), b1 (3, 4), b2 (6, 2), b3 (4, 2), b4 (2, 5).
Apply the de Boor algorithm to evaluate the point B(2.4).
8.14. Let B(t) be a B-spline of degree d deﬁned on the knot vector ti = 0
for i = 0, . . . , d, and ti = 1 for i = d + 1, . . . , 2d + 1. Show that the
de Boor algorithm specializes to the de Casteljau algorithm (that is,
j
αi = t). Deduce that any B-spline curve deﬁned on this knot vector
is a B´zier curve of degree d.
e
8.15. Let Ni,d (t) be the B-spline basis functions of degree d deﬁned on the
knot vector ti = 0 for i = 0, . . . , d, and ti = 1 for i = d+1, . . . , 2d+1.
Show that Ni,d (t) are the Bernstein basis functions and deduce that
any B-spline curve deﬁned on this knot vector is a B´zier curve of
e
degree d.
8.16. Implement the de Boor algorithm and verify your solutions to the
above exercises.

8.1.6 Derivatives of a B-spline
The next aim is to determine the derivative of a B-spline curve of degree d as
a B-spline of degree d − 1. The ﬁrst step is to determine the derivatives of the
basis functions of degree d in terms of the basis functions of degree d − 1.

Lemma 8.14
The derivative of the B-spline basis functions Ni,d (t) of degree d may be obtained in terms of the basis functions of degree d − 1 as follows:
Ni,d (t) =

d
d
Ni,d−1 (t) −
Ni+1,d−1 (t) .
ti+d − ti
ti+d+1 − ti+1

Proof
The proof is by induction on d. The initial induction step (d = 1)
Ni,1 (t) =

1
ti+1 −ti Ni,0 (t)

−

1
ti+2 −ti+1 Ni+1,0 (t)

,

(8.11)

208

Applied Geometry for Computer Graphics and CAD

is left as an exercise to the reader. Next, suppose that (8.11) is true for all
B-splines of degree d. It is necessary to show that (8.11) is true for B-splines
of degree d + 1. The recursive deﬁnition of the B-spline basis functions gives
t−ti
ti+d+1 −ti Ni,d (t)

Ni,d+1 =

+

ti+d+2 −t
ti+d+2 −ti+1 Ni+1,d (t)

.

The derivative is obtained by applying the product rule,
Ni,d+1 (t)

=

t−ti
ti+d+1 −ti Ni,d (t)
ti+d+2 −t
1
ti+d+2 −ti+1 Ni+1,d (t) + ti+d+2 −ti+1 Ni+1,d (t)

1
ti+d+1 −ti Ni,d (t)

−

+

.

Since Ni,d (t) and Ni+1,d (t) are derivatives of basis functions of degree d, the
induction hypothesis (8.11) can be applied to give
Ni,d+1 (t)
=

1
ti+d+1 −ti Ni,d (t)

+

t−ti
ti+d+1 −ti

−
−
=

1
ti+d+2 −ti+1 Ni+1,d (t)

d
ti+d −ti Ni,d−1 (t)

ti+d+2 −t
ti+d+2 −ti+1

−

d
ti+d+1 −ti+1 Ni+1,d−1 (t)

d
ti+d+2 −ti+2 Ni+2,d−1 (t)

1
ti+d+1 −ti Ni,d (t)

+d

−

+

1
ti+d+2 −ti+1 Ni+1,d (t)

(ti+d+2 −t)
(ti+d+2 −ti+1 )(ti+d+1 −ti+1 )

−

d
ti+d+1 −ti+1 Ni+1,d−1 (t)

+

d(t−ti )
(ti+d+1 −ti )(ti+d −ti ) Ni,d−1

(t−ti )
(ti+d+1 −ti )(ti+d+1 −ti+1 )

Ni+1,d−1

(ti+d+2 −t)
− d (ti+d+2 −ti+1 )(ti+d+2 −ti+1 ) Ni+2,d−1 .

But

ti+d+2 −t
ti+d+2 −ti+1

−

t−ti
ti+d+2 −ti

=

ti+d+1 −t
ti+d+1 −ti

−

t−ti+1
ti+d+2 −ti+1 .

Hence,
Ni,d+1 (t)

=

1
ti+d+1 −ti Ni,d (t)

+
−
=

d
ti+d+1 −ti

=

1
ti+d+2 −ti+1 Ni+1,d (t)

t−ti
ti+d −ti Ni,d−1 (t)

d
ti+d+2 −ti+1

1
ti+d+1 −ti Ni,d (t)

−

−

−

ti+d+1 −t
ti+d+1 −ti Ni+1,d−1 (t)

t−ti+1
ti+d+1 −ti+1 Ni+1,d−1 (t)

−

−

1
ti+d+2 −ti+1 Ni+1,d (t)

+

ti+d+2 −t
ti+d+2 −ti+1 Ni+2,d−1 (t)
d
ti+d+1 −ti Ni,d (t)

d
ti+d+2 −ti+1 Ni+1,d (t)

d+1
ti+d+1 −ti Ni,d (t)

−

d+1
ti+d+2 −ti+1 Ni+1,d (t).

The ﬁnal equation has the desired form. Hence by induction the hypothesis
(8.11) is true.

It is now possible to prove the continuity property of Theorem 8.5.

8. B-splines

209

Lemma 8.15
If the interior knot ti has multiplicity pi , then Ni,k (t) is C k−pi at t = ti , and
C ∞ elsewhere.

Proof
Since the basis functions are piecewise polynomial of degree k, they are C ∞
everywhere except at the joins of the segments which occur at the interior
knots. Suppose ti has multiplicity pi (1 ≤ pi ≤ k). The proof is by induction.
For the initial induction step, k = 1, pi = 1 and
⎧
t−ti
⎪ ti+1 −ti ,
if t ∈ [ti , ti+1 )
⎨
ti+2 −t
ti+2 −t
t−ti
Ni,1 (t) = ti+1 −ti Ni,0 (t)+ ti+2 −ti+1 Ni+1,0 (t) =
, if t ∈ [ti+1 , ti+2 )
⎪ ti+2 −ti+1
⎩
0,
otherwise.
For t = ti , Ni,1 (t) is C ∞ (and hence also C 0 ), and since
lim Ni,1 (t) = lim Ni,1 (t) =

t→t+
i

t→t−
i

Ni,1 (ti ) =0 ,

lim Ni,1 (t) = lim Ni,1 (t) =Ni,1 (ti+1 ) =1 ,

t→t+
i+1

t→t−
i+1

lim Ni,1 (t) = lim Ni,1 (t) =Ni,1 (ti+2 ) =0 ,
−

t→t+
i+2

t→ti+2

it follows that Ni,1 (t) is C 0 .
The induction hypothesis is that all basis functions of degree k − 1 are
C k−1−pi . Then since
Ni,k (t) =

k
k
Ni,k−1 (t) −
Ni+1,k−1 (t) ,
ti+k − ti
ti+k+1 − ti+1

it follows that the derivatives Ni,k (t) are expressible as sums and products of
C k−1−pi functions, and therefore Ni,k (t) is C k−1−pi at t = ti . Hence, Ni,k (t)
and its ﬁrst k − 1 − pi derivatives are continuous at t = ti . Thus the ﬁrst
k − pi derivatives of Ni,k (t) are continuous at t = ti and, since Ni,k (t) is itself
continuous, it is deduced that Ni,k (t) is C k−pi as required.

Theorem 8.16
The derivative of B(t) =

n
i=0

bi Ni,d (t) is
n−1
(1)

B (t) =

(1)

bi Ni,d−1 (t)
i=0

210

Applied Geometry for Computer Graphics and CAD

where
(1)

bi

=d

bi+1 − bi
,
ti+d+1 − ti+1

(1)

and Ni,d−1 (t) are the degree d − 1 basis functions deﬁned on the knot vector
t1 , . . . , tm−1.

Proof
Let B(t) =

n
i=0

bi Ni,d (t), t ∈ [td , tm−d ], then
n

n

B (t) =

bi Ni,d (t)

=

i=0

bi Ni,d (t) .
i=0

Thus (8.11) implies
n

n
d
bi ti+d −ti Ni,d−1 (t) −

B (t) =
i=0

d
bi ti+d+1 −ti+1 Ni+1,d−1 (t) .
i=0

Then, since N0,d−1 (t) = Nn+1,d−1 (t) = 0 for t ∈ [td , tm−d ], it follows that
n
d
ti+d −ti

B (t) =

(bi − bi−1 ) Ni,d−1 (t) .

(8.12)

i=1

Replacing i by i + 1 in the summation, gives
n−1
(1)

B (t) =

(1)

bi Ni,d−1 (t) .
i=0

As a corollary, the higher order derivatives can be obtained by repeated
applications of the lemma.

Corollary 8.17
The rth derivative of B(t) is given by
n−r

B

(r)

(r)

(t) =

(r)

bi Ni,d−r (t)
i=0

where

b0
i

= bi ,
(r−1)

(r)
bi
(r)

(r−1)

− bi
b
= (d − r + 1) i+1
,
ti+d+1 − ti+r

and Ni,d−r (t) are the basis functions deﬁned on the knot vector tr , . . . , tm−r.

8. B-splines

211

Example 8.18
Consider the B-spline B(t) of degree 3 deﬁned on the knot vector t0 = 1.2, t1 =
1.4, t2 = 1.5, t3 = 2.0, t4 = 2.4, t5 = 3.1, t6 = 5.0, t7 = 6.4, t8 = 7.3, with control
points b0 (2, 1), b1 (4, 8), b2 (5, −1), b3 (3, −2), and b4 (2, −4). Then the control
points of the derivative of B(t) are
(1)

=

(1)

=

(1)

=

(1)

=

b0
b1
b2
b3

b1 − b0
t4 − t1
b2 − b1
3
t5 − t2
b3 − b2
3
t6 − t3
b4 − b3
3
t7 − t4
3

(4, 8) − (2, 1)
= (6.0, 21.0) ,
1.0
(5, −1) − (4, 8)
= (1.875, −16.875) ,
=3
1.6
(3, −2) − (5, −1)
= (−2.0, −1.0) , and
=3
3.0
(2, −4) − (3, −2)
= (−0.75, −1.5) .
=3
4.0
=3

The derivative has degree d = 2, and is deﬁned on the knot vector t0 = 1.4,
t1 = 1.5, t2 = 2.0, t3 = 2.4, t4 = 3.1, t5 = 5.0, t6 = 6.4.

Example 8.19
The derivatives at the endpoints of an open B-spline of degree d are obtained
from (8.12). Set t0 = t1 = · · · = td and tm−d = tm−d+1 = · · · = tm to give
n

B (td )

=
i=1
n

B (tm−d )

=

i −bi−1
d bi+d −ti Ni,d−1 (td ) = d tb1 −b01 N1,d−1 (td ) = d tb1 −b01 ,
t
d+1 −t
d+1 −t

i −bi−1
n −bn−1
d bi+d −ti Ni,d−1 (tm−d ) = d bd+n −tn Nn,d−1 (tm−d )
t
t

i=1
bn −bn−1
= d tm−1 −tm−d−1 ,

thus verifying Equation (8.5).

EXERCISES
8.17. Determine the basis functions of the B-spline and its derivative of
Example 8.18.
8.18. Let a B-spline curve B(t) of degree 3 be deﬁned on the knot vector
t0 = 0.5, t1 = 0.8, t2 = 1.4, t3 = 2.1, t4 = 2.4, t5 = 2.9, t6 = 4.0,
t7 = 4.5, t8 = 4.9 with control points b0 (−2, −3), b1 (−1, 2), b2 (2, 2),
b3 (3, 0), b4 (1, −3). Determine the control points of B (t). Determine
B (2.8) in the following ways.

212

Applied Geometry for Computer Graphics and CAD

(1)

(a) Determine Ni,d−1 (t) and evaluate B (t) =
at t = 2.8.

n−1
i=0

(1)

(1)

bi Ni,d−1 (t)

(b) Apply the de Boor algorithm with t = 2.8 to the derivative.
8.19. Determine the control points and knots of the derivative of the Bspline of Example 8.3. Evaluate B (6.2) and B (7.4) (use de Boor).
8.20. Determine the control points and knots of the derivative of the Bspline of Example 8.7. Evaluate B (2.5).
8.21. Determine an expression for the second derivatives at the endpoints
of an open B-spline.
8.22. Show that for k > 0, the basis functions Ni,k (t) have just one maximum value.
8.23. Implement the derivative algorithm of Theorem 8.16.

8.2 Non-uniform Rational B-Splines (NURBS)
Rational B-spline curves are obtained from (integral) B-splines in an analogous
manner to the way in which rational B´zier curves are obtained from (integral)
e
B´zier curves. They are generally referred to as NURBS which stands for None
Uniform Rational B-Splines.

Deﬁnition 8.20
The NURBS curve of degree d (order d + 1) with control points b0 , . . . , bn ,
weights w0 , . . . , wn , and knot vector t0 , . . . , tm , is the curve deﬁned on the
interval [a, b] = [td , tm−d ] given by
B(t) =

n
i=0 wi bi Ni,d (t)
n
i=0 wi Ni,d (t)

,

(8.13)

where Ni,d (t) are the B-spline basis functions deﬁned on the speciﬁed knot
vector, and with the understanding that if wi = 0 then wi bi is to be replaced
by bi . The curve may also be written in the form
n

bi Ri,d (t) ,

B(t) =
i=0

where
Ri,d (t) =

wi Ni,d (t)
n
j=0 wj Nj,d (t)

8. B-splines

213

are the rational B-spline basis functions.
ˆ
Let bi = (xi , yi , zi ). Deﬁne homogeneous control points bi by
ˆ
bi =

(wi xi , wi yi , wi zi , wi ),
(xi , yi , zi , 0),

if wi = 0
if wi = 0

.

In homogeneous coordinates the NURBS curve has the form
n

ˆ
bi Ni,d (t) .

B(t) =
i=0

Appropriate choices of knot vector and control points give rise to the concepts of open or periodic rational B-splines. An open knot vector yields a
NURBS curve which is endpoint interpolating. A closed periodic NURBS is
obtained by choosing a periodic knot vector, repeated control points (as described in Section 8.1.2) and a set of weights for which the ratios of the ﬁrst d
weights equal the ratios of the last d weights.

Example 8.21 (NURBS Circle)
A NURBS representation of a circle is used in the construction of surfaces
of revolution in Section 9.4.4. The unit circle centred at the origin (see Figure 8.7) can be represented by an open quadratic NURBS deﬁned on the interval [0, 1]. Take the knot vector 0, 0, 0, 1 , 1 , 1 , 3 , 1, 1, 1, control points b0 (1, 0),
4 2 2 4
b1 (1, 1), b2 (−1, 1), b3 (−1, 0), b4 (−1, −1), b5 (1, −1), b6 (1, 0), and corresponding weights 1, 1 , 1 , 1, 1 , 1 , 1. Arbitrary circles and ellipses may be obtained by
2 2
2 2
applying transformations to the control points. Note that there are many ways
of obtaining a NURBS circle.
b2

b3

b0=b6

b4

Figure 8.7

b1

b5

NURBS representation of a unit circle

214

Applied Geometry for Computer Graphics and CAD

Theorem 8.22
A NURBS curve B(t) given by (8.13) satisﬁes the following properties.
Local Control: If t ∈ [tr , tr+1 ) (d ≤ r ≤ m − d − 1) then
r
i=r−d wi bi Ni,d (t)
r
i=r−d wi Ni,d (t)

B(t) =

r

=

bi Ri,d (t) .
i=r−d

Convex Hull Property: If the weights wi are all positive and t ∈ [tr , tr+1 )
(d ≤ r ≤ m − d − 1) then B(t) ∈ CH{br−d , ..., br }.
Continuity: If pi is the multiplicity of the breakpoint t = ui , then B(t) is
C d−pi (or greater) at t = ui and C ∞ elsewhere.
Invariance under Aﬃne Transformations: Let T be an aﬃne transformation. Then
T

r
i=r−d wi bi Ni,d (t)
r
i=r−d wi Ni,d (t)

r
i=r−d wi T (bi ) Ni,d (t)
r
i=r−d wi Ni,d (t)

=

.

Invariance under Projective Transformations: Let T be a projective
transformation. Then
n

T

n

ˆ
bi Ni,d (t)
i=0

ˆ
T bi Ni,d (t)

=
i=0

ˆ
where bi are the homogeneous control points. See Section 8.2.1.
The analogous result to Theorem 7.25 concerning the eﬀect of changing a weight
is the following theorem. The proof is similar.

Theorem 8.23
∗
The eﬀect of changing a weight from wk to wk = wk + δwk is that any point
−→
−
b = B(t) on the curve moves in the direction of the line bbk (where bk is the
k -th control point).

8.2.1 Projections of NURBS Curves
The property of projective invariance is useful for the computer display of spatial NURBS curves. In order to apply a projective transformation to a NURBS

8. B-splines

215

curve
B(t) =

n
i=0 wi bi Ni,n (t)
n
i=0 wi Ni,n (t)

,

it is suﬃcient to apply the projective transformation to the homogeneous conˆ
ˆ
ˆ
trol points bi , where bi = (wi bi , wi ) if wi = 0, and bi = (bi , 0) if wi = 0. The
ˆ i deﬁne a NURBS curve which is the transformation
transformed images of b
of B(t).
The proof is analogous to the equivalent result for rational B´zier curves
e
given in Section 7.5.3. Suppose the projective transformation matrix M is apn ˆ
plied to B(t) = i=0 bi Ni,n (t) (expressed in homogeneous coordinates). Then
n

n

ˆ
bi Ni,n (t) M =

B(t)M =
i=0

n

ˆ
Ni,n (t) bi M =
i=0

ˆi Ni,n (t) ,
c
i=0

ˆ
deﬁning a NURBS curve with control points and weights given by ˆi = bi M
c
from which the Cartesian control points and weights can be obtained. In particular, if the transformation is a perspective or parallel projection then the
projected image of a NURBS curve onto a viewplane can be executed by applying the projection to the homogeneous control points.
As for the case of rational B´zier curves, the above argument can be adapted
e
to show that NURBS curves are invariant under the viewplane coordinate mapping VC and the device coordinate transformation DC. It follows that the whole
process of viewing a rational B´zier curve can be executed by applying the come
plete viewing pipeline matrix VP = M · VC · DC to the control points.

Example 8.24
Consider the perspective projection of Examples 4.7 and 7.27 onto the xyplane with viewpoint V(1, 5, 3). The projection matrix M and viewplane coordinate matrix VC are determined in Example 7.27. The quadratic NURBS
curve, deﬁned on the knot vector t0 = 0, t1 = 0, t2 = 1, t3 = 2, t4 = 3,
t5 = 3, with control points b0 (0, 0, 0), b1 (1, 0, 0), b2 (1, 0, 1), b3 (1, 1, 1), and
ˆ
ˆ
weights 1, 2, 2, 1, has homogeneous control points b0 (0, 0, 0, 1), b1 (2, 0, 0, 2),
ˆ
ˆ
b2 (2, 0, 2, 2), b3 (1, 1, 1, 1). Thus
⎛
⎞
⎛
⎛
⎞
⎞
ˆ
b0
0 0 0 1
6.6
−1.2 −3.0
⎜ ˆ ⎟
⎜ 2 0 0 2 ⎟
⎜ 9.6
−7.2 −6.0 ⎟
⎜ b1 ⎟
⎜
⎟
⎟
⎜ ˆ ⎟ M · VC = ⎜
⎝ 2 0 2 2 ⎠ M · VC = ⎝ 14.4 −10.8 −4.0 ⎠ .
⎝ b2 ⎠
ˆ
1 1 1 1
4.8
−3.6 −2.0
b3
Multiply the homogeneous control points through by −1 to give positive
weights. Then the image of the curve is the planar quadratic NURBS curve

216

Applied Geometry for Computer Graphics and CAD

with control points (−2.2, 0.4), (−1.6, 1.2), (−3.6, 2.7), and (−2.4, 1.8), and
weights 3, 6, 4, and 2 deﬁned on the same knot vector. Note that the working is essentially the same as for the projection of the rational B´zier curve in
e
Example 7.27.

8.2.2 Derivatives of NURBS
A recursive formula to determine the derivative of a NURBS is obtained from
Equation (7.15) which determines the derivatives of a rational function. For a
NURBS
n
wi bi Ni,d (t)
B(t) = i=0
,
n
i=0 wi Ni,d (t)
n

n

let f (t) = i=0 wi bi Ni,d (t) and g(t) = i=0 wi Ni,d (t) in (7.15). The derivatives of f (t) and g(t) are obtained by applying the algorithm for computing
the derivatives of B-splines (Section 8.1.6) where the wi bi are considered to be
the control points of f (t), and the wi are considered to be the control points
of g(t).

Example 8.25
Consider the NURBS of degree 3 deﬁned on the knot vector t0 = 1.2, t1 = 1.4,
t2 = 1.5, t3 = 2.0, t4 = 2.4, t5 = 3.1, t6 = 5.0, t7 = 6.4, t8 = 7.3, with control
points b0 (2, 1), b1 (4, 8), b2 (5, −1), b3 (3, −2), b4 (2, −4), and weights w0 = 1.0,
n
w1 = 1.5, w2 = 2.0, w3 = 1.5, w4 = 1.0. Then f (t) =
i=0 wi bi Ni,d (t)
has control points w0 b0 = (2, 1), w1 b1 = (6, 12), w2 b2 = (10, −2), w3 b3 =
(4.5, −3), and w4 b4 = (2, −4). Thus f (t) is deﬁned by control points
(1)

=

(1)

=

(1)

=

(1)

=

b0
b1
b2
b3

w1 b1 − w0 b0
t4 − t1
w2 b2 − w1 b1
3
t5 − t2
w3 b3 − w2 b2
3
t6 − t3
w4 b4 − w3 b3
3
t7 − t4
3

3 ((6, 12) − (2, 1))
= (12.0, 33.0) ,
2.4 − 1.4
3 ((10, −2) − (6, 12))
= (7.5, −26.25) ,
=
3.1 − 1.5
3 ((4.5, −3) − (10, −2))
= (−5.5, −1.0) ,
=
5.0 − 2.0
3 ((2, −4) − (4.5, −3))
= (−1.875, −0.75) .
=
6.4 − 2.4
=

8. B-splines

217

The function g(t) =

n
i=0

(1)

=

(1)

=

(1)

=

(1)

=

w0
w1
w2
w3

wi Ni,d (t) has a derivative with control points
w1 − w0
t4 − t1
w2 − w1
3
t5 − t2
w3 − w2
3
t6 − t3
w4 − w3
3
t7 − t4
3

3 (1.5 − 1.0)
2.4 − 1.4
3 (2.0 − 1.5)
=
3.1 − 1.5
3 (1.5 − 2.0)
=
5.0 − 2.0
3 (1.0 − 1.5)
=
6.4 − 2.4
=

= 1.5,
= 0.9375,
= −0.5,
= −0.375 .

Then B (t) is computed by determining the values of f (t), g(t), f (t), g (t) and
substituting into Equation (7.15). For instance, B (2.7) is computed as follows:
f (2.7)

= (2, 1)N0,3 (2.7) + (6, 12)N1,3 (2.7) + (10, −2)N2,3 (2.7)
+ (4.5, −3)N3,3 (2.7) + (2, −4)N4,3 (2.7) ,

g(2.7)

= 1.0N0,3 (2.7) + 1.5N1,3 (2.7) + 2.0N2,3 (2.7)
+ 1.5N3,3 (2.7) + 1.0N4,3 (2.7) ,

f (2.7)

(1)

(1)

= (12.0, 33.0) N0,2 (2.7) + (7.5, −26.25) N1,2 (2.7)
(1)

(1)

+ (−5.5, −1.0) N2,2 (2.7) + (−1.875, −0.75) N3,2 (2.7) ,
g (2.7)

(1)

(1)

(1)

(1)

= 1.5N0,2 (2.7) + 0.9375N1,2 (2.7) − 0.5N2,2 (2.7) − 0.375N3,2 (2.7) .

The basis functions were determined and evaluated in Exercise 8.17 (though
the exercise was for a non-rational B-spline). At t = 2.7, N0,3 = 0.0, N1,3 =
(1)
0.05195, N2,3 = 0.72529, N3,3 = 0.21905, N4,3 = 0.00371, and N0,2 = 0.0,
(1)

(1)

(1)

N1,2 = 0.20779, N2,2 = 0.74276, N3,2 = 0.04945. Hence
f (2.7)

= (2, 1)0.0 + (6, 12)0.05195 + (10, −2)0.72529
+ (4.5, −3)0.21905 + (2, −4)0.00371
= (8.5577, −1.4992) ,

g(2.7)

= (1.0) 0.0 + (1.5) 0.05195 + (2.0) 0.72529
+ (1.5) 0.21905 + (1.0) 0.00371
= 1.8608 ,

f (2.7)

= (12.0, 33.0) 0.0 + (7.5, −26.25) 0.20779
+ (−5.5, −1.0) 0.74276 + (−1.875, −0.75) 0.04945
= (−2.6195, −6.2343) ,

g (2.7)

= (1.5) 0.0 + (0.9375) 0.20779 − (0.5) 0.74276 − (0.375) 0.04945
= −0.19512 .

218

Applied Geometry for Computer Graphics and CAD

Thus B(2.7) = (8.5577, −1.4992)/ 1.8608 = (4.59894, −0.80568) and
B (2.7)

=
=
=

f (2.7) − g (2.7)B(2.7)
g(2.7)
(−2.6195, −6.2343) − (−0.19512) (4.59894, −0.80568)
1.8608
(−0.92549, −3.4348) .

EXERCISES
8.24. Show that

n
i=0

r
i=r−d

Ri,d (t) = 1 and

Ri,d (t) = 1.

8.25. Determine the basis functions and the polynomial curve segments of
the NURBS circle (Example 8.21).
8.26. Another NURBS unit circle can be obtained with a seven-point trian√
√
√
gular control polygon√ 3/2, 1/2 , (0, 2), − 3/2, 1/2 , − 3, −1 ,
√
3, −1 ,
3/2, 1/2 , knots 0, 0, 0, 1 , 1 , 2 , 2 , 1, 1, 1, and
(0, −1),
3 3 3 3
1
1
1
weights 1, 2 , 1, 2 , 1, 2 , 1. Determine the basis functions and the three
polynomial curve segments of the curve.
8.27. For the NURBS of Example 8.25, determine B (2.2).
8.28. Determine B (0.5) and B (0.8) for the NURBS circle (Example 8.21).
8.29. Show that for an open rational B-spline the derivatives at the end
of the curve are
B (td ) =
B (tm−d ) =

d
td+1 −t1

w1
w0

(b1 − b0 ) ,

d
tm−1 −tm−d−1

wn
wn−1

and

(bn − bn−1 ) .

8.30. Write a computer program (or use a computer package) to draw
NURBS curves.

8.2.3 Rational de Boor Algorithm
The rational de Boor algorithm is obtained from the de Boor algorithm in a
similar manner to the derivation of the rational de Casteljau algorithm from
0
the de Casteljau algorithm. Set b0 = bi and wi = wi and suppose t ∈ [tr , tr+1 ).
i

8. B-splines

219

The rational de Boor algorithm is
j
αi =

t − ti
ti+d−j+1 − ti

⎫
⎪
⎪
⎪
⎪
⎪
⎪
⎬

,

j
j
j−1
j j−1
wi = (1 − αi )wi−1 + αi wi ,
j
j
j−1
j j−1
wi bj = (1 − αi )wi−1 bj−1 + αi wi bj−1 , for j > 0 ,
i
i−1
i

⎪
⎪
⎪
⎪
⎪
⎪
⎭

(8.14)

for i = 0, . . . , d and j = r − d + i, . . . , r. The algorithm yields B(t) = bd .
r
In addition to point evaluation, the de Boor or rational de Boor algorithms
can be used to subdivide a B-spline or NURBS curve. Subdivision is not only a
means of splitting a curve, but also a way of creating extra control points (and
weights) in order to give additional freedoms for curve design. The intersection
algorithms for B´zier curves described in Section 6.10, which employ the de
e
Casteljau algorithm, can be extended to B-spline and NURBS curves using the
de Boor algorithm.

Example 8.26
Consider the NURBS of degree 3 deﬁned on the knot vector t0 = 1.2, t1 = 1.4,
t2 = 1.5, t3 = 2.0, t4 = 2.4, t5 = 3.1, t6 = 5.0, t7 = 6.4, t8 = 7.3, control
points b0 (2, 1), b1 (4, 8), b2 (5, −1), b3 (3, −2), b4 (2, −4), and weights w0 = 1.0,
w1 = 1.5, w2 = 2.0, w3 = 1.5, w4 = 1.0. Determine the point B(2.7). Since
2.7 ∈ [2.4, 3.1) = [t4 , t5 ), it follows that r = 4. Then
1
α2 =
1
α4

=

t−t2
t5 −t2
t−t4
t7 −t4

=
=

2.7−1.5
3.1−1.5
2.7−2.4
6.4−2.4

1
= 0.75, α3 =

t−t3
t6 −t3

=

2.7−2.0
5.0−2.0

= 0.23333,

= 0.075 .

Then
1
w2

=

1
0
1 0
(1 − α2 )w1 + α2 w2 = (1 − 0.75)1.5 + (0.75) 2.0 = 1.875 ,

1
w3

=

1
0
1 0
(1 − α3 )w2 + α3 w3 = (1 − 0.23333)2.0 + (0.23333) 1.5 = 1.8833 ,

1
w4

=

1
0
1 0
(1 − α4 )w3 + α4 w4 = (1 − 0.075)1.5 + (0.075) 1.0 = 1.4625 .

220

Applied Geometry for Computer Graphics and CAD

The new row of control points is
b1
2

=
=

b1
3

=
=

b1
4

=
=

2
α3 =

0
0
(1−α1 )w1 b0 +α1 w2 b0
2
1
2
2
1
w2

(1−0.75)1.5(4,8)+(0.75)2.0(5,−1)
1.875
0
0
(1−α1 )w2 b0 +α1 w3 b0
3
2
3
3
1
w3

= (4.8, 0.8) ,

(1−0.23333)2.0(5,−1)+(0.23333)1.5(3,−2)
1.8833
0
0
(1−α1 )w3 b0 +α1 w4 b0
4
3
4
4
1
w4
(1−0.075)1.5(3,−2)+(0.075)1.0(2,−4)
1.4625

t−t3
t5 −t3

=

2.7−2.0
3.1−2.0

2
= 0.63636, α4 =

= (4.6284, −1.1858) ,

= (2.9487, −2.1026) .

t−t4
t6 −t4

=

2.7−2.4
5.0−2.4

= 0.11538 .

Then
2
1
2 1
(1 − α3 )w2 + α3 w3

(1 − 0.63636)1.875 + (0.63636) 1.8833 = 1.8803 ,

=

2
1
2 1
(1 − α4 )w3 + α4 w4

=

2
w4

=
=

2
w3

(1 − 0.11538)1.8833 + (0.11538) 1.4625 = 1.8347 .

The new row of control points is

(1−0.63636)1.875(4.8,0.8)+(0.63636)1.8833(4.6284,−1.1858)
1.8803

(4.6906, −0.46571) ,

=

1
1
(1−α2 )w3 b1 +α2 w4 b1
4
3
4
4
2
w4

=

(1−0.11538)1.8833(4.6284,−1.1858)+(0.11538)1.4625(2.9487,−2.1026)
1.8347

=
3
α4

1
1
(1−α2 )w2 b1 +α2 w3 b1
3
2
3
3
2
w3

=
b2
4

=
=

b2
3

(4.474, −1.2701) ,

=

t−t4
t5 −t4

=

2.7−2.4
3.1−2.4

= 0.42857 .

Then
3
3
2
3 2
w4 = (1 − α4 )w3 + α4 w4 = (1 − 0.42857)1.8803 + (0.42857) 1.8347 = 1.8608 .

The ﬁnal control point is
=

2
2
(1−α3 )w3 b2 +α3 w4 b2
4
3
4
4
3
w4

=

(1−0.42857)1.8803(4.6906,−0.46571)+(0.42857)1.8347(4.474,−1.2701)
1.8608

=

b3
4

(4.599, −0.80562) .

Hence B(2.7) = (4.599, −0.80562).

8. B-splines

221

EXERCISES
8.31. Apply the rational de Boor algorithm to the NURBS circle to determine B(0.65).
8.32. Write a program (or use a computer package) which performs the
rational de Boor algorithm, and use it to verify your answer to the
previous question.

8.3 Knot Insertion
Knot insertion is the operation of obtaining a new representation of a B-spline
curve by introducing additional knot values to the deﬁning knot vector. The
new curve has control points consisting of the original control points and additional new control points corresponding to the number of new knot values. So
knot insertions give additional control points which provide extra shape control
without necessarily subdividing the curve. However, if following a knot insertion operation a knot has multiplicity equal to the degree, then the B-spline is
split into two B-splines at that knot value.

Deﬁnition 8.27
n

Let B(t) = i=0 bi Ni,d (t) be a B-spline deﬁned on a knot vector t0 , . . . , tm , and
q
ˆ
let C(t) = i=0 ci Ni,d (t) be deﬁned on the knot vector s0 , . . . , sp . If s0 , . . . , sp
is obtained from t0 , . . . , tm by performing knot insertions so that B(t) = C(t)
for t ∈ [td , tm ], then C(t) is said to be a reﬁnement of B(t).

Lemma 8.28
Let Ni,d (t) be the B-spline basis functions of degree d deﬁned on the knot
ˆ
ˆ
vector t0 , . . . , tm . Suppose t ∈ [ts , ts+1 ) and let Ni,d (t) be the basis functions
ˆ
ˆ
ˆˆ
ˆ
ˆ
deﬁned on t0 = t0 , . . . , ts = ts , ts+1 = t, ts+2 = ts+1 , . . . , tm+1 = tm . Then
ˆ
ˆ
Ni,d (t) = Ni,d (t) for i = 0, . . . , s − d − 1, Ni,d (t) = Ni+1,d (t) for i = s + 1, . . . , n,
and for i = s − d, . . . , s
Ni,d (t) =

ˆ
ˆ ˆ
ˆ
t − ti
ti+d+2 − t ˆ
ˆ
Ni,d (t) +
Ni+1,d (t) .
ˆ
ˆ
ˆ
ˆ
ti+d+1 − ti
ti+d+2 − ti+1

(8.15)

222

Applied Geometry for Computer Graphics and CAD

Theorem 8.29 (Boehm’s Algorithm)
n
ˆ
Let B(t) =
i=0 bi Ni,d (t) be a B-spline with knots t0 , . . . , tm , and let t ∈
ˆ, ts+1 ,
[ts , ts+1 ). Then the representation of B(t) with knot vector t0 , . . . , ts , t
n ˆ ˆ
. . . , tm−1 , tm , is B(t) = i=0 bi Ni,d (t)
⎧
0≤i≤s−d
⎨ bi ,
ˆ
bi =
(1 − αi )bi−1 + αi bi , s − d + 1 ≤ i ≤ s ,
⎩
s+1≤i≤n+1
bi−1 ,
ˆ
ˆ ˆ
t − ti
t − ti
=
.
(8.16)
αi =
ˆi+d+1 − ti
ˆ
ti+d − ti
t

Proof
ˆ ˆ
Using Lemma 8.28, and the fact that t = ts+1
n

B(t) =

bi Ni,d (t)
i=0
s−d−1

s

ˆ
bi Ni,d (t) +

=
i=0

i=s−d
s

+

bi
i=s−d

s−d−1

=
i=0

ˆ ˆ
t − ti
ˆ
N (t)
ˆ i,d
ˆ
ti+d+1 − ti

n
ˆ
ˆ
ti+d+2 − t ˆ
ˆ
Ni+1,d (t) +
bi Ni+1,d (t)
ˆ
ˆ
ti+d+2 − ti+1
i=s+1

ˆ ˆ
t − ts−d ˆ
ˆ
N
bi Ni,d (t) + bs−d
(t)
ˆ
ˆs+1 − ts−d s−d,d
t
s

+

bi
i=s−d+1

+bs

bi

ˆ ˆ
ˆ
ˆ
t − ti
ti+d+1 − t
+ bi−1
ˆ
ˆ
ˆ
ˆ
ti+d+1 − ti
ti+d+1 − ti

ˆ
Ni,d (t)

n
ˆ
ˆ
ts+d+2 − t ˆ
ˆ
Ns+1,d (t) +
bi Ni+1,d (t)
ˆ
ˆ
ts+d+2 − ts+1
i=s+1

(renumbering indices)
n+1

ˆ ˆ
bi Ni,d (t) .

=
i=0

Boehm’s algorithm can be compared with the de Boor algorithm. The de
Boor algorithm is equivalent to d insertions of the knot t. Boehm’s algorithm
ˆ
inserts just the one knot t, but several knots can be inserted by repeated applications of the algorithm, or more eﬃciently, by using a generalized Boehm’s

8. B-splines

223

algorithm [3]. Multiple knots can also be inserted using the Oslo algorithm [13].
The algorithms can be generalized to NURBS curves.

Example 8.30
Consider a B-spline deﬁned on the knot vector t0 = 0, t1 = 0, t2 = 0, t3 = 1,
ˆ
t4 = 3, t5 = 3, t6 = 3, with control points b0 , . . . , b3 . The knot t = 2 is inserted
ˆ
ˆ
ˆ
as follows. Since 2 ∈ [t3 , t4 ) = [1, 3), s = 3. So b0 = b0 , b1 = b1 , b4 = b3 , and
α2 =

ˆ
2
t − t2
2−0
= ,
=
t4 − t2
3−0
3

α3 =

ˆ
1
t − t3
2−1
= ,
=
t4 − t3
3−1
2

1
b1 +
3
1
= (1 − α3 ) b2 + α3 b3 = b2 +
2
= (1 − α2 ) b1 + α2 b2 =

ˆ
b2
ˆ
b3

2
b2 ,
3
1
b3 .
2

ˆ
For b0 (0, 0), b1 (6, 12), b2 (12, 12), b3 (16, 4) the knot insertion yields b0 (0, 0),
ˆ 1 (6, 12), b2 (10, 12), b3 (14, 8), b4 (16, 4), as illustrated in Figure 8.8.
ˆ
ˆ
ˆ
b
^

b2

^

b1=b1

12

b2

10
^

b3

8
6

^

4

b3=b4

2
^

b0=b0

Figure 8.8

0 2

4

6

8 10 12 14 16

Knot insertion of a quadratic B-spline

Exercise 8.33
Using Boehm’s algorithm, insert the knots t = 1 and t = 2 twice (insert
one at a time) into the B-spline of Example 8.30 and show that the
resulting segments are B´zier curves deﬁned on the intervals [0, 1], [1, 2],
e
and [2, 3].
Exercise 8.33 exempliﬁes a general result that a B-spline of degree d can be
converted into piecewise B´zier form by inserting suﬃcient knots so that each
e
knot has multiplicity d. This fact proves that a B-spline is indeed a piecewise
polynomial curve.

9

Surfaces

9.1 Introduction
Surfaces have a fundamental role in applications such as computer graphics,
virtual reality, computer games, and in the computer-aided design of cars, ships,
aircraft, and buildings. The earlier discussion of curves naturally leads to the
study of surfaces. Conics, B´zier curves, and B-spline curves, the key curve
e
types, have corresponding surface forms, namely, quadric surfaces, B´zier sure
faces, and B-spline surfaces. Quadric surfaces are introduced in Section 9.2,
and appear again in Sections 9.3 and 9.4 in B´zier and B-spline form. In some
e
applications, surfaces occur as “surface constructs” such as extruded surfaces,
ruled surfaces, and surfaces of revolution. These constructs are considered in
Section 9.4. Sections 9.2.1 and 9.6 consider three other important CAD surfaces, namely, oﬀset, skin and loft surfaces.

Deﬁnition 9.1
A subset of R3 of the form {(x, y, z) : F (x, y, z) = 0} for some function F :
R3 → R is called an implicit surface. When F is a polynomial in x, y, and z,
the surface is called an algebraic surface. If the partial derivatives of F exist,
then the points of the surface satisfying
F (x, y, z) =

∂F
∂F
∂F
(x, y, z) =
(x, y, z) =
(x, y, z) = 0
∂x
∂y
∂z

are called singular points, and all other points are called non-singular or reg225

226

Applied Geometry for Computer Graphics and CAD

ular points. A surface with no singular points is called a non-singular surface.
Implicity deﬁned surfaces are important in CAD applications and provide the
basis for CSG modellers discussed in Section 9.7.3.

Example 9.2
1. The implicit surfaces ax + by + cz + d = 0 for constants a, b, c, d ∈ R are
planes.
2. The implicit surface x2 + y 2 + z 2 − 1 = 0 is the unit sphere centred at the
origin.

Deﬁnition 9.3
Let U be an open subset of R2 . A parametric surface is a mapping S : U → R3 .
A mapping S : V → R3 , deﬁned on a closed subset V of R2 is said to be a
parametric surface whenever there exists an open subset U containing V , and
a parametric surface S1 : U → R3 , such that S(s, t) = S1 (s, t) for all (s, t) ∈ V .
S1 is said to extend S. The subset S = S(U ) or S = S(V ) of R3 is referred to
as the surface S or the trace of S, and S is said to parametrize S.
The coordinates of an arbitrary point of a parametric surface S can be
expressed as functions of two variables, for instance,
S(s, t) = (x(s, t), y(s, t), z(s, t)) .
The curves ct0 (s) = S(s, t0 ) and cs0 (t) = S(s0 , t), obtained by ﬁxing the value
of one of the variables, are called the s-parameter and t-parameter (or s- and
t-coordinate) curves respectively.
The parametric surface S : U → R3 is said to be C k -continuous (or just C k )
whenever the coordinate functions x(s, t), y(s, t), and z(s, t) are C k -continuous
on U . If |Ss (s, t) × St (s, t)| = 0, then the surface is said to be regular at S(s, t),
and S(s, t) is said to be a regular point. If S(s, t) is regular for all (s, t) ∈ U ,
then the surface is said to be regular. If |Ss (s, t) × St (s, t)| = 0, then S is said
to be singular at S(s, t), and S(s, t) is said to be a singular point.
A parametric surface S deﬁned on a closed set V is said to be C k whenever there exists an open set U containing V , and a C k parametric surface S1
deﬁned on U , such that S(s, t) = S1 (s, t) for all (s, t) ∈ V . The partial derivatives of S(s, t) at boundary points of V are obtained by taking the derivatives
of the extension mapping. Then S(s, t) is a regular/singular point if it is a
regular/singular point of S1 (s, t).
At a point p = S(s, t), Ss (s, t) and St (s, t) are the tangent vectors to
the s- and t-parameter curves. If p is a regular point of the surface then

9. Surfaces

227

|Ss (s, t) × St (s, t)| = 0. Hence Ss (s, t) and St (s, t) are non-parallel vectors, and
a vector perpendicular to them both is the unit normal vector to the surface,
given by
Ss (s, t) × St (s, t)
,
(9.1)
N(s, t) =
|Ss (s, t) × St (s, t)|
as shown in Figure 9.1. (It is also possible to take minus this vector.) Any
vector v perpendicular to N is called a tangent vector to S at p. The vector
subspace of R3 , consisting of all the tangent vectors to S at p, is called the
tangent plane at p, and denoted Tp (S). Intuitively, Tp (S) can be visualized as
the plane through p which is tangent to the surface at p (that is, perpendicular
to N), as shown in Figure 9.1.
N
Tp(S)
p
v

S

Tangent plane Tp (s)

Figure 9.1

Example 9.4
Parametric surfaces of the form S(s, t) = (s, t, f (s, t)) (or similarly, S(s, t) =
(s, f (s, t), t) or S(s, t) = (f (s, t), s, t)) are called non-parametric explicit surfaces or Monge patches. If the partial derivatives of f exist, then
Ss (s, t) × St (s, t) = (1, 0, fs (s, t)) × (0, 1, ft (s, t)) = (−fs (s, t), −ft (s, t), 1) .
2

2

Hence |Ss (s, t) × St (s, t)| = 1 + (fs (s, t)) + (ft (s, t)) = 0, and so the surface is regular. The normal vector is
N(s, t) =

1
2

1 + (fs (s, t)) + (ft (s, t))

2

(−fs (s, t), −ft (s, t), 1) .

The plane tangent to the surface at S(s, t) is
−fs (s, t) (x − s) − ft (s, t) (y − t) + (z − f (s, t)) = 0 .

228

Applied Geometry for Computer Graphics and CAD

Example 9.5
The saddle surface S(s, t) = (s−t, s+t, s2 −t2 ), for (s, t) ∈ R2 , is the parametric
surface illustrated in Figure 9.2. The curves drawn on the surface are a number
of its parameter curves. Then, Ss (s, t) = (1, 1, 2s), St (s, t) = (−1, 1, −2t), and
Ss (s, t) × St (s, t) = (1, 1, 2s) × (−1, 1, −2t) = (−2(s + t), −2(s − t), 2) ,
|Ss (s, t) × St (s, t)| = 2 1 + 2t2 + 2s2 ,
1
(−s − t, −s + t, 1) .
1 + 2t2 + 2s2
The saddle surface can also be expressed in the implicit form xy − z = 0.
N(s, t) = √

1
-2

0.5

z0

-1

-0.5
-1

0y
1

2

1

0

x

Figure 9.2

-1

-2 2

Saddle surface (s − t, s + t, s2 − t2 )

9.2 Quadric Surfaces
A quadric is an implicit surface deﬁned by a quadratic polynomial
Q(x, y, z)

= ax2 + 2bxy + 2cxz + dy 2 + 2eyz + f z 2
+ 2gx + 2hy + 2jz + k = 0 ,

(9.2)

for constants a, b, c, d, e, f, g, h, j, and k. All planar sections of a quadric are
conics. Let p = (x, y, z, 1). The quadric surface (9.2) may be represented in the
matrix form Q(x, y, z) = pQpT = 0,
⎛
⎞⎛
⎞
a b c g
x
⎜ b d e h ⎟⎜ y ⎟
⎟⎜
⎟
Q(x, y, z) = x y z 1 ⎜
⎝ c e f j ⎠⎝ z ⎠ = 0 .
g h j k
1

9. Surfaces

229

A point (x, y, z) of the quadric is singular if and only if Q(x, y, z) = 0 and
∂Q
(x, y, z)
∂x
∂Q
(x, y, z)
∂y
∂Q
(x, y, z)
∂z

= ax + by + cz + g = 0 ,

(9.3)

= bx + dy + ez + h = 0 ,

(9.4)

= cx + ey + f z + j = 0 .

(9.5)

Equation (9.2) can be expressed in the form
Q(x, y, z)

=

(ax + by + cz + g) x + (bx + dy + ez + h) y
+ (cx + ey + f z + j) z + (gx + hy + jz + k) = 0 ,

and it follows from (9.3)–(9.5) that a singular point also satisﬁes
gx + hy + jz + k = 0 .

(9.6)

Thus a point of a quadric is singular if and only if Equations (9.3)–(9.6) are
satisﬁed simultaneously, which occurs if and only if det(Q) = 0. A quadric is
said to be singular whenever det(Q) = 0, and non-singular otherwise. Singular
quadrics are cones, cylinders, or a union of planes. Quadrics which are a union
of planes are called reducible, and those which are not are called irreducible.
The determinant
a b c
∆= b d e
c e f
is called the discriminant of the quadric, and plays a similar role to the discriminant of a conic by distinguishing the types of quadric. A non-singular
quadric is called a paraboloid, hyperboloid, or ellipsoid according to whether
∆ = 0, ∆ > 0, or ∆ < 0, respectively. The types are further distinguished as
hyperboloids of one or two sheets, and hyperbolic and elliptic paraboloids.
Quadrics for which the axes of rotational symmetry or planes of reﬂectional
symmetry are aligned with the axes are said to be in normal or standard form.
Any quadric can be mapped to a quadric in normal form by applying threedimensional rotations and translations. Space does not permit a detailed discussion of quadrics. Table 9.1 lists an implicit and a parametric normal form for
each type of irreducible quadric, and the conditions on D = det Q and ∆ which
determine the type. The quadrics are illustrated in the ﬁgures on page 231. A
number of quadrics will emerge later in B´zier and B-spline form in the guise
e
of surface constructs.
Techniques such as ﬁnding the intersection of a quadric with a line, applying transformations, and converting between parametric and implicit forms
are similar to the corresponding methods for conics. The conversion problem

230

Applied Geometry for Computer Graphics and CAD

Table of irreducible quadrics

Table 9.1
Name

Implicit form

Parametric form

Ellipsoid
D = 0, ∆ < 0

x2
a2

+

y2
b2

+

z2
c2

=1

(a cos θ sin φ, b sin θ sin φ, c cos φ)
θ ∈ [0, 2π] , φ ∈ [0, π]

Hyperboloid
(1 sheet)
D = 0, ∆ > 0

x2
a2

+

y2
b2

−

z2
c2

=1

(a cos θ cosh t, b sin θ cosh t, c sinh t)
θ ∈ [0, 2π] , t ∈ (−∞, ∞)

Hyperboloid
(2 sheets)
D = 0, ∆ > 0

x2
a2

+

y2
b2

−

z2
c2

= −1

(a cos θ sinh t, b sin θ sinh t, ±c cosh t)
θ ∈ [0, 2π] , t ∈ (−∞, ∞)

Elliptic
paraboloid
D = 0, ∆ = 0

z=

Hyperbolic
paraboloid
D = 0, ∆ = 0

z = − x2 +
a

Elliptic cone
D=0

x2
a2

+

y2
b2

−

Elliptic
cylinder
D=0

x2
a2

+

y2
b2

=1

Parabolic
cylinder
D=0

4ax − y 2 = 0

x2
a2

+

at cos θ, bt sin θ, t2
θ ∈ [0, 2π] , t ∈ (−∞, ∞)

y2
b2

2

at cosh s, bt sinh s, t2
s ∈ (−∞, ∞) , t ∈ (−∞, ∞)

y2
b2

z2
c2

=0

(at cos θ, bt sin θ, ct)
θ ∈ [0, 2π] , t ∈ (−∞, ∞)
(a cos θ, b sin θ, t)
θ ∈ [0, 2π] , t ∈ (−∞, ∞)

as2 , 2as, t
s ∈ (−∞, ∞) , t ∈ (−∞, ∞)

requires more space than is available in this text, so the reader is referred to
[23] and [1]. The simpler problems are exempliﬁed below.

9. Surfaces

231

1
2

0
0

1
2
-1

y0

1

-1

0

1

2

2 3

2

-2

4

x

-2

y0

2

(a) Ellipsoid

2

3

4

4

1

-2

-1

0

x

-3

(b) Hyperboloid of one sheet
0

5
8
6
0
4
2
5
0
6
-5

-4

-2

y

y0

5

0

2

4

6

8

6

0

2

4

-2

-6

-4

x

x

5

10

0

-5

(c) Hyperboloid of two sheets

(d) Elliptic paraboloid

2
1
0

5

1

0
0

-5

y

0

5

2
6
-4

x

10

20

10

-20

-10

0

-2

y

0
-2

2

0

4

x

2
6 4

(e) Hyperbolic paraboloid

(f) Elliptic cone

1
1
5

0

0

1
-4
1
3

-3
-2
-2

-1
-1

y

y

0

0
0

1

-1

1
2

2

3

x

1

1

2

0

3

x

4 4

3 2

(g) Elliptic cylinder

(h) Parabolic cylinder

Example 9.6
The points of intersection of the hyperboloid 1 x2 + 1 y 2 − z 2 = −1 and the line
4
9
(2t, 3t − 2, t + 3) may be obtained by substituting x = 2t, y = 3t − 2, z = t + 3
into the equation of the hyperboloid. This gives
1
4

2

(2t) +

1
9

2

2

(3t − 2) − (t + 3) = −1

232

Applied Geometry for Computer Graphics and CAD

which simpliﬁes to t2 − 22 t − 68 = 0. The solutions are t = 8.2492 and t =
3
9
−0.9159. Substituting for t in (2t, 3t − 2, t + 3) yields two points of intersection
(16.4984, 22.7476, 11.2492) and (−1.8318, −4.7477, 2.0841).

Example 9.7
The parametric equation of the quadric obtained when a translation T(3, 5, 4),
followed by a rotation Rotz (π/2) about the z-axis, is applied to the elliptic
cylinder S(s, t) = as2 , 2as, t is determined by
⎛
⎞
⎞⎛
1 0 0 0
cos π sin π 0 0
2
2
⎜ 0 1 0 0 ⎟ ⎜ − sin π cos π 0 0 ⎟
2
2
⎟
⎟⎜
as2 2as t 1 ⎜
⎝ 0 0 1 0 ⎠⎝
0
0 1 0 ⎠
0
0 0 1
3 5 4 1
=

−2as − 5

as2 + 3

t+4

1

.

The transformed quadric is −2as − 5, as2 + 3, t + 4 .

9.2.1 Oﬀset Surfaces
Oﬀset curves were introduced in Section 5.5 in the context of numerical controlled machining. Given a regular surface S(s, t) = (x(s, t), y(s, t), z(s, t)) with
unit normal N(s, t), the oﬀset surface Od (s, t) of S at a distance d is given by
Od (s, t) = S(s, t) + d N(s, t) .

Example 9.8
The oﬀset at a distance d of the saddle surface of Example 9.5 is
Od (s, t) = (s − t, s + t, s2 − t2 ) + √

d
(−s − t, −s + t, 1) ,
1 + 2s2 + 2t2

as shown in Figure 9.3.
Oﬀset surfaces have several applications in CAD. First, oﬀset surfaces are used
to obtain paths for NC machining in a similar manner to curves. Second, two
important CAD operations thickening and shelling are achieved by generating
oﬀset surfaces.
Shelling is a hollowing-out operation performed on a solid to give a new
solid that has a thickness of d units. Figure 9.4(a) illustrates a solid bounded
by two circular disks and half of a doughnut-shaped surface called a torus (see

9. Surfaces

233

0.6

–1

0.4

–0.5

0.2
0

0

–0.2
1

0.5

Figure 9.3

(a)
Figure 9.4

0.5
0

–0.5

–1

1

A surface and an oﬀset

(b)

(c)

Shelling and thickening operations

Example 9.20). The solid is shelled to give the solid in Figure 9.4(b). The inner
surface bounding the hollow of the solid is an oﬀset surface at a distance d of
the outer torus.
Thickening is the process of transforming a surface into a solid of thickness
d units. Applying the thickening operation to the half-torus of Figure 9.4(c)
results in a solid similar to the the one illustrated in Figure 9.4(b). Note again
that the operation requires the computation of the oﬀset of the torus.
Oﬀset surfaces also arise in the construction of certain types of blend surfaces. Blending operations are applied to an object in order to smooth out
sharp edges and vertices. In Figure 9.5(a) a rolling-ball blend smooths the
neighbourhood of a sharp edge of a cube with a pipe or canal surface: that is, a
tubular surface that is the locus of a spherical ball moving along a spine curve.
The radius r of the ball determines the size of the blend. In Figure 9.5(c) a
rolling-ball blend results in material being added to the original model shown in
Figure 9.5(b). The ball is constrained to touch both surfaces during the motion
as shown in Figure 9.6(a). This implies that the centre of the ball is a distance
r from each surface. The spine curve is determined by computing the oﬀset at
a distance r to each of the two surfaces involved in the blend. The spine is the
curve of intersection of the oﬀset surfaces as shown in Figure 9.6(b). In Figure 9.5 the surfaces and their oﬀsets are planes and so the spine is a line. The
blend surface is obtained by rolling a ball along the line to give a cylindrical

234

Applied Geometry for Computer Graphics and CAD

surface. A further example of a blend can be found in Example 9.20.

(a)

(b)
Figure 9.5

r

(c)

Rolling-ball blend

r

(a)

(b)

Construction of the spine for a rolling-ball blend

Figure 9.6

9.3 B´zier and B-spline Surfaces
e
Let Bi,n (s) and Bj,p (t) be the Bernstein basis functions of degrees n and p in
the variables s and t, respectively. A B´zier surface with control points pi,j
e
(0 ≤ i ≤ n, 0 ≤ j ≤ p) is the parametric surface deﬁned by
n

p

pi,j Bi,n (s)Bj,p (t), for (s, t) ∈ [0, 1] × [0, 1] .

S(s, t) =

(9.7)

i=0 j=0

The parameter curves of a B´zier surface are spatial B´zier curves. In particular,
e
e
the parameter curves S(s, 0), S(s, 1), S(0, t), S(1, t), are B´zier curves which
e
form the four edges of the B´zier surface as illustrated in Figure 9.7. A rational
e
B´zier surface with control points pi,j and weights wi,j (0 ≤ i ≤ n, 0 ≤ j ≤ p)
e
is deﬁned by
S(s, t) =

n
p
i=0
j=0 wi,j pi,j Bi,n (s)Bj,p (t)
,
n
p
i=0
j=0 wi,j Bi,n (s)Bj,p (t)

for (s, t) ∈ [0, 1] × [0, 1] . (9.8)

9. Surfaces

235

Figure 9.7

A B´zier surface and its control polyhedron
e

The parameter curves are rational B´zier curves. The (n + 1) × (p + 1) control
e
points of a B´zier or rational B´zier surface form a control point polyhedron.
e
e
Let Ni,d (s) be the B-spline basis functions of degree d with knot vector
s0 , s1 , . . . , sm , and let Nj,e (t) be the B-spline basis functions of degree e with
knot vector t0 , t1 , . . . , tq . A B-spline surface with control points pi,j (0 ≤ i ≤
n = m − d − 1, 0 ≤ j ≤ p = q − e − 1) is deﬁned by
n

p

pi,j Ni,d (s)Nj,e (t), for (s, t) ∈ [sd , sm−d ] × [te , tq−e ] . (9.9)

S(s, t) =
i=0 j=0

A NURBS surface with control points pi,j and weights wi,j is deﬁned by
S(s, t) =

n
p
i=0
j=0 wi,j pi,j Ni,d (s)Nj,e (t)
,
n
p
i=0
j=0 wi,j Ni,d (s)Nj,e (t)

for (s, t) ∈ [sd , sm−d ] × [te , tq−e ] .

(9.10)
As for B´zier surfaces, the (n + 1) × (p + 1) control points of a B-spline or
e
NURBS surface form a control point polyhedron. A B-spline surface is said to
be open (respectively, periodic, closed ) if the basis functions in both s and t
are deﬁned on open (respectively, periodic, closed ) knot vectors.
B´zier or B-spline surfaces are said to be bilinear, biquadratic, bicubic, etc.,
e
whenever n = p = 1, n = p = 2, n = p = 3, etc.

9.3.1 Properties of B´zier and B-spline Surfaces
e
A number of the properties of B´zier and B-spline surfaces can be deduced in
e
a similar manner to the corresponding properties for curves. The details are
omitted.

236

Applied Geometry for Computer Graphics and CAD

Theorem 9.9
A B´zier surface (9.7) satisﬁes the following properties.
e
Endpoint Interpolation: S(0, 0) = p0,0 , S(1, 0) = pn,0 , S(0, 1) = p0,p ,
S(1, 1) = pn,p .
Convex Hull: S(s, t) ∈ CH{p0,0 , ..., pn,p }, for all (s, t) ∈ [0, 1] × [0, 1].
Invariance under Aﬃne Transformations: Let T be a three-dimensional
aﬃne transformation. Then
⎛
⎞
T⎝

n

p

pi,j Bi,n (s)Bj,p (t)⎠ =

i=0 j=0

n

p

T (pi,j ) Bi,n (s)Bj,p (t) .
i=0 j=0

Theorem 9.10
A rational B´zier surface (9.8) satisﬁes the following properties.
e
Endpoint Interpolation: as for Theorem 9.9.
Convex Hull: If the weights are all positive, then as for Theorem 9.9.
Invariance under Aﬃne Transformations: Let T be a three-dimensional
aﬃne transformation. Then
n
p
i=0
j=0 wi,j pi,j Bi,n (s)Bj,p (t)
n
p
i=0
j=0 wi,j Bi,n (s)Bj,p (t)
n
p
i=0
j=0 wi,j T (pi,j ) Bi,n (s)Bj,p (t)
=
n
p
i=0
j=0 wi,j Bi,n (s)Bj,p (t)

T

.

Invariance under Projective Transformations:
Let T be a three- dimensional projective transformation, and let
pi,j = (wi,j xi,j , wi,j yi,j , wi,j zi,j , wi,j )
ˆ
be the homogeneous control points of pi,j = (xi,j , yi,j , zi,j ). Then
⎞
⎛
T⎝

n

p

i=0 j=0

pi,j Bi,n (s)Bj,p (t)⎠ =
ˆ

n

p

T (ˆ i,j ) Bi,n (s)Bj,p (t) .
p
i=0 j=0

Theorem 9.11
A B-spline surface (9.9) satisﬁes the following properties.

9. Surfaces

237

Local Control: Each segment is determined by a (d + 1) × (e + 1) mesh of
control points. If s ∈ [sσ , sσ+1 ) and t ∈ [tτ , tτ +1 ) (d ≤ σ ≤ m − d − 1,
e ≤ τ ≤ n − e − 1), then
σ

τ

pi,j Ni,d (s)Nj,e (t), for (s, t) ∈ [sd , sm−d ] × [te , tq−e ] .

S(s, t) =
i=σ−d j=τ −e

Convex Hull: If s ∈ [sσ , sσ+1 ) and t ∈ [tτ , tτ +1 ) (d ≤ σ ≤ m − d − 1, e ≤ τ ≤
n − e − 1), then S(s, t) ∈ CH{pσ−d,τ −e , ..., pσ,τ }.
Invariance under Aﬃne Transformations: Let T be a three-dimensional
aﬃne transformation. Then
⎞
⎛
T⎝

n

p

pi,j Ni,d (s)Nj,e (t)⎠ =

i=0 j=0

n

p

T (pi,j ) Ni,d (s)Nj,e (t) .
i=0 j=0

Theorem 9.12
A NURBS surface (9.10) satisﬁes the following properties.
Local Control: If s ∈ [sσ , sσ+1 ) and t ∈ [tτ , tτ +1 ) (d ≤ σ ≤ m − d − 1,
e ≤ τ ≤ n − e − 1), then
S(s, t) =

σ
τ
i=σ−d
j=τ −e wi,j pi,j Ni,d (s)Nj,e (t)
σ
τ
i=σ−d
j=τ −e wi,j Ni,d (s)Nj,e (t)

.

Convex Hull: If the weights wi are all positive, then as for Theorem 9.11.
Invariance under Aﬃne Transformations:
Let T be a three-dimensional aﬃne transformation. Then
n
p
i=0
j=0 wi,j pi,j Ni,d (s)Nj,e (t)
n
p
i=0
j=0 wi,j Ni,d (s)Nj,e (t)
n
p
i=0
j=0 wi,j T (pi,j ) Ni,d (s)Nj,e (t)
=
n
p
i=0
j=0 wi,j Ni,d (s)Nj,e (t)

T

.

Invariance under Projective Transformations:
Let T be a three-dimensional projective transformation, and let pi,j =
ˆ
(wi,j xi,j , wi,j yi,j , wi,j zi,j , wi,j ) be the homogeneous control points of pi,j =
(xi,j , yi,j , zi,j ). Then
⎞
⎛
T⎝

n

p

i=0 j=0

pi,j Ni,d (s)Nj,e (t)⎠ =
ˆ

n

p

T (ˆ i,j ) Ni,d (s)Nj,e (t) .
p
i=0 j=0

238

Applied Geometry for Computer Graphics and CAD

9.3.2 Derivatives of B´zier and B-spline Surfaces
e
The partial derivatives Ss (s, t) and St (s, t) of a B´zier surface (9.7) are obtained
e
from the derivative formulae for B´zier curves expressed in Theorem 7.3. Then
e
n

p

p

S(s, t) =

n

j=0

i=0

pi,j Bi,n (s)Bj,p (t) =
i=0 j=0

pi,j Bi,n (s) Bj,p (t) ,

and diﬀerentiation of the term within the bracket with respect to s gives
p

Ss (s, t)

n−1

(pi+1,j − pi,j ) Bi,n−1 (s) Bj,p (t)

n

=
j=0

i=0

n−1 p
(1,0)

=

pi,j Bi,n−1 (s)Bj,p (t),

(9.11)

i=0 j=0
(1,0)

where pi,j

(0,1)

= n (pi+1,j − pi,j ). Likewise, letting pi,j

= p (pi,j+1 − pi,j ),

n p−1
(0,1)

St (s, t) =

pi,j Bi,n (s)Bj,p−1 (t) .

(9.12)

i=0 j=0

Example 9.13
The partial derivative with respect to s of the biquadratic B´zier surface (n =
e
2, p = 2) with control points p0,0 (7, −3, −5), p0,1 (7, −2, −6), p0,2 (8, −1, −4),
p1,0 (4, −3, −2), p1,1 (5, −1, −4), p1,2 (4, 0, −3), p2,0 (1, −4, 1), p2,1 (0, −2, 0), and
e
p2,2 (1, −3, 1) has a B´zier representation (n = 1, p = 2), with control points
p0,0

(1,0)

= n (p1,0 − p0,0 ) = 2 ((4, −3, −2) − (7, −3, −5)) = (−6, 0, 6) ,

(1,0)
p1,0

= n (p2,0 − p1,0 ) = 2 ((1, −4, 1) − (4, −3, −2)) = (−6, −2, 6) ,

(1,0)
p0,1

= n (p1,1 − p0,1 ) = 2 ((5, −1, −4) − (7, −2, −6)) = (−4, 2, 4) ,

(1,0)
p1,1

= n (p2,1 − p1,1 ) = 2 ((0, −2, 0) − (5, −1, −4)) = (−10, −2, 8) ,

(1,0)
p0,2

= n (p1,2 − p0,2 ) = 2 ((4, 0, −3) − (8, −1, −4)) = (−8, 2, 2) ,

(1,0)

= n (p2,2 − p1,2 ) = 2 ((1, −3, 1) − (4, 0, −3)) = (−6, −6, 8) .

p1,2

α+β

∂
Higher order partial derivatives S(α,β) (s, t) = ∂sα ∂tβ S(s, t) (the notation means
αth derivative with respect to s, and βth derivative with respect to t) are
obtained by repeated applications of (9.11) and (9.12) to give
n−α p−β
(α,β)

S

(α,β)

(s, t) =

pi,j
i=0 j=0

Bi,n−α (s)Bj,p−β (t) ,

9. Surfaces

239

where
(α,β)

pi,j

=

p!
n!
(n − α)! (p − β)!

β

α

α
k

(−1)k (−1)
k=0 =0

β

pi+α−k,j+β− .

n

The derivative of a B-spline curve B(s) = i=0 bi Ni,d (s), deﬁned on a knot
vector s0 , . . . , sm , was determined in Theorem 8.16 to be
n−1
(1)

B (s) =

(1)

bi Ni,d−1 (s),

(9.13)

i=0
(1)

(1)

where bi = d (bi+1 − bi ) / (ti+d+1 − ti+1 ) and Ni,d−1 (s) are the degree d − 1
basis functions deﬁned on the knot vector s1 , . . . , sm−1. Following the method of
the derivative of a B´zier surface, the derivative with respect to s of a B-spline
e
surface (9.9) is
p

Ss (s, t) =
j=0

n−1 p

n−1
(1)

d

(1)

(1,0)

pi,j Ni,d−1 (s) Nj,e (t) =
i=0

(1)

pi,j Ni,d−1 (s)Nj,e (t)
i=0 j=0

where
(1,0)

pi,j

=d

pi+1,j − pi,j
,
si+d+1 − si+1

(1)

and Ni,d−1 (s) are the degree d − 1 basis functions deﬁned on the knot vector
s1 , . . . , sm−1. Likewise,
n p−1
(0,1)

St (s, t) =

(1)

pi,j Ni,d (s)Nj,e−1 (t)
i=0 j=0

where
(0,1)

pi,j

=p

pi,j+1 − pi,j
tj+e+1 − tj+1

(1)

and Nj,e−1 (t) are the degree e − 1 basis functions deﬁned on the knot vector
t1 , . . . , tq−1.

Remark 9.14
Computation of the derivatives of rational B´zier and NURBS surfaces can be
e
performed by combining the above formulae for integral B´zier and B-spline
e
surfaces with the procedure for computing the derivatives of rational functions
given in Section 7.5.4.

240

Applied Geometry for Computer Graphics and CAD

EXERCISES
9.1. Verify that the biquadratic B´zier surface with control points
e
p0,0 (0, 0, 0),
p1,0 (1/2, 0, 0),
p2,0 (1, 0, 1/a),

p0,1 (0, 1/2, 0),
p1,1 (1/2, 1/2, 0),
p2,1 (1, 1/2, 1/a),

p0,2 (0, 1, 1/b),
p1,2 (1/2, 1, 1/b),
p2,2 (1, 1, 1/a, 1/b)

for non-zero constants a and b yields the quadratic surface S(s, t) =
1
s, t, a s2 + 1 t2 . When a and b have the same sign the surface is an
b
elliptic paraboloid, and when a and b have opposite signs the surface
is a hyperbolic paraboloid.
9.2. Determine the control points of the ﬁrst order partial derivatives
with respect to s and t of the biquadratic B´zier surface with control
e
points p0,0 (2, 2, 0), p0,1 (2, 4, 1), p0,2 (2, 6, 0), p1,0 (4, 3, 1), p1,1 (4, 5, 3),
p1,2 (4, 6, 1), p2,0 (6, 2, 0), p2,1 (6, 3, 1), and p2,2 (6, 5, 0).
9.3. Determine the control points of the ﬁrst order partial derivatives
with respect to s and t of the biquadratic B-spline surface with
control points
p0,0 (1, 2, 1),
p1,0 (4, 1, 1),
p2,0 (6, 2, 0),

p0,1 (0, 4, 3),
p1,1 (4, 4, 5),
p2,1 (6, 5, 3),

p0,2 (1, 6, 2),
p1,2 (3, 6, 3),
p2,2 (7, 7, 2),

p0,3 (2, 9, 1),
p1,3 (3, 8, 1),
p2,3 (6, 8, 0),

weights w0,0 = w0,1 = w0,2 = w0,3 = w2,0 = w2,1 = w2,2 = w2,3 = 1,
w1,0 = w1,1 = w1,2 = w1,3 = 2, knot vector 0, 1, 2, 3, 4, 5 in the
s-direction and 0, 2, 4, 6, 8, 10, 12 in the t-direction.
9.4. (a) Express, in terms of the control points, the tangent vectors to
the parameter curves at the endpoints of a B´zier surface of
e
degree (n, p).
(b) The endpoint normal vectors of a B´zier surface are the normal
e
vectors of the surface at its endpoints S(0, 0), S(0, 1), S(1, 0),
S(1, 1). Express, in terms of the control points, the endpoint
normal vectors of a B´zier surface of degree (n, p). (Use the fact
e
that the normal to a surface at a point is perpendicular to the
tangent directions of the parameter curves through that point.)

9. Surfaces

241

9.4 Surface Constructions
Consider a non-singular three-dimensional aﬃne transformation T(t) depending continuously on a parameter t, that is, the entries of the transformation
matrix are continuous functions of t. A surface construction is obtained by applying T(t) to a speciﬁed generating curve so that, as the parameter t varies,
the curve moves through space and thereby “sweeps” out a surface. In general,
a surface constructed in this manner is twisted and self-intersecting, and serves
no practical purpose. However, particular choices of the generating curve and
transformation do give rise to useful surface shapes. The following sections describe a number of constructions which have B´zier or B-spline representations.
e
Such constructions are fundamental to many CAD systems.

9.4.1 Extruded Surfaces
An extruded surface is obtained when a spatial generating curve B(s) is
translated in the direction of a trajectory line. A generating NURBS curve
n
n
B(s) = i=0 bi ui Ni,d (s)/ i=0 ui Ni,d (s) (knot vector s0 , . . . , sm ) sweeping in
the direction of the unit vector n, through a distance δ, results in the extruded
NURBS surface
n

1

n

1

wi,j pi,j Ni,d (s)Nj,1 (t)

S(s, t) =
i=0 j=0

wi,j Ni,d (s)Nj,1 (t) ,
i=0 j=0

with knot vector s0 , . . . , sm in the s-direction, t0 = 0, t1 = 0, t2 = 1, t3 = 1
in the t-direction, control points pi,0 = bi and pi,1 = bi + δn, and weights
wi,0 = wi,1 = ui (for i = 1, . . . , n). Similar representations can be obtained for
the extruded surface of a B´zier, rational B´zier, or B-spline generating curve.
e
e

Example 9.15
Let B(s) be the quadratic NURBS with control points b0 (0, 0, 0), b1 (1, 0, 0),
b2 (1, 0, 1), b3 (1, 1, 1), weights u0 = 1, u1 = 2, u2 = 2, u3 = 1, and knot
vector s0 = 0, s1 = 0, s2 = 0, s3 = 1, s4 = 2, s5 = 2, s6 = 2. Let
n = 2 , − 2 , 1 , and δ = 3. Then the extruded surface has control points
3
3 3
p0,0 (0, 0, 0), p1,0 (1, 0, 0), p2,0 (1, 0, 1), p3,0 (1, 1, 1), p0,1 (2, −2, 1), p1,1 (3, −2, 1),
p2,1 (3, −2, 2), p3,1 (3, −1, 2), weights w0,0 = 1, w1,0 = 2, w2,0 = 2, w3,0 = 1,
w0,1 = 1, w1,1 = 2, w2,1 = 2, w3,1 = 1, and knots s0 = 0, s1 = 0, s2 = 0,
s3 = 1, s4 = 2, s5 = 2, s6 = 2, t0 = 0, t1 = 0, t2 = 1, t3 = 1. The surface is
illustrated in Figure 9.8.

242

Applied Geometry for Computer Graphics and CAD

2

z1

0
-2

0
-1

y

0

x

2

1

13

Figure 9.8

A NURBS extruded surface

9.4.2 Ruled Surfaces
A ruled surface is formed from two spatial curves B(s) and C(s) when points
on each curve corresponding to the parameter s are joined by a line. Consider
n
n
two NURBS curves B(s) =
i=0 bi ui Ni,d (s)/
i=0 ui Ni,d (s), and C(s) =
n
j=0

n

cj vj Nj,d (s)
j=0 vj Nj,d (s). The curves are assumed to have the same
degree and to be deﬁned on the knot vector s0 , . . . , sm . The constructed NURBS
ruled surface, linear in the t-direction, is given by
n

1

n

1

wi,j pi,j Ni,d (s)Nj,1 (t)

S(s, t) =
i=0 j=0

wi,j Ni,d (s)Nj,1 (t) .

(9.14)

i=0 j=0

The surface has knot vector s0 , . . . , sm in the s-direction, and 0, 0, 1, 1 in the
t-direction. The control points are pi,0 = bi and pi,1 = ci , and the weights are
wi,0 = ui , wi,1 = vi (i = 0, . . . , n). Clearly, an extruded surface is a special case
of a ruled surface. If the speciﬁed curves do not have the same degree then it is
necessary to apply a “degree raising algorithm” before the above procedure can
be applied (see Exercise 6.21). If the curves have diﬀerent knot vectors then
a knot insertion algorithm (see Section 8.3) can be applied to obtain curves
deﬁned on identical knot vectors.

Example 9.16
Let B(s) be the quadratic NURBS curve with control points b0 (0, 0, 0),
b1 (3, 0, 0), b2 (3, 3, 0), b3 (0, 3, 0) and weights w0 = 1, w1 = 2, w2 = 2, w3 = 1,
and let C(s) have control points c0 (0, 1, 4), c1 (1, 1, 4), c2 (1, 2, 4), c3 (0, 2, 4)
and weights w0 = 2, w1 = 3, w2 = 3, w3 = 2. Both curves are assumed to
be deﬁned on the knot vector 0, 1, 2, 3, 4, 5, 6. Then the ruled surface is given
by (9.14) with control points p0,0 (0, 0, 0), p1,0 (3, 0, 0), p2,0 (3, 3, 0), p3,0 (0, 3, 0),
p0,1 (0, 1, 4), p1,1 (1, 1, 4), p2,1 (1, 2, 4), p3,1 (0, 2, 4), weights w0,0 = 1, w1,0 = 2,

9. Surfaces

243

w2,0 = 2, w3,0 = 1, w0,1 = 2, w1,1 = 3, w2,1 = 3, w3,1 = 2, and knots s0 = 0,
s1 = 1, s2 = 2, s3 = 3, s4 = 4, s5 = 5, t0 = 0, t1 = 0, t2 = 1, t3 = 1. The
surface is illustrated in Figure 9.9.

4

3

z

2

1

0
0

1
0
1

2

y

x

2
3 3

Figure 9.9

A NURBS ruled surface

Example 9.17
Given four points p0,0 , p1,0 , p0,1 , p1,1 , the ruled surface deﬁned by the line
segment joining p0,0 and p1,0 , and the line segment joining p0,1 and p1,1 is a
bilinear surface. In B-spline form the surface is
1

S(s, t)

1

pi,j Ni,1 (s)Nj,1 (t)

=
i=0 j=0

= p0,0 (1 − s)(1 − t) + p0,1 (1 − s)t + p1,0 s(1 − t) + p1,1 st ,
with knot vector 0, 0, 1, 1 in both directions. The surface can be obtained in
B´zier form by replacing the B-spline basis functions by the linear Bernstein bae
sis functions. If the four points are coplanar then the surface is a planar quadrilateral region. A non-planar example is deﬁned by control points p0,0 (0, 0, 0),
p0,1 (0, 1, 1), p1,0 (1, 0, 1), p1,1 (1, 1, 0), which gives
S(s, t)

=

(0, 0, 0)(1 − s)(1 − t) + (0, 1, 1)(1 − s)t
+ (1, 0, 1)s(1 − t) + (1, 1, 0)st

=

(s, t, s − 2st + t) .

The surface is the hyperbolic paraboloid deﬁned implicitly by x−2xy+y−z = 0.

244

Applied Geometry for Computer Graphics and CAD

9.4.3 Translationally Swept Surfaces
The extruded surface construction can be generalized to give a translationally swept surface obtained by translating a generating curve B(s) along a
trajectory curve C(t). When B(s) and C(t) are both B´zier, rational B´zier,
e
e
B-spline, or NURBS curves, then correspondingly, the resulting translational
swept surface is a B´zier, rational B´zier, B-spline or NURBS surface. For ine
e
n
n
stance, let B(s) = i=0 bi ui Ni,d (s)/ i=0 ui Ni,d (s) (knot vector s0 , . . . , sm ),
p
j=0

and C(t) =

cj vj Nj,e (t)

p
j=0

vj Nj,e (t) (knot vector t0 , . . . , tq ). The

NURBS swept surface constructed from B(s) and C(t) is
n

p

S(s, t) =

n

p

wi,j pi,j Ni,d (s)Nj,e (t)
i=0 j=0

wi,j Ni,d (s)Nj,e (t) ,
i=0 j=0

with control points pi,j = bi + cj , weights wi,j = ui vj , and knot vectors
s0 , . . . , sm and t0 , . . . , tq in the s- and t-directions.

Example 9.18
Let B(s) be a quadratic B-spline with control points b0 (0, 0, 0), b1 (5, 0, 0),
b2 (5, 5, 0), b3 (0, 5, 0), weights u0 = 1, u1 = 2, u2 = 2, u3 = 1, and knot vector
s0 = 0, s1 = 0, s2 = 0, s3 = 1, s4 = 2, s5 = 2, s6 = 2. Let C(t) be the cubic Bspline control points c0 (1, 0, 2), c1 (2, 4, 4), c2 (2, 7, 6), c3 (1, 2, 8), weights v0 = 2,
v1 = 3, v2 = 4, v3 = 1, and knot vector t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 1,
t5 = 1, t6 = 1, t7 = 1. The control points of the translational swept surface are
p0,0 = b0 + c0 = (0, 0, 0) + (1, 0, 2) = (1, 0, 2),
p1,0 = b1 + c0 = (5, 0, 0) + (1, 0, 2) = (6, 0, 2),
p2,0 = b2 + c0 = (5, 5, 0) + (1, 0, 2) = (6, 5, 2),
p3,0 = b3 + c0 = (0, 5, 0) + (1, 0, 2) = (1, 5, 2),
p0,1 = b0 + c1 = (0, 0, 0) + (2, 4, 4) = (2, 4, 4),
and likewise p1,1 = (7, 4, 4), p2,1 = (7, 9, 4), p3,1 = (2, 9, 4), p0,2 = (2, 7, 6),
p1,2 = (7, 7, 6), p2,2 = (7, 12, 6), p3,2 = (2, 12, 6), p0,3 = (1, 2, 8), p1,3 =
(6, 2, 8), p2,3 = (6, 7, 8), p3,3 = (1, 7, 8). The weights are w0,0 = u0 v0 = 2,
w1,0 = u1 v0 = 4, w2,0 = 4, w3,0 = 2, w0,1 = 3, w1,1 = 6, w2,1 = 6, w3,1 = 3,
w0,2 = 4, w1,2 = 8, w2,2 = 8, w3,2 = 4, w0,3 = 1, w1,3 = 2, w2,3 = 2, w3,3 = 1.
The surface is illustrated in Figure 9.10.

9. Surfaces

245

8
6

z

4

0

2

2

0
0

4

2

x

4
6

y

6

8
10
12

Figure 9.10

A NURBS translational swept surface

9.4.4 Surfaces of Revolution
A surface obtained by rotating a generating curve B(s) about a ﬁxed axis is
called a surface of revolution. It is assumed that the curve lies in a plane containing the axis and, to avoid self-intersections of the surface, that the axis does not
n
n
intersect the curve. Let B(s) = i=0 bi ui Ni,d (s)/ i=0 ui Ni,d (s) (knot vector
s0 , . . . , sm ) be a generating NURBS curve in the xz-plane. Rotating B(s) about
the z-axis results in a NURBS surface of revolution S(s, t). The points in the ith
row of the control polyhedron of S lie in a plane perpendicular to the z-axis, and
consist of a copy of the control polygon of a NURBS circle scaled by a factor fi
and translated by di units in the z-direction. The NURBS circle (Example 8.21)
has control points (1, 0), (1, 1), (−1, 1), (−1, 0), (−1, −1), (1, −1), (1, 0), weights
1, 1 , 1 , 1, 1 , 1 , 1, and knot vector 0, 0, 0, 1 , 1 , 1 , 3 , 1, 1, 1. These control points
2 2
2 2
4 2 2 4
are expressed as three-dimensional coordinates in the z = 0 plane: c0 (1, 0, 0),
c1 (1, 1, 0), c2 (−1, 1, 0), c3 (−1, 0, 0), c4 (−1, −1, 0), c5 (1, −1, 0), c6 (1, 0, 0). The
scale factor fi is equal to the distance of bi from the z-axis (equal to the xcoordinate of bi ), and the distance di of translation is the distance of bi from
the x-axis (equal to the z-coordinate of bi ). The knots in the s-direction are
s0 , . . . , sm , and the knots in the t-direction are inherited from the NURBS circle. The rows of weights wi,j = {ui , 1 ui , 1 ui , ui , 1 ui , 1 ui , ui } for i = 0, . . . , n,
2
2
2
2
are the weights of the NURBS circle scaled by a factor uj .

Example 9.19
Let B(s) be a NURBS curve of degree d = 3 with control points b0 (2, 0, 1),
b1 (1, 0, 2), b2 (3, 0, 3), b3 (1, 0, 4), b4 (1, 0, 5), weights u0 = 1, u1 = 2, u2 = 3,
u3 = 4, u4 = 2, and knots 0, 0, 0, 0, 1, 2, 2, 2, 2. The surface of revolution is given

246

Applied Geometry for Computer Graphics and CAD

5
4
z3
2
1
-3 -2

Figure 9.11

-1

0
y

1

2

3 3

2

1

0
x

-1

-2

-3

A NURBS surface of revolution

by
4

4

6

S(s, t) =

6

wi,j pi,j Ni,3 (s)Nj,2 (t)
i=0 j=0

wi,j Ni,3 (s)Nj,2 (t) .
i=0 j=0

The control points are computed as follows. The scale factor of the i = 0
row is the x-coordinate of b0 (2, 0, 1), and the translation distance is the zcoordinate. Thus f0 = 2 and d0 = 1. Then p0,j = f0 cj + (0, 0, d0 ), giving p0,0 (2, 0, 1), p0,1 (2, 2, 1), p0,2 (−2, 2, 1), p0,3 (−2, 0, 1), p0,4 (−2, −2, 1),
p0,5 (2, −2, 1), p0,6 (2, 0, 1). The scale factor of the i = 1 row is the x-coordinate
of b1 (1, 0, 2), and the translation distance is the z-coordinate. Thus f1 = 1
and d1 = 2. Then p1,j = f1 cj + (0, 0, d1 ), giving p1,0 (1, 0, 2), p1,1 (1, 1, 2),
p1,2 (−1, 1, 2), p1,3 (−1, 0, 2), p1,4 (−1, −1, 2), p1,5 (1, −1, 2), p1,6 (1, 0, 2), etc.
The rows of weights are w0,j = {1, 1 , 1 , 1, 1 , 1 , 1}, w1,j = {2, 1, 1, 2, 1, 1, 2},
2 2
2 2
w2,j = {3, 3 , 3 , 3, 3 , 3 , 3}, w3,j = {4, 2, 2, 4, 2, 2, 4}, w4,j = {2, 1, 1, 2, 1, 1, 2}.
2 2
2 2
The knots are 0, 0, 0, 0, 1, 2, 2, 2, 2 in the s-direction and 0, 0, 0, 1 , 1 , 1 , 3 , 1, 1, 1
4 2 2 4
in the t-direction. The surface of revolution is illustrated in Figure 9.11.

Example 9.20
A torus is the surface obtained when a circle is swept about an axis that lies in
the plane of the circle (see Section 9.2.1). A torus can be obtained in NURBS
form or by the parametric equation
S(u, v) = ((r cos u + R) cos v, (r cos u + R) sin v, r sin u) ,
where r > 0 is the radius of the circle, and R > 0 is the distance from the axis
to the circle centre. The torus with R = 2 and r = 1 is shown in Figure 9.12(a).
Toroidal surfaces arise as rolling-ball blends (see Section 9.2.1). For instance,

9. Surfaces

247

Figures 9.12(c) and (d) show the eﬀect of blend operations involving a cylindrical solid (b). When R > r the torus has the shape of a doughnut. When r > R
the torus self-intersects in two points on the axis. Removing these two points
gives two surfaces: the outer surface is called an apple torus and the inner one
is referred to as a lemon torus (make a sketch to see why the torii have these
names). The case R = r is called a vortex torus. All the torus surface types
arise in CAD applications.

(a)

(b)

(c)

(d)

Figure 9.12

EXERCISES
9.5. Determine the remaining rows of control points for Example 9.19.
9.6. Determine the control points of the B´zier surface obtained by
e
extruding the cubic B´zier curve with control points b0 (2, 3, 0),
e
b1 (1, 5, 2), b2 (1, 7, −1), b3 (2, 9, −3), in the direction n = 1 , 2 , − 2
3 3
3
through δ = 6 units.
9.7. Determine the control points and weights of the rational B´zier sure
face obtained by extruding the cubic rational B´zier curve with
e
control points b0 (2, 3, 0), b1 (1, 5, 2), b2 (1, 7, −1), b3 (2, 9, −3), and
weights u0 = 1, u1 = 2, u2 = 3, u3 = 1, in the direction
n = 1 , 2 , − 2 through δ = 6 units.
3 3
3
9.8. Determine the control points and knots of the B-spline surface obtained by extruding the quadratic open B-spline curve with control
points b0 (4, 7, 2), b1 (4, 7, 4), b2 (4, 9, 2), b3 (4, 9, 4), and knots s0 = 0,
s1 = 0, s2 = 0, s3 = 1, s4 = 2, s5 = 2, s6 = 2 in the direction
5
1
n = 13 , 13 , 12 through δ = 13 units.
13
9.9. Extrude the quadratic B´zier curve with control points b0 (0, 0, 0),
e
b1 (0, a, 0), b2 (a, 2a, 0) through 1 unit in the direction of the z-axis
to give a parabolic cylinder. List the control points. Describe how a
parabolic cylinder can be obtained as a translationally swept surface.

248

Applied Geometry for Computer Graphics and CAD

9.10. Determine a NURBS sphere by rotating the NURBS circle of Example 8.21 about the z-axis. Apply a scaling of 3 units in the x-direction
and 2 units in the y-direction to the NURBS sphere to obtain an ellipsoid.
9.11. Determine a NURBS representation for a torus.
9.12. (a) Apply a scaling of a units in the x-direction and b units in the
y-direction to the NURBS circle to obtain an ellipse.
(b) Assume that the ellipse lies in the z = 0 plane (by adding a zero
third coordinate to the control points). Determine a NURBS
representation of an elliptic cylinder by (i) extruding the ellipse
through 1 unit in the direction of the z-axis, and (ii) translationally sweeping the line segment (1 − t)(0, 0, 0) + t(0, 0, 1) along
the trajectory curve deﬁned by the ellipse.
(c) Assume that the ellipse lies in the y = 0 plane (by adding a zero
second coordinate to the control points). Determine a NURBS
representation of an ellipsoid (of revolution) by rotating the ellipse about the z-axis.
9.13. Let a hyperbola be deﬁned in NURBS form by control points
b0 (−1, 0, 1), b1 (0, 0, 0), b2 (1, 0, 1), weights w0 = 1, w1 = 3, w2 = 1,
and knot vector −1, −1, −1, 1, 1, 1. Determine a NURBS representation of a hyperboloid (of one sheet) by rotating the hyperbola about
the z-axis.
9.14. Determine the ruled surface deﬁned by the NURBS circle B(t) (assumed to be in the z = 0 plane), and the quadratic NURBS curve
with control points b0 (4, 0, 3), b1 (4, 2, 3), b2 (−4, 2, 3), b3 (−4, 0, 3),
b4 (−4, −6, 3), b5 (4, −6, 3), b6 (4, 0, 3), weights 1, 1, 1/2, 1, 1/2, 1, 1,
and knot vector 0, 0, 0, 1/4, 3/4, 1, 1, 1.

9.5 Surface Subdivision
The de Casteljau, de Boor, and knot insertion algorithms for integral and rational B´zier and B-spline curves can be applied to surfaces. For instance, to
e
subdivide (or to evaluate the coordinates of a point of) a B´zier surface S(s, t)
e
at the parameter value (s0 , t0 ), the de Casteljau algorithm is applied ﬁrst in the
t direction, and then again in the s direction, or vice versa. To apply the algorithm in the t direction, each row of the control polyhedron (that is, the control
e
points pi,j with ﬁxed i) is treated as the control polygon of a B´zier curve in

9. Surfaces

249

the parameter t, and the de Casteljau algorithm is executed with t = t0 . This
yields a subdivision of S(s, t) into two B´zier subsurfaces along the parameter
e
curve S(s, t0 ). Similarly, the de Casteljau algorithm is executed with s = s0 to
each column of the control polygon (that is, the control points pi,j with ﬁxed
j). The result is that the surfaces are subdivided along the parameter curve
S(s0 , t), giving a subdivision of the original surface into four surface patches.
The algorithm also yields an evaluation of the point S(s0 , t0 ).
In a similar manner, the rational de Casteljau algorithm can be applied to
a rational B´zier surface, and the de Boor and knot insertion algorithms can
e
be applied to a B-spline or NURBS surface. The following example elucidates
the method further.

Example 9.21
A B´zier surface S(s, t) has control points
e
p0,0 (2, 3, 0),
p1,0 (6, 2, 1),
p2,0 (10, 2, 0),

p0,1 (2, 6, 3),
p1,1 (6, 6, 4),
p2,1 (10, 6, 3),

p0,2 (2, 10, 0) ,
p1,2 (6, 9, 1) ,
p2,2 (10, 10, 0) .

Apply the de Casteljau algorithm to subdivide the surface along the coordinate
curves S(0.5, t) and S(s, 0.25), and to evaluate the point S(0.5, 0.25). Applying
the de Casteljau algorithm with t = 0.25 to each row of control points yields
=

0

(2, 3, 0)
(2.0, 3.75, 0.75)
(2.0, 4.5625, 1.125)

(2, 6, 3)
(2.0, 7.0, 2.25)

(2, 10, 0)

row i

=

1

(6, 2, 1)
(6.0, 3.0, 1.75)
(6.0, 3.9375, 2.125)

(6, 6, 4)
(6.0, 6.75, 3.25)

(6, 9, 1)

row i

row i

=

2

(10, 2, 0)
(10.0, 3.0, 0.75)
(10.0, 4.0, 1.125)

(10, 6, 3)
(10.0, 7.0, 2.25)

(10, 10, 0)

The result is two surfaces: the ﬁrst with control points
p0,0 (2, 3, 0),
p1,0 (6, 2, 1),
p2,0 (10, 2, 0),

p0,1 (2.0, 3.75, 0.75) , p0,2 (2.0, 4.5625, 1.125) ,
p1,1 (6.0, 3.0, 1.75) , p1,2 (6.0, 3.9375, 2.125) ,
p2,1 (10.0, 3.0, 0.75) , p2,2 (10.0, 4.0, 1.125) ,

and the second surface with control points
p0,0 (2.0, 4.5625, 1.125) ,
p1,0 (6.0, 3.9375, 2.125) ,
p2,0 (10.0, 4.0, 1.125) ,

p0,1 (2.0, 7.0, 2.25) , p0,2 (2, 10, 0) ,
p1,1 (6.0, 6.75, 3.25) , p1,2 (6, 9, 1) ,
p2,1 (10.0, 7.0, 2.25) , p2,2 (10, 10, 0) .

250

Applied Geometry for Computer Graphics and CAD

Next, apply the de Casteljau algorithm with s = 0.5 to the ﬁrst subsurface
(2, 3, 0)
(4, 2.5, 0.5)
(6, 2.25, 0.5)

(6, 2, 1)
(8, 2, 0.5)

(2, 3.75, 0.75)
(4, 3.375, 1.25)
(6, 3.1875, 1.25)

(10, 2, 0)

(6, 3, 1.75)
(8, 3, 1.25)

(2.0, 4.5625, 1.125)
(4.0, 4.25, 1.625)
(6.0, 4.109375, 1.625)

(10, 3, 0.75)

(6.0, 3.9375, 2.125)
(8.0, 3.96875, 1.625)

(10.0, 4.0, 1.125)

and then to the second subsurface
(2.0, 4.5625, 1.125)
(4.0, 4.25, 1.625)
(6.0, 4.109375, 1.625)
(2, 7, 2.25)
(4.0, 6.875, 2.75)
(6.0, 6.875, 2.75)
(2, 10, 0)
(4.0, 9.5, 0.5)
(6.0, 9.5, 0.5)

(6.0, 3.9375, 2.125)
(8.0, 3.96875, 1.625)

(6.0, 6.75, 3.25)
(8.0, 6.875, 2.75)

(6, 9, 1)
(8.0, 9.5, 0.5)

(10.0, 4.0, 1.125)

(10, 7, 2.25)

(10, 10, 0)

The last triangle of points of the ﬁrst subsurface is identical to the ﬁrst triangle
of the second subsurface since the subsurfaces have a common row of control
points. In practice the triangle would only be computed once, but it is included
here twice to illustrate that the surface is divided ﬁrst into two and then into
four. As before the edges of the computed triangle give the control points
of the four surfaces resulting from the subdivision. The point S(0.5, 0.25) is
(6.0, 4.109375, 1.625). Note that only one of the t = 0.25 subsurfaces needs to
be subdivided in order to evaluate this point. The subdivided surface is shown
in Figure 9.13.

Figure 9.13

Subdivided biquadratic B´zier surface of Example 9.21
e

9. Surfaces

251

Subdivision of rational B´zier, B-spline, and NURBS surfaces is performed by
e
applying the rational de Casteljau, the de Boor, or a knot insertion algorithm
in a similar manner.

Remark 9.22
The number of linear interpolations computed in a subdivision of a B´zier
e
surface into four is easily determined. Suppose the surface has degree m in
the s direction and degree n in the t direction. The de Casteljau algorithm
in the s direction requires 1 m(m + 1) interpolations for each column giving
2
a total of 1 m(m + 1) (n + 1) interpolations. The algorithm in the t direction
2
(remembering that there are now 2m + 1 rows of n control points) requires
1
1
2 n(n+1) interpolations per row giving 2 (2m + 1) n(n+1) interpolations in all.
1
The total number of interpolations is 2 m(m+1) (n + 1)+ 1 (2m + 1) n(n+1) =
2
1
2
2 (n + 1) 2mn + n + m + m . Thus, depending on the degrees m and n, it
matters which direction is subdivided ﬁrst. For instance, if m = 3, n = 4, then
the number of computations is 100. But if m = 4, n = 3, then the number of
computations is 94. Thus it is most eﬃcient to subdivide ﬁrst in the variable
which has the largest degree.

EXERCISES
9.15. In Section 6.10.3, a method to determine the intersection of two
B´zier curves using subdivision was described. Describe how the ope
eration of subdivision together with the convex hull property for
surfaces can be used to determine the curve of intersection of two
B´zier surfaces.
e
9.16. Subdivide the B´zier surface of Example 9.21 at s = 0.25 and t = 0.5.
e
9.17. Subdivide the B´zier surface of Example 9.13 at s = 0.4 and t = 0.2.
e
9.18. Use the de Boor algorithm to subdivide the B-spline surface of Exercise 9.3 at s = 2.2 and t = 6.4.

9.6 Skin and Loft Surfaces
Skinning is the operation of constructing a surface that interpolates a number
of user speciﬁed curve sections. Clearly, there are an inﬁnite number of surfaces
passing through two curves c(t) and d(t). One solution is to linearly interpolate

252

Applied Geometry for Computer Graphics and CAD

the two curves to give the ruled surface
x(s, t) = (1 − s)c(t) + sd(t) .

(9.15)

A sequence of curve sections can be skinned by computing ruled surfaces between adjacent pairs of curves as shown in Figure 9.14.

Skinning through curve sections

Figure 9.14

Example 9.23
Let two curve sections be c(t) = (t, t2 , 0) and d(t) = (t, t4 − t2 , 10). Then the
skinning surface given by Equation (9.15) is
x(s, t)

=
=

(1 − s)t + st, (1 − s)t2 + s(t4 − t2 ), (1 − s)0 + s10
(t, t2 − 2st2 + st4 , 10s) .

Figure 9.15(a) shows the skin surface and the intermediate parameter curves
corresponding to s = 0.25, s = 0.5 and s = 0.75.

c(t)

c(t)

s = 0.25

s = 0.25

s = 0.5

s = 0.5

s = 0.75

d(t)

(a)
Figure 9.15

s = 0.75

d(t)

(b)

Skin and loft surfaces of Examples 9.23 and 9.25

9. Surfaces

253

More general skinning surfaces can be achieved by replacing the blending functions 1 − s and s in (9.15) by continuous functions f0 (s) and f1 (s) that satisfy
f0 (0) = f1 (1) = 1 and f0 (1) = f1 (0) = 0. Additionally, the blending functions
can be required to satisfy f0 (s) + f1 (s) = 1 in order to obtain skin surfaces that
are planar whenever the boundary curves are coplanar (Exercise 9.23).
To proceed further, it is necessary to introduce the notion of geometric
continuity for surfaces in a similar manner to curves in Deﬁnition 7.14.

Deﬁnition 9.24
Two regular surfaces x(s, t) and y(u, v) are said to meet with (parametric)
C k -continuity at a point P = x(s0 , t0 ) = y(u0 , v0 ) whenever
∂ i+j y(u0 , v0 )
∂ i+j x(s0 , t0 )
=
,
∂ i s∂ j t
∂ i u∂ j v
for 0 ≤ i + j ≤ k.
Two regular surfaces x(s, t) and y(u, v) are said to meet with Gk -continuity
at a point P = x(s0 , t0 ) = y(u0 , v0 ) whenever there is an invertible mapping
(called a reparametrization) h : (˜, v ) → (u(˜, v ), v(˜, v )) such that x(s, t) and
u ˜
u ˜
u ˜
y(u(˜, v ), v(˜, v )) meet with C k -continuity at P. Two surfaces are said to meet
u ˜
u ˜
with Gk -continuity along a curve if they meet with Gk -continuity at every point
of that curve.
Suppose that x(s, t) and y(u, v) meet with G1 -continuity at P = x(s0 , t0 ) =
u ˜
u ˜
y(u0 , v0 ). Then there is a reparametrization u = u(˜, v ), v = v(˜, v ) for which
the chain rule gives
xs

=

xt

=

∂
y(u(˜, v ), v(˜, v )) =
u ˜
u ˜
∂u
˜
∂
y(u(˜, v ), v(˜, v )) =
u ˜
u ˜
∂˜
v

∂u
∂v
yu +
yv ,
∂u
˜
∂u
˜
∂u
∂v
yu +
yv .
∂˜
v
∂˜
v

(9.16)
(9.17)

Hence
xs × x t

=
=

∂u
∂u
∂v
∂v
yu +
yv ×
yu +
yv
∂u
˜
∂u
˜
∂˜
v
∂˜
v
∂u ∂v
∂v ∂u
−
(yu × yv ) .
∂ u ∂˜ ∂ u ∂˜
˜ v
˜ v

Therefore, when two surfaces meet with G1 -continuity at a point P, they have
the same normal directions, and hence the same tangent planes. The converse is
also true: if two surfaces meet at a point P, and have common surface normals
at P, then the surfaces meet with G1 -continuity (Exercise 9.22).

254

Applied Geometry for Computer Graphics and CAD

Skinning is often referred to as lofting, a term that arises from the shipbuilding industry where some aspects of ship design took place in the lofts of
hangers. Some authors reserve the term “lofting” to mean a skinning operation
where the interpolating surfaces satisfy speciﬁed derivative conditions along the
curve sections. When a skinning operation is applied to a sequence of curve sections, the resulting surfaces meet (in general) with only C 0 -continuity. Lofting,
however, can yield surfaces that have G1 -continuity along the curve sections.
Suppose two curve sections c(t) and d(t) and two derivative functions cs (t)
and ds (t) are speciﬁed. There is no unique loft surface but a commonly used
one is
ˆ
ˆ
x(s, t) = H0 (s)c(t) + H1 (s)d(t) + H0 (s)cs (t) + H1 (s)ds (t) ,

(9.18)

ˆ
where Hi (s) and Hi (s) are the Hermite polynomials:
H0 (s) = 1 − 3s2 + 2s3 ,
H1 (s) = 3s2 − 2s3 ,

ˆ
H0 (s) = s − 2s2 + s3 ,
ˆ
H1 (s) = −s2 + s3 .

Example 9.25
Let the curve sections be c(t) = (t, 0, t2 ) and d(t) = (t, 2, t4 − t2 ), and the
derivative conditions be cs (t) = (0, 2, −1) and ds (t) = (0, 4, −0.5). (Note that
the derivative conditions can be non-constant.) Then the lofting surface given
by Equation (9.18) is
x(s, t)

=

(1 − 3s2 + 2s3 )(t, 0, t2 ) + (3s2 − 2s3 )(t, 2, t4 − t2 )
+ (s − 2s2 + s3 )(0, 2, −1) + (−s2 + s3 )(0, 4, −0.5) .

The coordinate functions simplify to
x(t)

=

(1 − 3s2 + 2s3 )t + (3s2 − 2s3 )t = t ,

y(t) = 2(3s2 − 2s3 ) + 2(s − 2s2 + s3 ) + 4(−s2 + s3 )
=
z(t)

2s − 2s2 + 2s3 ,

=

(1 − 3s2 + 2s3 )t2 + (3s2 − 2s3 )(t4 − t2 )
− (s − 2s2 + s3 ) − 0.5(−s2 + s3 )

= −s + 2.5s2 − 1.5s3 + t2 − 6s2 t2 + 4s3 t2 + 3s2 t4 − 2s3 t4 .
The surface is shown in Figure 9.15(b).

9. Surfaces

255

More general lofting surfaces can be obtained by replacing the blending funcˆ
ˆ
tions H0 , H1 , H0 and H1 by functions f0 (s), f1 (s), g0 (t), g1 (t) that satisfy
f0 (0) = f1 (1) = 1 ,

f0 (1) = f1 (0) = 0 ,

f0 (0) = f0 (1) = 0 ,

f1 (0) = f1 (1) = 0 ,

g0 (0) = g0 (1) = 0 ,

g1 (0) = g1 (1) = 0 ,

g0 (0) = g1 (1) = 1 ,

g0 (1) = g1 (0) = 0 ,

to give the surface
x(s, t) = f0 (s)c(t) + f1 (s)d(t) + g0 (s)cs (t) + g1 (s)ds (t) .

(9.19)

Next consider the task of constructing a surface through four boundary
curves: c(t), d(t), e(s) and f (s), as showed in Figure 9.16. Consider the skin
f(t)

c(t)

d(t)

10
z 0

-10
0

e(t)
10
x

-10
0
20

10
y
20

30
30

Figure 9.16

Gordon–Coons surface interpolating four boundary curves

surface x(s, t) that interpolates c(t) and d(t) given by (9.15). Substituting t = 0
into (9.15) gives
x(s, 0) = (1 − s)c(0) + sd(0) .
Therefore, in order for x(s, t) to interpolate e(s) when t = 0 it is necessary to
modify (9.15) by adding
e(s) − (1 − s)c(0) − sd(0) .
Similarly, substituting t = 1 into (9.15) gives
x(s, 1) = (1 − s)c(1) + sd(1) ,
and in order for x(s, t) to interpolate f (s) when t = 1 it is necessary to modify
(9.15) by adding
f (s) − (1 − s)c(1) − sd(1) .

256

Applied Geometry for Computer Graphics and CAD

The necessary correction across the entire surface is obtained by linearly interpolating the two correction terms
(1 − t) (e(s) − (1 − s)c(0) − sd(0)) + t (f (s) − (1 − s)c(1) − sd(1)) .

(9.20)

Subtracting (9.20) from (9.15) yields the Gordon–Coons surface
ˆ
x(s, t) = (1 − s)c(t) + sd(t) + (1 − t)e(s) + tf (s)
− (1 − s)(1 − t)x0,0 − (1 − s)tx0,1 − s(1 − t)x1,0 − stx1,1 ,

(9.21)

where
x0,0 = c(0) = e(0) ,

x0,1 = c(1) = f (0) ,

x1,0 = d(0) = e(1) ,

x1,1 = d(1) = f (1) .

The Gordon–Coons surface can be expressed in
⎛
−x0,0 −x0,1
⎝ −x1,0 −x1,1
x(s, t) = 1 − s s 1
e(s)
f (s)

matrix form
⎞⎛
⎞
c(t)
1−t
d(t) ⎠ ⎝ t ⎠ .
0
1

(9.22)

The reader should verify that an identical formula is obtained if the above
method is applied to the interpolant of e(s) and f (s).

Example 9.26
Consider four boundary B´zier curves that meet at vertices x0,0 (−4, 0, −4),
e
x0,1 (20, 0, 4), x1,0 (−8, 20, 0) and x1,1 (28, 30, 6) given by
c(t)

=

(−4, 0, −4)(1 − t) + (20, 0, 4)t ,

d(t)

=

(−8, 20, 0)(1 − t)2 + (10, 22, 16)2(1 − t)t + (28, 30, 6)t2 ,

e(s)

=

(−4, 0, −4)(1 − s)2 + (−7, 12, −8)2(1 − s)s + (−8, 20, 0)s2 ,

f (s)

=

(20, 0, 4)(1 − s)2 + (25, 12, 1)2(1 − s)s + (28, 30, 6)s2 .

Using (9.21), the Gordon–Coons surface is x(s, t) = (x(s, t), y(s, t), z(s, t))

9. Surfaces

257

where
x(s, t)

=

4 (1 − s) (1 − t) − 20 (1 − s) t + 8 s (1 − t) − 28 st
2

+ (1 − s) (−4 + 24 t) + s −8 (1 − t) + 20 (1 − t) t + 28 t2
2

+ (1 − t) −4 (1 − s) − 14 (1 − s) s − 8 s2
2

+ t 20 (1 − s) + 50 (1 − s) s + 28 s2
= −4 + 24 t − 6 s + 16 st + 2 s2 − 4 ts2 ,
y(s, t)

2

= −20 s (1 − t) − 30 st + s 20 (1 − t) + 44 (1 − t) t + 30 t2
+ (1 − t) 24 (1 − s) s + 20 s2 + t 24 (1 − s) s + 30 s2
=

z(s, t)

24 s − 6 st + 6 st2 − 4 s2 + 10 ts2 ,

=

4 (1 − s) (1 − t) − 4 (1 − s) t − 6 st + (1 − s) (−4 + 8 t)
2

+ s 32 (1 − t) t + 6 t2 + (1 − t) −4 (1 − s) − 16 (1 − s) s
2

+ t 4 (1 − s) + 2 (1 − s) s + 6 s2
= −4 + 8 t − 8 s + 28 st − 26 st2 + 12 s2 − 4 ts2 .
The surface is shown in Figure 9.16.
Given a grid or network of curves, as showed in Figure 9.17, Gordon–Coons
surfaces can be used to skin between each set of four boundary curve segments
to give a C 0 network surface. A general Gordon–Coons surface can be obtained
by replacing the blending functions 1 − s, s, 1 − t, t, that are used in (9.22), by
functions f0 (s), f1 (s), g0 (t), g1 (t) that satisfy
f0 (0) = g0 (0) = 1,
f1 (1) = g1 (1) = 0,

Figure 9.17

f0 (s) + f1 (s) = 1,
g0 (t) + g1 (t) = 1.

Network of curves interpolated by Gordon–Coons surfaces

258

Applied Geometry for Computer Graphics and CAD

The derivation of the Gordon–Coons surface can be generalised to give a
loft surface that interpolates four boundary curves c(t), d(t), e(s) and f (s) and
satisﬁes four derivative conditions cs (t), ds (t), et (s) and ft (s). The surface is
given by
⎛
⎞
−x0,0
−x0,1
−et (0)
−ft (0) c(t)
⎜ −x1,0
−x1,1
−et (1)
−ft (1) d(t) ⎟
⎜
⎟
⎜ −cs (0) −cs (1) −xst,0,0 −xst,0,1 cs (t)⎟H(t)T , (9.23)
x(s, t) = H(s)⎜
⎟
⎝−ds (0) −ds (1) −xst,1,0 −xst,1,1 ds (t)⎠
ft (s)
0
e(s)
f (s)
et (s)
where
H=

H0

H1

ˆ
H0

ˆ
H1

1

,

and
x0,0 = c(0) = e(0) ,

x0,1 = c(1) = f (0) ,

x1,0 = d(0) = e(1) ,

x1,1 = d(1) = f (1) .

Note that the left hand H of Equation (9.23) is a function of s and the right
hand HT is a function of t. All the entries in the matrix can be obtained from
the speciﬁed curve and derivative data except for those involving xst . The four
values xst,0,0 , xst,0,1 , xst,1,0 and xst,1,1 are called twist vectors, and specify the
∂2x
second order partial derivatives ∂s∂t (s, t) at the corners of the surface. They
can be used to control the shape of the interior of the surface without changing
the shape of the boundary curves.
The loft surface (9.23) can be used to obtain a G1 network surface deﬁned
by a grid of curves in a similar manner to the skin surface. In the case of a
network surface, the second order derivative terms xst,i,j must satisfy additional
compatibility conditions in order to achieve continuity at the corners:
det
(0) =
ds
det
(1) =
=
ds

xst,0,0 =
xst,1,0

dcs
(0) ,
dt
dds
(0) ,
dt

dcs
dft
(0) =
(1) ,
ds
dt
dds
dft
(1) =
(1) .
=
ds
dt

xst,0,1 =
xst,1,1

Example 9.27
Consider a Gordon–Coons surface given by linear boundary curves in the z = 0
plane: c(t) = (0, t, 0), d(t) = (1, t, 0), e(s) = (s, 0, 0), and f (s) = (s, 1, 0). Let
the derivative conditions be cs (t) = (1, 0, 0), ds (t) = (1, 0, 0), et (s) = (0, 1, 0),

9. Surfaces

259

and ft (s) = (0, 1, 0). Then
⎛
−(0, 0, 0)
⎜−(1, 0, 0)
⎜
x(s, t) = H(s)⎜−(1, 0, 0)
⎜
⎝−(1, 0, 0)
(s, 0, 0)

−(0, 1, 0)
−(1, 1, 0)
−(0, 1, 0)
−(0, 1, 0)
(s, 1, 0)

−(1, 0, 0)
−(1, 0, 0)
−xst,0,0
−xst,1,0
(1, 0, 0)

−(1, 0, 0)
−(1, 0, 0)
−xst,0,1
−xst,1,1
(1, 0, 0)

⎞
(0, t, 0)
(1, t, 0)⎟
⎟
(0, 1, 0)⎟H(t)T .
⎟
(0, 1, 0)⎠
(0, 0, 0)

If the twist vectors have zero z-component, then the Gordon–Coons surface has
zero z-component and so the surface is planar. However, if the twist vectors are
chosen so that they point out of the z = 0 plane, then the surface is no longer
planar despite the fact that the boundary curves and the derivatives lie in the
plane. The twist vectors provide a potentially powerful tool for surface design.

EXERCISES
9.19. Determine a skin surface that interpolates the curves c(t) = (3t2 +
4, 2t2 , −t) and d(t) = (2t, −t4 , 2t + 4), for 0 ≤ t ≤ 1.
9.20. Let c(t) = (3t2 , 2t2 , t) and d(t) = (2t + 10, 3t, 2t2 ). Determine the
loft surfaces that interpolate c(t) and d(t), and satisfy the derivative
conditions
a) cs (t) = (1, 1, 0) and ds (t) = (0, −1, 0),
b) cs (t) = (0, −t2 , 0) and ds (t) = (−1, t2 , −1).
9.21. Determine the Coons surface interpolating the four boundary B´zier
e
curves
c(t)

=

(−5, −5, 0)B0,1 (t) + (20, 3, 0)B1,1 (t),

d(t)

=

(−8, 0, 10)B0,2 (t) + (10, 16, 4)B1,2 (t) + (27, 7, 10)B2,2 (t),

e(s)

=

(−5, −5, 0)B0,3 (s) + (−6, −4, 3)B1,3 (s)
+ (−7, −2, 7)B2,3 (s) + (−8, 0, 10)B3,3 (s),

f (s)

=

(20, 3, 0)B0,2 (s) + (22, 5, 4)B1,2 (s) + (27, 7, 10)B2,2 (s).

9.22. Show that if two surfaces meet at a point P and the surfaces have
a common normal direction at P, then the surfaces meet with G1 continuity.
9.23. Consider the skinning operation through two section curves with
general blending functions functions f0 (s) and f1 (s) that satisfy

260

Applied Geometry for Computer Graphics and CAD

f0 (0) = f1 (1) = 1, f0 (1) = f1 (0) = 0 and f0 (s) + f1 (s) = 1. Show
that the skin surface
x(s, t) = f0 (s)c(t) + f1 (s)d(t)
is planar whenever the boundary curves are coplanar.
9.24. Verify that the partial derivatives of the loft surface x(s, t) given by
(9.18), and evaluated at s = 0 and s = 1, agree with the speciﬁed
derivative conditions cs (t) and ds (t) respectively.
n

p

9.25. Suppose two B´zier surfaces B(s, t) = i=0 j=0 bi,j Bi,n (s)Bj,p (t)
e
n
p
and C(s, t) = i=0 j=0 ci,j Bi,n (s)Bj,p (t) (for (s, t) ∈ [0, 1]×[0, 1])
meet along a common boundary B(1, t) = C(0, t). Determine conditions on the control points for the surfaces to have the same tangent
planes along the boundary.

9.7 Geometric Modelling and CAD
Geometric modelling is concerned with developing tools to create, represent,
and manipulate geometric shapes. Every commercial CAD system incorporates
a geometric modeller, an implementation of modelling tools that enable the user
to specify curves, surfaces and solids. Most systems are able to represent the
curve and surface types that were introduced in the earlier chapters such as
lines, conics, planes, quadrics, and B´zier and B-spline curves and surfaces.
e
Geometric modellers make a careful distinction between surfaces and solids.
The term “sphere”, for instance, can refer to either the outer boundary surface
or to the solid consisting of the boundary and all the points inside. A solid
is a ﬁnite volume bounded by a ﬁnite number of surfaces. The intersections
of the bounding surfaces give the edges of the solid, and the intersections of
the edges give the vertices. For example, a solid cube is bounded by six planes.
The planes intersect to give twelve linear edges, and the edges intersect in eight
vertices. Each face of a cube is a planar region bounded by four of the edges.
In addition to the mathematical deﬁnitions of the surfaces and edges, a
speciﬁcation of a solid requires information about the topology of the model,
that is, how the surfaces, edges and vertices interconnect. Not all modellers
can represent solids, and so those that do are referred to as solid modellers. A
number of diﬀerent representations are used in both industrial and academic
modellers and some of these are described in the following sections.

9. Surfaces

261

9.7.1 Wireframe Modeller
A wireframe modeller uses curves to represent both surfaces and solids. Typically, the curves comprise the boundaries of each surface, and additional (parameter) curves to indicate the shape of each surface. The surfaces and solids
are not fully represented and no topological information is stored. Wireframe
modellers are very easy to implement and are useful for obtaining fast renderings of surfaces.

9.7.2 Surface Modeller
A surface modeller represents each surface mathematically, but no topological
information is stored and, therefore, there is no true concept of a solid. The
simplest type of surface modeller is the polyhedral modeller for which the surfaces are all planar. More sophisticated surface modellers are able to represent
B´zier, B-spline and NURBS surfaces, and general parametric surfaces. Surface
e
modellers are useful for product concept, speciﬁcation and styling, and may be
suﬃcient for some applications such as numerical controlled (NC) machining
and computer-aided manufacture (CAM).

9.7.3 Constructive Solid Geometry (CSG) Modellers
A constructive solid geometry (CSG) modeller uses implicit surface deﬁnitions
(see Section 9.1). An implicitly deﬁned surface f (x, y, z) = 0 partitions the
three-dimensional workspace into two regions or half-spaces consisting of points
satisfying f (x, y, z) ≥ 0 and f (x, y, z) ≤ 0 respectively. (Half-spaces can also
be constructed using > and <.) For instance, the unit sphere with the implicit
equation x2 + y 2 + z 2 − 1 = 0 yields two half-spaces: the inside of the sphere,
which is the set of points (x, y, z) satisfying x2 +y 2 +z 2 −1 ≤ 0, and the outside
which is the set of points satisfying x2 + y 2 + z 2 − 1 > 0. Likewise, an inﬁnite
plane divides the workspace into the two regions on either side of the plane.
Solids are deﬁned in terms of half-spaces. For example, a hemisphere comprises
the points satisfying both x2 + y 2 + z 2 − 1 ≤ 0 and z ≥ 0, that is, the set of
points inside the sphere and to one side of the plane z = 0.
The constructive solid geometry (CSG) modeller pre-deﬁnes a number of
solids called primitives. Common primitives include solids derived from planar
and quadric geometries such as spheres, cubes, cylinders and cones. A solid
can be represented by the modeller if it is one of the primitives or can be
constructed from the primitives by applying one or more modelling operations,

262

Applied Geometry for Computer Graphics and CAD

such as linear transformations (see Chapters 1 and 2), and Boolean operations.
Three Boolean operations are used: union, intersection and diﬀerence. Let
A and B be two sets of points representing solids or half-spaces. Then the
union of A and B, denoted A ∪ B, is the set of all points contained in A or B
(including those points in both A and B). The intersection of A and B, denoted
A ∩ B, is the set of all points contained in both A and B. The diﬀerence of A
and B, denoted A \ B, is the set of all points contained in A but not contained
in B. Figure 9.18 exempliﬁes the three operations for two solid blocks. Boolean
operations are a more general concept than presented here and can be deﬁned
for sets of any objects.

B
A

(a)

(b)

(c)

(d)

Figure 9.18
(a) Blocks A and B, (b) union A ∪ B, (c) intersection A ∩ B,
and (d) diﬀerence A \ B

Example 9.28 (Boolean Operations)
In order to cut a hole in a block of material A (called the blank ) it is necessary
to construct an object (called the tool ) that has the shape of the required hole.
Let B be a cylindrical tool. A transformation is applied to B so that it overlaps
the region of A where the hole is to be cut. Note that the tool can be larger
than the required hole. The material that is to be removed from the block is
obtained by performing the diﬀerence operation A \ B as shown in Figure 9.19.

Whenever modelling operations are applied to objects there is a potential
problem that the result is invalid, that is, it cannot be represented by the modeller. For instance, a modeller that can only represent curves and surfaces in
B´zier form cannot represent the intersection of two B´zier surfaces since the
e
e
curve of intersection is not (in general) a B´zier curve. One of the strengths of
e
the CSG representation is that Boolean operations are guaranteed to give valid
results. Further, the implicit surface deﬁnitions make it straightforward to per-

9. Surfaces

263

A
B

(a)
Figure 9.19

(b)

(c)

Cutting a hole using a Boolean operation

form interrogations such as determining whether a point lies inside or outside
of a solid or on a boundary surface. However, the implicit representations and
the lack of topological information makes rendering computationally expensive
since the edge and boundary information needs to be computed before it can
be drawn.

9.7.4 Boundary Representations (B-rep)
B-rep modellers distinguish the topology of a model from its geometry. A solid
has three main topological entities, namely, faces, edges and vertices corresponding to the geometric entities surfaces, curves and points. The geometric
entities store information about shape such as the coordinates of a point, the
deﬁning function of a parametric curve or surface, or the control points and
knots of a B-spline curve or surface. The topological entities store information
about their relationship to the other entities together with a reference to the
corresponding geometric entity. B-rep modellers commonly use the following
terminology.
Vertex : A vertex represents a point that speciﬁes where edges meet.
Edge: An edge represents a ﬁnite arc of a curve bounded by two vertices, and
speciﬁes where two faces intersect.
Loop: A loop is a connected sequence of edges.
Face: A face represents a ﬁnite region of a surface bounded by one outer loop
and a number of inner loops. The inner loops cannot be nested and must
not intersect.
Shell : A shell is a collection of connected faces.
Solid : A solid is a union of volumes enclosed by shells.
B-rep modellers may also represent non-solid objects such as a sheet which
is deﬁned by a face and does not necessarily bound a ﬁnite volume, and a wire

264

Applied Geometry for Computer Graphics and CAD

which is deﬁned by a connected sequence of edges.

Example 9.29
Consider the tetrahedron of Figure 9.20(a). There are four vertices V1 , V2 ,
V3 , V4 , six edges E1 , E2 , E3 , E4 , E5 , E6 , and four faces F1 , F2 , F3 , F4 . Face
F1 has one loop of edges E1 → E2 → E3 → E1 . Edge E1 has vertices V1 and
V2 .
V3

F2
E6

E3

V
4

E4
F1
E2

V
1

F3

F
4
E5

E1
V2

(a)

(b)
Figure 9.20

Example 9.30
Consider Figure 9.20(b) showing a block with two holes. The solid is deﬁned
by one shell with 14 faces. Twelve of the faces are rectangular and each has
one loop of four edges and four vertices. The two remaining faces, forming the
top and bottom of the object, have three loops each: one outer and two inner.
The solid is deﬁned by 24 vertices, 36 edges, 14 faces and one shell.
The separation of the topology and the geometry is an important aspect
of the B-rep. The topology of two instances of a tetrahedron, for example,
is identical, whereas the underlying geometry, such as the coordinates of the
vertices, may diﬀer. An application of a non-singular transform to a solid has
no eﬀect on the topology, but it does change the geometry.
Solids with more than one shell arise, for instance, when the solid contains
a void. Voids are obtained by the Boolean subtraction A \ B of two solids
whenever B is contained in the interior of A. Multiple shells also arise when a
Boolean operation causes a volume to be cut into disjoint volumes called lumps.
In CAD applications a solid object is said to be manifold whenever the
following conditions are satisﬁed:

9. Surfaces

265

1. All edges and faces are bounded.
2. Edges only intersect at vertices.
3. Faces only intersect in edges.
4. Edges are contained in exactly two faces.

(a)
Figure 9.21

(b)
Non-manifold bodies

Figure 9.21 shows examples of non-manifold objects. In the process of applying Boolean operations to manifold objects it is possible to obtain objects
that are no longer manifold. For instance the object of Figure 9.21(a), which
violates condition (4) above, can be obtained by applying the union operation
to two blocks. The solid of Figure 9.21(b) violates condition (3).
As a sanity check, solids must satisfy the Euler–Poincar´ Formula
e
V − E + F − I = 2(S − H)

(9.24)

where V , E, F , I, S, and H are the numbers of vertices, edges, faces, inner
loops, shells, and holes, respectively. The solid of Example 9.30 satisﬁes the
Euler–Poincar´ formula since there are 24 vertices, 36 edges, 14 faces, and two
e
holes. Further, there are two faces, each with two inner loops, giving 4 loops in
total, and therefore yielding the identity 24 − 36 + 14 − 4 = 2(1 − 2).
A B-rep modeller is considered to be more versatile than a CSG modeller
because it is possible to deﬁne objects with complex boundary faces using
B-splines or general parametric surfaces, whereas a CSG modeller is limited
to solids obtained from the primitives. The operation of determining whether
a point lies inside or outside of a solid, or on a boundary surface is often
computationally expensive for a B-rep modeller than for a CSG modeller which
can yield the information from the half-spaces deﬁning the solid.
CSG modellers retain information about the Boolean operations used to
construct a solid. So if a user wishes to make a change to a model parameter
such as the position of a vertex or the radius of a sphere, then the solid can
easily be reconstructed by repeating the Boolean operations on the objects with

266

Applied Geometry for Computer Graphics and CAD

the new dimensions. To emulate the CSG data structure, some B-rep modellers
have a model design history that retains information about how each solid is
created so that the system can repeat the design process if a user modiﬁes a
parameter, or wishes to “undo” an operation to rectify an error. The danger
for a B-rep system is that some modiﬁcations can result in self-intersections or
other types of invalid model. In view of the pros and cons, the reader should
not be surprised to learn that all the leading commercial CAD modellers use
the B-rep method or a hybrid of B-rep and CSG representations.

EXERCISES
9.26. The B-rep data structure is complex and a number of similar solutions have been proposed. Investigate Baumgart’s winged-edge Brep structure and two improved representations: M¨ntyl¨’s half-edge
a
a
structure [16] and Braid et al. [4].
9.27. Euler operations are a set of primitive operations that can be applied
to a solid to give a new solid that satisﬁes the Euler–Poincar´ formula
e
(9.24) and therefore maintains validity. Investigate. See Toriya [16].

10

Curve and Surface Curvatures

The aim of this chapter is to discuss the local geometry of a curve or surface.
In particular, to determine measures of how much a curve or surface “bends”,
and to describe the shape of a curve or surface in the vicinity of a point on
that curve or surface. These measures or “curvatures” have applications in
determining the quality, or isolating imperfections of, the curves and surfaces
produced by a designer using a CAD package.

10.1 Curvature of a Plane Curve
Let C(t) = (x(t), y(t)) be a regular parametric plane curve deﬁned on an interval I (open or closed). It is assumed that C(t) is C 1 -continuous (that is,
the derivatives of x(t) and y(t) exist and are continuous) and that higher order
derivatives exist whenever the context suggests that they are required. In Section 5.4 it was shown that a regular curve can be reparametrized with respect
to the arclength parameter s to give a unit speed curve. The curve C(t) and its
unit speed reparametrization C(t(s)) are both denoted by C. Diﬀerentiation
with respect to a general parameter will be denoted by a “ · ” and diﬀerentiation with respect to the unit speed parameter will be denoted by a “ ”. For
˙
instance, C = dC and C = dC . Recall that
dt
ds
t
2

(x(u)) + (y(u))
˙
˙

s(t) =
t0

267

2

1/2

du

268

Applied Geometry for Computer Graphics and CAD

and
2

1/2

2

˙
ν(t) = s(t) = (x(t)) + (y(t))
˙
˙

.

Let t and n denote the unit tangent and normal of C. Since t(s)·t(s) = 1,
diﬀerentiation yields t(s)·t (s) = 0, implying t (s) is perpendicular to t(s).
Hence t (s) is parallel to n(s), and so
t (s) = κ(s)n(s)

(10.1)

for some κ(s) called the curvature of C. Since s(t) = ν(t), the chain rule gives
˙
˙ = νt , and hence in terms of a general parameter the curvature is given by
t
˙
t(t) = κ(t)ν(t)n(t) .

(10.2)

It follows that
˙
κ = |t | = t /ν .
Further, diﬀerentiation of n(s) · n(s) = 1 gives n(s) · n (s) = 0, implying n (s) is perpendicular to n(s). Hence n (s) is parallel to t(s), and so
n (s) = µ(s)t(s) for some µ(s). To determine µ(s), diﬀerentiate t(s) · n(s) = 0
to give t (s)·n(s) + t(s) · n (s) = 0. Thus
(κ(s)n(s)) ·n(s) + t(s) · (µ(s)t(s)) = κ(s) + µ(s) = 0 .
Hence µ(s) = −κ(s), and
n (s) = −κ(s)t(s) .
The chain rule gives n = νn , and hence in terms of a general parameter
˙
n(t) = −κ(t)ν(t)t(t) .
˙

(10.3)

Equations (10.2) and (10.3) are known as the Frenet formulae for plane curves.

Theorem 10.1
The curvature of a regular plane curve C(t) = (x(t), y(t)) is
κ(t) =

x(t)¨(t) − x(t)y(t)
˙ y
¨ ˙
3/2

(x(t)2 + y(t)2 )
˙
˙

.

Proof
˙
The derivatives of t(t)= C(t) /ν(t) and ν(t) = x(t)2 + y(t)2
˙
˙
˙
t(t) =
ν(t) =
˙

¨
˙
ν(t)C(t) − ν(t)C(t)
˙

1/2

ν(t)2 , and

(x(t)¨(t) + y(t)¨(t))/ ν(t) .
˙ x
˙ y

are

10. Curve and Surface Curvatures

So

269

(x(t)¨(t) − y(t)¨(t)) (−y(t), x(t))
˙ y
˙ x
˙
˙
˙
t(t) =
.
3/2
(x(t)2 + y(t)2 )
˙
˙

˙
˙
Then t(t) = κ(t)ν(t)n(t) implies that t(t) · n(t) = κ(t)ν(t), and hence
κ(t) =

˙
x(t)¨(t) − y(t)¨(t)
˙ y
˙ x
t(t) · n(t)
=
.
2 + y(t)2 )3/2
ν(t)
(x(t)
˙
˙

The next aim is to show that κ(t) is a measure of the “bendiness” of a
regular plane curve. This is accomplished by showing that, near a given point
on a curve, the curve is well approximated by a circle. The radius of that circle
measures the extent to which the curve bends. It will be shown that κ(t) is the
reciprocal of the radius.
To this end, consider three neighbouring points C(t−δt), C(t), and C(t+δt)
of a regular curve C. Let x = (x, y). Suppose (x−c)·(x−c)−r2 = 0 (c constant)
is the unique circle through the points, and let
σ(t) = (C(t) − c) · (C(t) − c) − r2 .
Then σ(t − δt) = σ(t) = σ(t + δt) = 0, and by Rolle’s theorem, there exist
t0 ∈ (t − δt, t) and t1 ∈ (t, t + δt) such that σ(t0 ) = σ(t1 ) = 0. A further
˙
˙
application of Rolle’s theorem implies that there exists a t2 ∈ (t0 , t1 ) such that
σ (t2 ) = 0. Thus
¨
σ(t0 )
˙

=

σ(t1 )
˙

=

˙
2(C(t0 ) − c) · C(t0 ) = 0 ,
˙
2(C(t1 ) − c) · C(t1 ) = 0 ,

σ (t2 )
¨

=

¨
˙
˙
2(C(t2 ) − c) · C(t2 ) + 2C(t2 ) · C(t2 ) = 0 .

Letting δt → 0, then the three points converge to the point C(t), and t0 , t1 , t2
all converge to t so that
˙
2(C(t) − c) · C(t)
¨
˙
˙
2(C(t) − c) · C(t) + 2C(t) · C(t)

=

0,

(10.4)

=

0.

(10.5)

The circle converges to the circle, known as the osculating circle, which best
ﬁts C at the point C(t). Equation (10.4) implies that C(t) − c is perpendicular
to the tangent vector and hence parallel to the normal vector. Thus C(t) − c =
µn(t) for some µ. Substituting in (10.5) gives
¨
˙
˙
2(µn(t)) · C(t) + 2C(t) · C(t) = 0 .

(10.6)

270

Applied Geometry for Computer Graphics and CAD

˙
¨ ˙
˙
˙
Since C = νt and t = νκn, it follows that C =νt+ν t = νt+ν 2 κn. Substituting
˙
˙
¨
for C and C in (10.6) yields
2(µn) · νt + ν 2 κn + 2 (νt) · (νt) = 2 µν 2 κ + ν 2 = 0 .
˙
1
1
Hence µ = − κ and the centre of the osculating circle is c = C(t) + κ(t) n(t),
1
called the centre of curvature. The osculating circle has radius ρ(t) = |κ(t)| ,
called the radius of curvature. Since the curve is well approximated by the
osculating circle, the curvature κ(t) measures the bendiness of the curve at
C(t). When |κ(t)| is small, ρ(t) is large and therefore the curve is fairly ﬂat,
whereas when |κ(t)| is large, ρ(t) is small and the curve bends a fair amount.
When κ(t) > 0, c lies on the same side of the curve as n, and when κ(t) < 0,
c lies on the opposite side of the curve to n, as shown later in Figure 10.1.

t

y

n

t

k<0

n

k=0

c

c

k>0

t

q

x

t
Figure 10.1

Curvature of a plane curve

Example 10.2
˙
Consider the ellipse C(θ) = (a cos θ, b sin θ). Then C(θ) = (−a sin θ, b cos θ) and
¨
C(θ) = (−a cos θ, −b sin θ), giving
κ(θ) =

(−a sin θ) (−b sin θ) − (b cos θ) (−a cos θ)
2

2

(−a sin θ) + (b cos θ)

3/2

ab

=
a2

2

sin θ + b2 cos2 θ

3/2

.

The graph of the curvature for a = 3, b = 2, and 0 ≤ θ ≤ 2π is shown in
Figure 10.2. The curvature has maximum values at θ = 0 and θ = π, and
minimum values at θ = π/2 and θ = 3π/2. The corresponding points on the
ellipse are easily identiﬁed.
Suppose κ(s) is the curvature function of a unit speed curve C(s) =
(x(s), y(s)). Then since t(s) is a unit vector, t(s) = (cos θ(s), sin θ(s)) where

10. Curve and Surface Curvatures

271

0.7
0.6
0.5
0.4
0.3
0.2
0.1
00

Figure 10.2

1

2

3

4

5

6

Curvature function for the ellipse C(θ) = (3 cos θ, 2 sin θ)

θ(s) is the angle the tangent vector makes with the x-axis (see Figure 10.1).
Then n(s) = (− sin θ(s), cos θ(s)), t (s) = θ (s) (− sin θ(s), cos θ(s)) = θ (s)n(s),
and comparison with (10.1) gives
κ(s) = θ (s) .

(10.7)

So curvature is the rate of change of the tangent (when the curve is unit speed).
This fact is used in Theorem 10.3. When κ > 0, n and t have the same
direction, and when κ < 0, n and t have opposite directions, as shown in
Figure 10.1.

Theorem 10.3
Let κ(s) be a continuous function. Then there exists a planar unit speed curve
C(s) = (x(s), y(s)) with curvature κ(s). The curve is unique up to its position
and orientation in the plane.

Proof
Suppose κ(s) is the curvature function of a unit speed curve C(s) = (x(s), y(s)),
and suppose (x(s0 ), y(s0 )) = (x0 , y0 ) and (x (s0 ), y (s0 )) = (x0 , y0 ). Let t(s) =
(x (s), y (s)) = (cos θ(s), sin θ(s)). Then (10.7) gives
s

θ(s) = θ(s0 ) +

κ(u) du ,
s0

where θ(s0 ) = tan−1 (y0 /x0 ) if x0 = 0, and θ(s0 ) = π/2 if x0 = 0. Thus
s

x(s) = x0 +

s

cos θ(u) du,
s0

y(s) = y0 +

sin θ(u) du .

(10.8)

s0

Equations (10.8) show the existence of a unit speed curve with curvature κ(s).
For a given initial point (x0 , y0 ) and tangent direction (x0 , y0 ), the constructed

272

Applied Geometry for Computer Graphics and CAD

curve is uniquely determined. So all unit speed curves with curvature κ(s) can
be mapped to one another by a planar transformation consisting of a rotation
which aligns the initial tangent directions of the curves, and a translation which
maps the initial point of one curve to the initial point of the other.

The curvature κ(s) is often referred to as the natural or intrinsic equation
of a curve.

Remark 10.4
An alternative proof of Theorem 10.3 is obtained by noting that the identity
t (s) = κ(s)n(s) yields a system of ordinary diﬀerential equations
x (s) = −κ(s)y (s)
.
y (s) = κ(s)x (s)

(10.9)

The existence of solutions to this system is a result in the theory of diﬀerential
equations. The system can be converted to a second order diﬀerential equation.
Let X(s) = x (s) and Y (s) = y (s), then (10.9) gives the system of ﬁrst order
diﬀerential equations
X (s) = −κ(s)Y (s)
.
(10.10)
Y (s) = κ(s)X(s)
Diﬀerentiating the ﬁrst equation gives X (s) = −κ (s)Y (s) − κ(s)Y (s) and
substituting Y = κ(s)X(s) and Y (s) = −X (s)/κ(s) yields
X (s) −

κ (s)
X (s) + κ(s)2 X(s) = 0 .
κ(s)

(10.11)

Equation (10.11) can be solved for X(s) and the result used to determine Y (s).
Finally, X(s) and Y (s) are integrated to obtain x(s) and y(s).
For fairly simple choices of κ(s), Equations (10.11), (10.9), or (10.8) can
be solved to give analytical solutions for x(s) and y(s) using standard techniques. For more complicated κ(s), numerical integration methods can be used
to evaluate the integrals (10.8).

Example 10.5
Let κ(s) = 1/R, (x(0), y(0)) = (R, 0), and (x (0), y (0)) = (0, 1). Following
s
the proof of Theorem 10.3, s0 = 0, α = π/2, and θ(s) = π/2 + 0 1/R du =

10. Curve and Surface Curvatures

273

π/2 + s/R. So
s

x(s) = R +

s

− sin(u/R) du

cos (π/2 + u/R) du = R +
0

0

= R + (R cos(s/R) − R) = R cos(s/R) .
Similarly,
s

s

sin (π/2 + u/R) du =

y(s) =
0

cos (u/R) du = R sin(s/R) .
0

Thus (x(s), y(s)) = (R cos(s/R), R sin(s/R)). The curve is a circle radius |R|.
Alternatively, κ(s) = 1/R, κ (s) = 0, and (10.11) gives
X (s) +

1
X(s) = 0 ,
R2

which has solutions of the form X(s) = A cos(s/R) + B sin(s/R). The initial
condition X(0) = x (0) = 0 implies A = 0. Thus x (s) = B sin(s/R), and
integrating gives x(s) = −BR cos(s/R). The initial condition x(0) = R yields
1
B = −1 and x(s) = R cos(s/R). Finally, Y (s) = −X (s)/κ(s) = R cos(s/R),
and so y(s) = sin(s/R).

Example 10.6
Let κ(s) = as, (x(0), y(0)) = (0, 0), and (x (0), y (0)) = (1, 0). Then, s0 = 0,
s
α = 0, θ(s) = 0 au du = 1 as2 , and
2
s

x(s) =

cos
0

1 2
as
2

s

du,

sin

y(s) =
0

1 2
au
2

du .

The integrals in the above expressions are known as Fresnel integrals. The curve
obtained is called a clothoid or Cornu spiral, and is illustrated in Figure 10.3.

EXERCISES
10.1. Compute the unit tangent vector, unit normal vector, and curvature
for each of the following curves:
(a) catenary: C(t) = (t, c cosh(t/c));
(b) cycloid: C(t) = (t − sin t, 1 − cos t), t ∈ [−π, π];
(c) logarithmic spiral: C(t) = aebt cos t, aebt sin t .
10.2. Determine the curvature κ(t) of the curve (t, t3 ). Sketch the curve,
and indicate the parts of the curve where κ > 0 and κ < 0.

274

Applied Geometry for Computer Graphics and CAD

1
y
0.5
-1

-0.5

0

0.5 x

1

-0.5
-1

Clothoid or Cornu spiral

Figure 10.3

10.3. Determine the parametrization of the plane unit speed curve with
curvature
√
(a) κ(s) = 1/ 1 − s2 ;
√
(b) κ(s) = 1/ s;
(c) κ(s) = −a/(a2 + s2 ) where a is a positive real number.
10.4. Show that a regular plane curve with curvature κ = 0 is a straight
line.
10.5. Show that a plane curve with polar coordinates r = r (θ) for θ ∈ [a, b]
(so (x(θ), y(θ)) = (r(θ) cos θ, r(θ) sin θ)) has arclength
b
2

2

r (θ) + r (θ) dθ ,
a

and curvature
2

κ (θ) =

2

2r (θ) − r (θ) r (θ) + r (θ)
2

2

3/2

.

r (θ) + r (θ)

10.6. Let C(t) be a regular plane curve such that κ(t) = 0. The curve
1
E(t) = C(t) + κ(t) n(t) is called the evolute of C(t). The evolute is
the locus of the centres of curvature of C(t). Determine the evolute
of the following curves:
(a) cycloid : C(t) = (t + sin t, 1 − cos t).
(b) ellipse: C(t) = (a cos t, b sin t).
10.7. Consider the ellipse C(t) = (3 cos t, 2 sin t), t ∈ [0, 2π].

10. Curve and Surface Curvatures

275

(a) Determine the parametric equation of the oﬀset of the ellipse at
a distance d.
(b) Determine κ and κ. Hence calculate the parameter values, and
˙
the corresponding points on the ellipse, where the curvature is
at a maximum or a minimum.
(c) Obtain the maximum and minimum values of curvature. Deduce
the maximum radius d that a ball cutter can be in order to cut
the shape of the ellipse (assuming the cutter is in the interior of
the ellipse).

10.2 Curvature and Torsion of a Space Curve
Let C(t) = (x(t), y(t), z(t)) be a regular parametric space curve deﬁned on an
interval I (open or closed). As for the case of plane curves, the curve C(t) and its
unit speed reparametrization C(t(s)) are both denoted by C, and diﬀerentiation
with respect to a general and unit speed parameter are distinguished by · and
1/2
respectively. The speed of a space curve is ν(t) = x(t)2 + y(t)2 + z(t)2
˙
˙
˙
,
˙
and the chain rule for diﬀerentiation yields C =νC . The unit tangent vector
is deﬁned to be
˙
(10.12)
t = C = C/ν .
˙
The vector k = t = t/ν is called the curvature vector, and its magnitude
˙
κ = |k| = |t | = t

ν,

is called the curvature of C. The curvature measures the rate of change of
the tangent t along the curve with respect to arclength. At a given point of a
space curve, there are inﬁnitely many vectors which are perpendicular to t, and
therefore normal to the curve. Since t is a unit vector, t · t = 1 and t · t = 0.
Hence k = t is perpendicular to t. At every point of the curve for which κ = 0
there is a well-deﬁned unit vector
˙
n = t /|t | = t

˙
t

called the principal normal. It follows that
t = κn

˙
and t = κνn .

(10.13)

If κ = 0 then the principal normal is not well deﬁned.
At a point p on the curve C, the plane containing point p, and directions
t and n is called the osculating plane. The unit vector b = t × n, which is

276

Applied Geometry for Computer Graphics and CAD

perpendicular to the osculating plane, is called the binormal vector. The plane
containing p, n, and b is called the normal plane, and the plane containing p, t,
and b is called the rectifying plane. The planes are depicted in Figure 10.4. The
b
Rectifying
plane
Normal
plane

t

Osculating
plane

Figure 10.4

n

Osculating, normal and rectifying planes of a space curve

mutually perpendicular unit vectors t, n, and b are called the Frenet frame,
and they satisfy
t · t = 1,

n · n = 1,

b·b=1,

t · n = 0,

t · b = 0,

n·b=0.

(10.14)

Any vector v can be expressed in terms of the frame: v = v1 t+v2 n+v3 b. Then
v · t = (v1 t + v2 n + v3 b) · t = v1 (t · t) + v2 (n · t) + v3 (b · t) = v1 . Similarly,
v2 = v · n and v3 = v · b. So v = (v · t) t + (v · n) n + (v · b) b. The expression
is called the orthonormal expansion of v with respect to the Frenet frame.
Diﬀerentiating the ﬁrst row of equations of (10.14) yields
˙
t · t = 0,

n · n = 0,
˙

˙
b·b=0.

(10.15)

˙
The orthonormal expansion of b with respect to the Frenet frame gives
˙
˙
˙
˙
˙
˙
b = (b · t)t + (b · n)n + (b · b)b = (b · t)t + (b · n)n .
˙
˙
Diﬀerentiating b · t = 0 gives b · t + b · t = 0, and (10.13) implies
˙
˙
b · t = −b · t = −b· (κνn) = 0 .
˙
˙
˙
Hence b = (b · n)n and therefore b and b are parallel to n. Thus b = −τ n
for some τ called the torsion, and
˙
b = b ν = −τ νn .

(10.16)

10. Curve and Surface Curvatures

277

b is called the torsion vector . Torsion measures the bending of the curve out
˙
of the osculating plane, and can be computed using τ = − b · n /ν (also see
Theorem 10.9).
˙
Diﬀerentiating n · b =0 yields n · b + n · b =0, and (10.16) implies
˙
˙
n · b = −n · b = −n· (−τ νn) =τ ν .
˙

(10.17)

˙ ˙
Likewise, diﬀerentiating n · t =0 gives n · t + n·t =0, and (10.13) gives
˙
n · t = −n · t = −n · (κνn) = − κν .
˙

(10.18)

The orthonormal expansion for n is
˙
˙
˙
n = (n · t)t+(n · n)n+(n · b)b ,
˙
˙
and it follows from (10.15), (10.17), and (10.18) that
n = −κνt+τ νb .
˙

(10.19)

Together Equations (10.13), (10.16), and (10.19) yield the following theorem
˙ ˙ ˙
which expresses the vectors t, n, b in terms of the Frenet frame.

Theorem 10.7 (Frenet–Serret Formulae)
Let C(t) be a regular curve with κ(t) = 0. Then
˙
t(t)

= κ(t)ν(t)n(t) ,

n(t) = −κ(t)ν(t)t(t) + τ (t)ν(t)b(t) ,
˙
˙
b(t) = −τ (t)ν(t)n(t) .

Example 10.8
˙
Consider the twisted cubic C(t) = (t, 1 t2 , 1 t3 ). Then C(t) = (1, t, 1 t2 ) and
2
6
2
ν(t) = 12 + t2 +

1 2
2t

1/2

=

2+t2
2 .

Hence

˙
C(t) =

˙
t = C(t)
2

2
2t
t2
,
,
2 2 + t2 2 + t2
2+t

4t
4−2t
4t
˙
˙
Thus t = − (2+t2 )2 , (2+t2 )2 , (2+t2 )2 , t =

˙
n=t

˙
t =

−

2
2+t2 ,

.

and

2t
2 − t2
2t
,
,
2 2 + t2 2 + t2
2+t

.

278

Applied Geometry for Computer Graphics and CAD

Further,
b=t×n=

t2
2t
2
,−
,
2 + t2
2 + t2 2 + t2

The curvature is

4

˙
κ = t /ν =

2

(2 + t2 )

.

.

Further,
˙
n·b =

−

= −

2t
2 − t2
2t
,
,
2 2 + t2 2 + t2
2+t

4 − 2t2

4t

·

(2 +

2,−
t2 )
(2

+

2
t2 )

,−

4t
(2 + t2 )

2

2
.
2 + t2

Thus, the torsion is
˙
τ =− n·b

4

ν=

(2 + t2 )

2

.

EXERCISES
...
¨ ˙
˙ ˙
10.8. Show that C =νt + κν 2 n and C = ν − κ2 ν 3 t + 3κν ν + κν 2 n +
¨
κτ ν 3 b.
10.9. Show that for a unit speed curve C(s), κ(s) = |C (s)|.
10.10. Determine the Frenet frame, curvature, and torsion of the curve
C(t) = (4 cos t, 5 − 5 sin t, −3 cos t). Describe the curve.
10.11. Determine the Frenet frame, curvature, and torsion of the curve
√
C(t) = 3 cos t − 4 sin t, 3 sin t + 4 cos t, 5 3t .
The next theorem gives one of the most direct methods of computing the
curvature, torsion, and Frenet frame. In particular, the curvature and torsion
can be obtained without having to compute the Frenet frame.

Theorem 10.9
Let C be a regular curve. Then
κ=

˙ ¨
|C×C|
,
˙ 3
|C|

τ=

˙ ¨ ...
(C×C)· C
,
˙ ¨ 2
|C×C|

t=

˙
C

˙
|C |

,

b=

˙ ¨
C×C

˙ ¨
|C×C|

,

n=b×t.

10. Curve and Surface Curvatures

279

Proof
˙
Using C = νt and the results of Exercise 10.8,
˙
¨
C × C = νt × νt + κν 2 n = ν ν (t × t) + κν 3 (t × n) .
˙
˙
Then, since t × t = 0 and t × n = b it follows that
˙
¨
C × C = κν 3 b .

(10.20)

˙
¨
Hence C × C = κν 3 b = κν 3 , so that
κ=

˙ ¨
|C×C|
ν3

=

˙ ¨
|C×C|
˙ 3
|C|

and b =

˙ ¨
C×C

˙ ¨
|C×C|

.

˙
˙
Equation (10.12) gives t = C C , and it follows that n = b × t. Equations
(10.20) and (10.14), and Exercise 10.8, imply
...
˙
¨
C × C · C = κν 3 b ·

˙ ˙
ν − κ2 ν 3 t + 3κν ν + κν 2 n + κτ ν 3 b = κ2 τ ν 6 .
¨

Hence,
τ=

˙ ¨ ...
(C×C)· C
κ2 ν 6

=

˙ ¨ ...
(C×C)· C
.
˙ ¨ 2
|C×C|

Example 10.10
t
t
Consider the helix C(t) = a cos c , a sin c , bt where c = (a2 + b2 )1/2 and
c
...
t
t b
a
t
a
t
˙
¨
a > 0. Then C = − a sin c , a cos c , c , C = − c2 cos c , − c2 sin c , 0 , C =
c
c
a
t
a
t
c3 sin c , − c3 cos c , 0 . The curve is unit speed since

˙
C =
˙
¨
Then C × C =

t
a
− sin
c
c

2

+

b
t
b
t a2
c3 a sin c , − c3 a cos c , c3

κ=

a
t
cos
c
c

2

+

bt
c

˙
¨
and C × C =

2

=1.
a
a2 +b2 .

Hence

˙ ¨
a
|C×C|
= 2
.
˙ 3
|C|
a + b2

(Since the curve is unit speed the curvature can also be computed using κ =
...
2
˙
¨
¨
|t | = C .) Further, C × C · C = 2a b2 3 , and hence
(a +b )

τ=

˙ ¨ ...
b
(C×C)· C
= 2
.
˙ ¨ 2
|C×C|
a + b2

280

Applied Geometry for Computer Graphics and CAD

The Frenet frame is
a
t a
t b
˙
C = − sin , cos ,
,
c
c c
c c
b
t b
t a
˙
¨
˙
¨
C×C =
sin , − cos ,
C×C
b =
c
c c
c c
t
t
n = b × t = − cos , − sin , 0 .
c
c
t

=

˙
C

,

Example 10.11
˙
¨
Consider the curve C(t) = t, 1 t2 , 1 t3 . Then C = 1, t, 1 t2 , C = (0, 1, t), and
2
6
2
...
2+t2
˙
C = (0, 0, 1). Then ν = C = 2 , and
1
1, t, t2
2

˙
¨
C×C =

× (0, 1, t) =

Hence
κ=
...
˙
¨
Further, C × C · C =

˙ ¨
|C×C|
=
˙ 3
|C|

1 2
2 t , −t, 1

τ=

1 2
t , −t, 1
2

4
(2+t2 )2

=

2 + t2
.
2

.

· (0, 0, 1) = 1. So

˙ ¨ ...
(C×C)· C
=
˙ ¨ 2
|C×C|

4
(2+t2 )2

.

Example 10.12 (Application to Rigid Body Motion)
Consider the motion of a rigid body. Suppose that a reference point on the
body moves along a unit speed curve C(s). Instantaneously, a line of points of
the rigid body are stationary, and the body rotates about that line. The line
has the direction of the Darboux vector ω which satisﬁes
t = ω × t,

n = ω × n,

b =ω×b.

The magnitude ω of ω is the angular velocity of the motion at that instant.
Suppose the orthonormal expansion of ω with respect to the Frenet frame is
ω = αt + βn + γb. Then
t

=

(αt + βn + γb) × t =γn − βb

n

=

(αt + βn + γb) × n = −γt+αb

b

=

(αt + βn + γb) × b =βt − αn

and the Frenet formulae give α = τ , β = 0, and γ = κ. Hence ω = τ t+κb.

10. Curve and Surface Curvatures

281

Theorem 10.13
Let C(t) be a regular curve, deﬁned on an interval I, with curvature κ(t) and
torsion τ (t).
1. If κ(t) = 0 for all t ∈ I, then C(t) is a line segment.
2. If τ (t) = 0 and κ(t) = 0 for all t ∈ I, then C(t) is a planar curve.
3. If τ (t) = 0 for all t ∈ I, and κ is a non-zero constant, then C(t) is an arc
of a circle of radius 1/κ.

Proof
Reparametrize the curve so that the curve is unit speed.
1. Since t = κn, the assumption κ = 0 implies that t = 0. Thus t is a
constant vector and
(C × t) = (C × t) + (C × t ) = (t × t) + (C × 0) = 0 .
Hence C × t = v for some constant vector v. The identity imposes two
independent linear constraints on the points of C, and hence the curve is
a line.
2. Since b = τ n, the assumption τ = 0 implies that b = 0. Thus b is a
constant vector (non-zero since κ = 0). Then
(C · b) = (C · b) + (C · b ) = (t · b) + (C · 0) = 0 .
Hence C · b = α for some constant α, and therefore C is planar.
3. Since τ = 0, the curve is planar and it is suﬃcient to show that every point
of C has a constant distance from a ﬁxed point. Since n = −κt+τ b = −κt
and 1/κ is constant,
1
C+ n
κ

1
1
= C + n = t+ (−κt) = 0 .
κ
κ

Hence C+1/κn = v for some constant vector v. Then |C − v| = 1/ |κ|
implying every point of the curve has a constant distance 1/ |κ| from v.

The discussion on curvature of space curves is concluded with two theorems
(without proofs) which are generalizations of Theorem 10.3 to space curves.

282

Applied Geometry for Computer Graphics and CAD

Theorem 10.14
Let κ(s) > 0 and τ (s) be continuous functions. Then there exists a curve for
which s is the arclength parameter, and κ and τ are the curvature and torsion
functions.

Theorem 10.15
Any two space curves, parametrized with respect to arclength, with identical
curvature κ(s) and torsion τ (s) functions, diﬀer only by a translation and
rotation. If two space curves have the same curvature function κ(s), but have
torsion functions of opposite sign, they diﬀer only by a translation, a rotation,
and a reﬂection.

EXERCISES
10.12. Determine the curvature and torsion of the curve
C(t) = (5 cos t, 3 cos t − 4 sin t, 4 cos t + 3 sin t). Deduce that the curve
is planar, and identify the type of curve.
10.13. Determine the curvature and torsion of the following curves:
(a) C(t) = 3t − t3 , 3t2 , 3t + t3 ;
(b) C(t) = ((t + sin t) , (1 − cos t) , t);
(c) C(t) = t, 1 + 1, 1 − t ;
t
t
(d) C(t) = (1 − cos(t), t − sin(t), 4 sin(t/2)).
10.14. Determine the Frenet frame, curvature, and torsion of the curve
3/2
3/2
1
C(t) = √2 t, 1 (1 + t) , 1 (1 − t)
, t ∈ (−1, 1).
3
3
10.15. Show that the Darboux vector satisﬁes t × t = κ2 ω.
10.16. Let C : R → Rn be a smooth function at t = t0 . Then Taylor’s
theorem gives
...
˙
¨
C(t) = C(t0 )+(t−t0 )C(t0 )+ 1 (t−t0 )2 C(t0 )+ 1 (t−t0 )3 C(t0 )+· · · .
2
6
...
˙ ¨
(a) Apply the formulae which express the derivatives C, C,C in
terms of the Frenet frame to give the Frenet approximation of

10. Curve and Surface Curvatures

283

C(t) of the form
3
C(t0 ) + t0 (t − t0 )ν0 + 1 (t − t0 )2 ν0 + 1 (t − t0 )3 ν0 − κ2 ν0 + · · ·
¨
˙
0
2
6

+ n0
+ b0

1
2 (t
1
6 (t

2
− t0 )2 κ0 ν0 + 1 (t − t0 )3 3κ0 ν0 ν0 + κ0 ν0 + · · ·
˙
˙ 2
6
3
− t0 )3 κτ0 ν0 + · · ·

(10.21)
where ν0 , ν0 , ν0 , κ0 , τ0 denote the speed, the derivatives of speed,
˙ ¨
the curvature, and the torsion at the point C(t0 ).
(b) Suppose C(t0 ) is the origin. Show that the orthographic projections of the curve onto the osculating, rectifying and normal
planes are approximated by the following curves:
2
(i) (t − t0 )ν0 , 1 (t − t0 )2 κ0 ν0 , i.e. y = 1 κ0 x2 ,
2
2
3
(ii) (t − t0 )ν0 , 1 (t − t0 )3 κ0 τ0 ν0 , i.e. z = 1 κ0 τ0 x3 , and
6
6

(iii)

2
3
− t0 )2 κ0 ν0 , 1 (t − t0 )3 κ0 τ0 ν0 , i.e. z 2 =
6
tively.
1
2 (t

2
2τ0 3
9κ0 x ,

respec-

10.3 Curvature of B´zier Curves
e
Theorem 10.16
The curvature and torsion of a B´zier curve B(t) at t = 0 are
e
κ=

n−1 b
,
n a3

τ=

n−2 c
n b2

where a = |b1 − b0 |, b = |(b1 − b0 ) × (b2 − b1 )|, and
c = ((b1 − b0 ) × (b2 − b1 )) · (b3 − b2 ) .

Proof
The derivatives of B(t) are obtained using Theorem 7.3 and its corollaries,
˙
B(0)
¨
B(0)
...
B(0)

= n (b1 − b0 ) ,
= n (n − 1) (b2 − 2b1 + b0 ) = n (n − 1) ((b2 − b1 ) − (b1 − b0 )) ,
= n (n − 1) (n − 2) (b3 − 3b2 + 3b1 − b0 ) .

284

Applied Geometry for Computer Graphics and CAD

Then,
= n |b1 − b0 | ,

˙
B
˙
¨
B×B

= n2 (n − 1) |(b1 − b0 ) × ((b2 − b1 ) − (b1 − b0 ))|
= n2 (n − 1) |(b1 − b0 ) × (b2 − b1 )| ,

and
κ=

˙ ¨
(n − 1) |(b1 − b0 ) × (b2 − b1 )|
|B×B|
=
.
3
˙ 3
|B|
n |b1 − b0 |

Further,
...
˙
¨
B×B ·B
2

= n3 (n − 1) (n − 2) ((b1 − b0 ) × (b2 − b1 )) · (b3 − 3b2 + 3b1 − b0 ) .
Expressing b3 −3b2 +3b1 −b0 = (b3 − b2 )−(b2 − b1 )−(b2 − b1 )+(b1 − b0 )
in the previous equation, expanding the cross product, and simplifying gives
...
2
˙
¨
B × B · B = n3 (n − 1) (n − 2) ((b1 − b0 ) × (b2 − b1 )) · (b3 − b2 ) .
Hence
τ=

˙ ¨ ...
(n − 2) (((b1 − b0 ) × (b2 − b1 )) · (b3 − b2 ))
(B×B)· B
=
.
2
˙ ¨ 2
|B×B|
n |(b1 − b0 ) × (b2 − b1 )|

The reader is left the exercise of proving the next theorem.

Theorem 10.17
The curvature and torsion of a rational B´zier curve B(t) at t = 0 are
e
κ=

n − 1 w0 w2 b
,
2
n
w1 a2

τ=

n − 2 w0 w3 c
n w1 w2 b2

where a, b, and c are as above.
The curvature and torsion of an integral or rational B´zier curve B(t) at
e
the point B(t0 ), t0 ∈ [0, 1] can be computed by applying the integral or rational
de Casteljau algorithm to subdivide the curve at t = t0 into the two segments
Bleft (t) and Bright (t). Applying Theorem 10.16 or 10.17 to Bright (t) at t = 0
gives the curvature and torsion at B(t0 ).

10. Curve and Surface Curvatures

285

Example 10.18
Consider the cubic B´zier curve B(t) with control points b0 (0, 1, 4), b1 (2, −1, 3),
e
b2 (3, 2, 7), b3 (5, 2, 2). Then
a = |(2, −1, 3) − (0, 1, 4)| = 3 ,
b

= |((2, −1, 3) − (0, 1, 4)) × ((3, 2, 7) − (2, −1, 3))| = |(−5, −9, 8)| =

c =

√
170 ,

(−5, −9, 8) · ((5, 2, 2) − (3, 2, 7)) = −50 .

Hence the curvature and torsion of B(t) at B(0) are κ(0) =
and τ (0) =

3−2 −50
3 170

=

√
3−1 170
3 (3)3

=

2
81

√

170,

5
− 51 .

EXERCISES
10.17. Determine the curvature and torsion of the cubic B´zier curve with
e
control points b0 (1, 2, 1), b1 (3, 0, 4), b2 (6, −3, 2), and b3 (4, 2, 3)
(a) at the point B(0), and
(b) at the point B(0.3). (Hint: Example 7.1 may help!)
10.18. Determine the curvature of the cubic rational B´zier curve with cone
trol points b0 (3, 2, 7), b1 (5, 4, 3), b2 (8, 3, 3), b3 (5, 2, 4), and weights
1, 2, 2, 1 at the points B(0) and B(0.6).
10.19. Determine the control points of the planar B´zier curve B(t) of
e
degree 5 satisfying B(0) = (0, 0), B(1) = (5, 0), B (0) = (1, 4),
B (1) = (−1, 2), κ(0) = 1, and κ(1) = 2.
10.20. Determine expressions for the Frenet frame t, n, b of a B´zier curve
e
B(t) at t = 0.
10.21. Prove Theorem 10.17.

10.4 Surface Curvatures
In this section surfaces are parametrized using the variables u and v (s and t
were used in the chapter on surfaces). Let U be an open or closed subset of
R2 and let S : U → R3 , be a parametrized surface with unit normal N(u, v).
If (u(t), v(t)) is a regular curve in U , then it is mapped by S to the curve
˙
˙
C(t) = S(u(t), v(t)) on the surface. The chain rule gives C = uSu + vSv and
˙
˙ · N = (uSu + vSv ) · N = u (Su · N) + v (Sv · N) = 0. So every tangent vector
˙
˙
˙
C
˙

286

Applied Geometry for Computer Graphics and CAD

to the curve C is a tangent vector to the surface. The converse, that every
tangent vector of the surface is a tangent vector to some curve on the surface,
is proved in the following lemma.

Lemma 10.19
Let S : U → R3 be a regular surface. If v is a tangent vector to the surface at
a point p then there exists a curve C(t), t ∈ (−a, a) (some a > 0), such that
˙
C(0) = p and C(0) = v.

Proof
Since S is regular, Su and Sv are linearly independent vectors, and therefore v =
αSu (u, v)+βSv (u, v) for some α and β. Let C(t) = S(u+αt, v+βt) be deﬁned on
(−a, a) where a > 0 is chosen so that (−a, a) is contained in U . Then C(0) = p,
˙
and the chain rule yields C(t) = αSu (u + αt, v + βt) + βSv (u + αt, v + βt) and
˙
C(0) = αSu (u, v) + βSv (u, v) = v.

In view of the lemma, the tangent vectors at a point p will often be expressed
˙
in the form uSu + vSv .
˙
Suppose p = S(u, v) is a regular point, and let v be a tangent vector to the
surface at p. The plane through p containing the directions v and N intersects
S in a curve C(t) as shown in Figure 10.5. The curve can be parametrized so
˙
that C(0) = p and C(0) = v. The curvature κ(t) of C(t) at t = 0 is called the
normal curvature of S in the direction v at p, and denoted κp (v). Theorem
10.21 will prove that κp (v) has a maximum and a minimum value, denoted
κmax and κmin respectively, called the principal curvatures. The tangent vectors
which give rise to the principal curvatures are called the principal directions.
˙
A curve C(t) on S for which every tangent vector C(t) is a principal direction
of the surface is called a line of principal curvature.
Let C(t) = S(u(t), v(t)) be a curve on S with unit tangent t and unit normal
˙
¨
n. Then C = νt, C = νt+ν 2 κn and
˙
¨
C · N = νt+ν 2 κn ·N =ν 2 κn · N .
˙
The chain rule applied to C(t) = S(u(t), v(t)) gives
˙
C = uSu + vSv ,
˙
˙
¨ = u (uSuu + vSvu ) + uSu + v (uSuv + vSvv ) + v Sv
˙
¨
˙ ˙
˙
¨
C
˙ ˙
= u2 Suu + 2uvSuv + v 2 Svv + uSu + v Sv .
˙
˙˙
˙
¨
¨

(10.22)

10. Curve and Surface Curvatures

287

N
v
p

S

C(t)

Figure 10.5
Let E = Su · Su , F = Su · Sv , and G = Sv · Sv , then
ν2

˙ ˙
= C · C = (uSu + vSv ) · (uSu + vSv )
˙
˙
˙
˙
˙˙
˙
= u2 Su · Su + 2uvSu · Sv + v 2 Sv · Sv
˙
= E u2 + 2F uv + Gv 2 .
˙
˙˙
˙

Further, let L = Suu ·N, M = Suv ·N, and N = Svv ·N, then
¨
C·N

=

u2 Suu + 2uvSuv + v 2 Svv + uSu + v Sv · N
˙
˙˙
˙
¨
¨

= u2 Suu · N + 2uvSuv · N + v 2 Svv · N
˙
˙˙
˙
˙˙
˙
= Lu2 + 2M uv + N v 2 .
˙

(10.23)

The expressions E u2 + 2F uv + Gv 2 and Lu2 + 2M uv + N v 2 are called the ﬁrst
˙
˙˙
˙
˙
˙˙
˙
and second fundamental forms of the surface. Equations (10.22) and (10.23)
give the curvature κ of C at p
˙˙
˙
Lu2 + 2M uv + N v 2
˙
.
ν2n · N
Suppose C is a curve, through the point p, in the plane containing the unit
normal N to the surface at p. Then n · N = 1 and the formula yields the normal
˙
curvature of the surface in the direction v = C
κ=

˙˙
˙
˙˙
˙
Lu2 + 2M uv + N v 2
˙
Lu2 + 2M uv + N v 2
˙
˙
κp (C) =
=
.
2
2 + 2F uv + Gv 2
ν
Eu
˙
˙˙
˙

(10.24)

The sign of κp indicates whether, near p, the curve (and the surface in the
direction v) is bending towards or away from the normal, as illustrated in
Figure 10.6.

Example 10.20
Consider the surface S(u, v) = (u, v, u2 − v 2 ). Then Su = (1, 0, 2u), Sv =
(0, 1, −2v), Suu = (0, 0, 2), Suv = (0, 0, 0), Svv = (0, 0, −2), Su × Sv =

288

Applied Geometry for Computer Graphics and CAD

N

N
C(t)
S

p
kp > 0

Figure 10.6

v

v
p

S
C(t)

kp < 0

Geometric interpretation of the sign of the normal curvature

(−2u, 2v, 1),
N = (−2u, 2v, 1) / |(−2u, 2v, 1)| = 1 + 4u2 + 4v 2

−1/2

(−2u, 2v, 1) ,

E = Su · Su = 1 + 4u2 , F = Su · Sv = −4uv, G = Sv · Sv = 1 + 4v 2 ,
1/2
L = Suu · N = 2/ 1 + 4u2 + 4v 2
, M = Suv · N = 0, N = Svv · N =
1/2

−2/ 1 + 4u2 + 4v 2
. The curve (u(t), v(t)) = (t, t2 ) is mapped by S to the
˙
˙
surface curve C(t) = S(t, t2 ) = (t, t2 , t2 − t4 ). Then u(t) = 1 and v(t) = 2t.
˙
At t = 0 the curve passes through the origin and has tangent vector C(0) =
(1, 0, 0), u = v = 0, u = 1, v = 0, E = 1, F = 0, G = 1, L = 2, M = 0, and
˙
˙
N = −2. Hence, the normal curvature at the origin in the direction (1, 0, 0) is
κp (1, 0, 0) = 2.
The curve (u(t), v(t)) = (cos t, sin t) is mapped to the surface curve C(t) =
˙
˙
(cos t, sin t, cos2 t−sin2 t). Then u(t) = − sin t, v(t) = cos t. At t = π/2 the curve
˙
passes through the point (0, 1, −1) and has tangent vector C(π/2)√ (−1, 0, 0),
=
u = 0, v = 1, √ = −1, v = 0, E = 1, F = 0, G = 5, L = 2/ 5, M = 0,
u
˙
˙
normal curvature at (0, 1, −1) in the direction
and N = −2/ 5. Hence the√
(−1, 0, 0) is κp (−1, 0, 0) = 2/ 5.

Theorem 10.21 (Euler)
Let p be a regular point of a surface S(u, v). Suppose the normal curvature
κp (v) is a non-constant function of v. Then there are unique unit tangent
vectors vmax and vmin such that the normal curvature κp (vmax ) = κmax is
maximal, and κp (vmin ) = κmin is minimal. Further, vmax and vmin are perpendicular.

Proof
˙
˙
The surface curve C(t) = S(u(t), v(t)) has tangent vector C = uSu + vSv , and
˙
˙

10. Curve and Surface Curvatures

289

by (10.24) the normal curvature in this direction is
κp (uSu + vSv ) =
˙
˙

˙˙
˙
Lu2 + 2M uv + N v 2
˙
.
2 + 2F uv + Gv 2
Eu
˙
˙˙
˙

(10.25)

The maximum and minimum normal curvatures are the extrema of (10.25)
˙
for all tangent vectors uSu + vSv . By reparametrizing (u(t), v(t)), the tangent
˙
˙
˙
˙˙
vectors uSu + vSv can be assumed to have unit length. Then E u2 + 2F uv +
˙
˙
˙
˙
˙
Gv 2 = (uSu + vSv ) · (uSu + vSv ) = 1. Therefore the problem is to ﬁnd the
˙
˙
˙
˙
˙˙
˙
extrema of κp (uSu + vSv ) = Lu2 + 2M uv + N v 2 subject to the constraint
˙˙
˙
E u2 + 2F uv + Gv 2 = 1. The solution can be found by applying the method of
˙
Lagrange multipliers (treating u and v as variables). Let
˙
˙
˙˙
˙
˙
˙˙
˙
L(u,v) = Lu2 + 2M uv + N v 2 − λ E u2 + 2F uv + Gv 2 − 1 .
˙ ˙
˙
The conditions for the extrema are
∂L
∂u
˙
∂L
∂v
˙

=

2Lu + 2M v − 2λ (2E u + 2F v) = 0 ,
˙
˙
˙
˙

=

2M u + 2N v − 2λ (2Gv + 2F u) = 0 ,
˙
˙
˙
˙

giving
(L − λE)u + (M − λF )v
˙
˙

=

0,

(10.26)

(M − λF )u + (N − λG)v
˙
˙

=

0,

(10.27)

which can be expressed in the matrix form
u
˙
v
˙

(S − λF)

=0,

(10.28)

where
F=

E
F

F
G

L
M

and S =

M
N

.

F and S are called the ﬁrst and second fundamental matrices, respectively. Since
EG − F 2 = 0 at a regular point (Exercise 10.22), F is non-singular and (10.28)
gives
u
˙
F−1 S − λI
=0.
v
˙
Solving (10.28) for λ is equivalent to solving for the eigenvalues of F−1 S. The
eigenvalues λ satisfy
0

=

u
˙

v
˙

(S − λF)

u
˙
v
˙

=

u
˙

v
˙

S

u
˙
v
˙

−λ

˙˙
˙
˙
˙˙
˙
= Lu2 + 2M uv + N v 2 − λ E u2 + 2F uv + Gv 2 .
˙

u
˙

v
˙

F

u
˙
v
˙

290

Applied Geometry for Computer Graphics and CAD

Hence

Lu2 + 2M uv + N v 2
˙
˙˙
˙
.
2 + 2F uv + Gv 2
Eu
˙
˙˙
˙
Thus the eigenvalues of F−1 S are the principal curvatures κmax and κmin , and
˙1
˙2
the corresponding principal directions w1 = u1 and w2 = u2 yield the principal
v
˙
v
˙
˙
˙
˙
˙
directions vmax = u1 Su + v1 Sv and vmin = u2 Su + v2 Sv .
Then (10.28) implies (S − Fκmax ) w1 = 0, and the fact that F and S are
symmetric gives
λ=

T

T
T
T
w1 (S − Fκmax ) = w1 ST − FT κmax = w1 (S − Fκmax ) = 0 .
T
T
So w1 S = w1 Fκmax and multiplying on the right by w2 gives
T
T
w1 Sw2 = κmax w1 Fw2 .

(10.29)

Further, (10.28) implies (F − Sκmin ) w2 = 0, so
T
T
w1 Sw2 = κmin w1 Fw2 .

(10.30)

T
Then subtracting Equation (10.30) from (10.29) gives (κmax − κmin ) w1 Fw2 =
T
0, and since κmax = κmin it follows that w1 Fw2 = 0. Further, since
T
w1 Fw2

=

(u1 Su + v1 Sv ) · (u2 Su + v2 Sv )
˙
˙
˙
˙

= vmax · vmin
=

0

it follows that vmax and vmin are perpendicular.

Eliminating λ from Equations (10.26) and (10.27) gives
(EM − F L)u2 + (EN − GL) uv + (F N − GM )v 2 = 0 .
˙
˙˙
˙

(10.31)

Equation (10.31) is a necessary and suﬃcient condition for a curve S(u(t), v(t))
to be a line of curvature. In particular, the u-parameter curve (u(t), v(t)) =
˙
˙
(t, v0 ), for which (u(t), v(t)) = (1, 0), is a line of curvature if and only if EM −
F L = 0. Likewise, the v-parameter curve is a line of curvature if and only if
F N − GM = 0. Since EG − F 2 = 0, the conditions EM − F L = F N − GM = 0
can be satisﬁed if and only F = M = 0. Therefore the parameter curves are
the lines of curvature if and only if F = M = 0.
˙
˙
Let v = uSu + vSv and w = u . The formula for normal curvature (10.25)
˙
v
˙
can be expressed in terms of the fundamental matrices
wT Sw
.
wT Fw
A second theorem due to Euler states that the normal curvature κp (v) in an
arbitrary direction v can be obtained from the principal curvatures [8].
κp (v) =

10. Curve and Surface Curvatures

291

Theorem 10.22 (Euler)
If θ is the angle between a tangent vector v and vmax , then
κp (v) = κmax cos2 θ + κmin sin2 θ .

The curvatures of a surface most commonly used are not the principal
curvatures but the Gaussian curvature K = κmax κmin and the mean curvature
H = 1 (κmax + κmin ). The Gaussian and mean curvatures can be computed
2
without computing the principal curvatures. The principal curvatures are the
roots of the quadratic
det(S − λF) = (EG − F 2 )λ2 − (EN + GL − 2F M )λ + (LN − M 2 ) = 0 ,
and the fact that the sum and product of the roots of a quadratic ax2 + bx + c
(with a = 0) are −b/a and c/a, yields
K=

LN − M 2
,
EG − F 2

H=

1
2

EN + GL − 2F M
EG − F 2

.

The principal, mean, and Gaussian curvatures distinguish the local geometry of a surface at a point p as follows.
Elliptic Point: H = 0, K > 0. At an elliptic point κmin and κmax have the
same sign. Therefore the normal sections have the same proﬁle, implying
the surface near p has the shape of an ellipsoid.
Hyperbolic Point: H = 0, K < 0. At a hyperbolic point κmin and κmax have
opposite signs. So the surface near p has the shape of a saddle.
Parabolic Point: H = 0, K = 0. So either κmin = 0 or κmax = 0. Therefore
the surface is linear in one principal direction, and near p the surface has the
shape of a parabolic cylinder. In computer vision applications the surface
is said to be a ridge or a trough.
Umbilic Point: κmin = κmax = 0 (H = 0, K > 0). An umbilic point is a
special case of an elliptic point. The normal curvature is constant (nonzero) and near p the surface has the shape of a sphere.
Flat or Planar Point: κmin = κmax = 0 (H = K = 0). The normal curvature is identically zero and the surface near p is ﬂat.

292

Applied Geometry for Computer Graphics and CAD

(a) Elliptic point K > 0, H = 0

(b) Hyperbolic point K < 0, H = 0

(c) Parabolic point K = 0, H = 0

(e) Planar point κmax = κmin = 0

(d) Umbilic point κmax = κmin = 0

(f) Elliptic, hyperbolic, and parabolic
points on a torus

Figure 10.7

Example 10.23
Let S(u, v) = (u cos v, u sin v, v), 0 < v < 2π, u > 0. Then Su = (cos v, sin v, 0),
Sv = (−u sin v, u cos v, 1), and hence E = 1, F = 0 and G = 1 + u2 . Further Suu = (0, 0, 0), Suv = (− sin v, cos v, 0), Svv = (−u cos v, −u sin v, 0) and
−1/2
−1/2
N = 1 + u2
(sin v, − cos v, u), and hence L = 0, M = − 1 + u2
and
N = 0. Then
det(S − λF)
= det

= det

0
− 1+u
−λ
− 1 + u2

2 −1/2

−1/2

− 1 + u2

−1/2

0
− 1 + u2

−1/2

−λ 1 + u2

−λ

1
0

0
1 + u2
2

λ2 1 + u2 − 1
.
=
1 + u2

10. Curve and Surface Curvatures

293

Solving det(S − λF) = 0 gives λ = 1 + u2
2 −2

−1

and λ = − 1 + u2

−1

. The

Gaussian curvature is K = − 1 + u
, and the mean curvature is H = 0.
Since K < 0, every point of the surface is hyperbolic.

Example 10.24
Consider the torus S(u, v) = ((r cos u + R) cos v, (r cos u + R) sin v, r sin u), for
R > r > 0. Then
Su (u, v)

=

(−r sin u cos v, −r sin u sin v, r cos u),

Sv (u, v)

=

(− (r cos u + R) sin v, (r cos u + R) cos v, 0) ,

Suu (u, v)

=

(−r cos u cos v, −r cos u sin v, −r sin u),

Suv (u, v)

=

(r sin u sin v, −r sin u cos v, 0),

Svv (u, v)

=

(− (r cos u + R) cos v, − (r cos u + R) sin v, 0) .
2

Thus E = Su · Su = r2 , F = Su · Sv = 0, G = Sv · Sv = (r cos u + R) . The surface normal is n = (Su × Sv )/ |Su × Sv | = (− cos u cos v, − cos u sin v, − sin u).
Hence L = n · Suu = r, M = n · Suv = 0, N = n · Svv = cos u (r cos u + R).
2
Therefore, LN − M 2 = r cos u (r cos u + R), EG − F 2 = r2 (r cos u + R) ,
K=

H=

r cos u (r cos u + R)
r2

2

(r cos u + R)

=

cos u
, and
r (r cos u + R)

2
r cos u + 1 R
1 r2 cos u (r cos u + R) + r (r cos u + R)
2
.
=
2
2
r (r cos u + R)
r2 (r cos u + R)

Since R > r, the denominator of K is positive. Thus, when 0 ≤ u < π/2
or 3π/2 ≤ u < 2π, then cos u > 0 and K > 0. When π/2 < u ≤ π or
π/2 ≤ u < 3π/2, then cos u < 0 and K < 0. When u = π/2 or 3π/2, then
K = 0. Thus the torus has regions of elliptic and hyperbolic points separated by
two circles of parabolic points parametrized by S(π/2, v) = (R cos v, R sin v, r),
S(3π/2, v) = (R cos v, R sin v, −r). The partition of the torus according to the
type of point is illustrated in Figure 10.7.

Example 10.25 (Developable Surfaces)
Aircraft wings are constructed from a special honeycomb material which cannot
be shaped by the methods used for plate metal. The wing shape is obtained
by rolling the material. The resulting surface shapes are a special type of ruled
surface known as developable surfaces for which the Gaussian curvature is zero
at every point of the surface. See Exercise 10.31.

294

Applied Geometry for Computer Graphics and CAD

Example 10.26 (Minimal Surfaces)
A surface for which the mean curvature is zero at every point is called a minimal
surface. Minimal surfaces arise in the study of soap ﬁlms which form on a closed
curve. The surface of a soap ﬁlm is such that the surface tension is minimized.
The resulting surface is a minimal surface.

Figure 10.8

Gaussian and mean curvatures for B´zier surfaces
e

Example 10.27 (Curvatures of Bezier and B-spline Surfaces)
Curvatures are used to assess the quality of manufactured surfaces. Applications to the car and ship building industries can be found in [9], [17], [18],
[7]. Surfaces can be coloured to indicate the value of a particular curvature
at a point on the surface. For a B´zier surface B(s, t), the ﬁrst and second
e
order partial derivatives at (s, t) = (0, 0) are easily determined in terms of
the control points using the formulae derived in Section 9.3.2, and the surface curvatures are easily determined from the derivatives. Curvatures at other
parameter values can be obtained by subdivision in a manner similar to computing the curvature of a B´zier curve. A similar method applies to B-spline
e

10. Curve and Surface Curvatures

295

surfaces.
To illustrate how curvatures can be used, the plots of two similarly shaped
B´zier surfaces are shown in Figure 10.8. The darker shades indicate high values
e
of Gaussian curvature and the lighter shades indicate low values. Note that
although the surfaces look very similar the curvatures show areas of diﬀerence.
Such shading techniques (which work better in colour) can be used to highlight
imperfections or potentially troublesome areas such as ﬂat spots (when K =
H = 0).

EXERCISES
10.22. Using the notation of Section 10.4, show that a surface S(u, v) is
regular if and only if EG − F 2 = 0.
10.23. Consider a curve C(t) on a regular parametric surface S(u, v), and
suppose p = C(t) = S(u, v) is a point on the curve. Let Np be the
principal normal of C at p, np be the surface normal at p, κp be the
˙
normal curvature of S in the direction C, and κ be the curvature
of C at p. Show that if θ is the angle between Np and np , then
κp = κ cos θ.
10.24. Determine the principal curvatures of the following surfaces:
(a) S(u, v) = u, v, u2 + v 2 ,
(b) S(u, v) = (u, sin v, u + cos v),
(c) Torus: S(u, v) = ((R + r cos u) cos v, (R + r cos u) sin v, r sin u).
10.25. Determine the Gaussian and mean curvatures of the following surfaces:
(a) Saddle surface: S(u, v) = (u, v, uv),
(b) S(u, v) = u, v, u2 − v 2 ,
(c) S(u, v) = u, v, u3 + v 3 .
10.26. Determine the umbilics of the following surfaces:
(a) Ellipsoid : S(u, v) = (4 cos u cos v, 2 cos u sin v, sin u), 0 ≤ u ≤ 2π,
0 ≤ v ≤ 2π,
(b) S(u, v) = u, v, u2 + v 2 .

296

Applied Geometry for Computer Graphics and CAD

10.27. Show that the following surfaces are minimal (that is, H = 0):
(a) Bugle surface: S(u, v) = (a cosh(u/a) cos v, a cosh(u/a) sin v, u),
(b) Scherk’s surface: S(u, v) = (u, v, ln(cos(u)) − ln(cos(v))),
(c) Enneper’s surface:
S(u, v) = u − u3 /3 + uv 2 , v − v 3 /3 + u2 v, u2 − v 2 ,
(d) Catalan’s surface:
S(u, v) = (u − sin u cosh v, 1 − cos u cosh v, 4 sin(u/2) sinh(v/2)) .
10.28. Show that the parameter curves of Enneper’s surface are lines of
curvature.
10.29. Show that S(u, v) = (u cos v, u sin v, u) is developable (K = 0).
10.30. The oﬀset at a distance d of a regular surface S(u, v) with unit
normal N(u, v) is O(u, v) = S(u, v) + d N(u, v) (see Section 9.2.1).
Show that if K and H are the Gaussian and mean curvatures of
S then the oﬀset has Gaussian curvature K/ Kd2 − 2Hd + 1 and
mean curvature (H − Kd)/ Kd2 − 2Hd + 1 .
10.31. Let A(u) and B(u) be unit speed curves. Show that the ruled surface
S(u, v) = A(u)+vB(u) is developable if and only if (A(u) × A (u))·
B(u) = 0. It can be shown that any developable surface is one of
the following: (i) a cone, i.e A(u) is constant, (ii) a cylinder, i.e.
B(u) is constant, or (iii) a tangential developable, that is, the surface
consisting of all the tangents of a space curve, i.e. B(u) = A (u).
10.32. The mean value of a function f (t) deﬁned on an interval [a, b] is
b
2
1
2
b−a a f (t) dt. By integrating κp (θ) = κmax cos θ + κmin sin θ over
the interval [0, π], show that the mean value of the normal curvature
κp at a point p is the mean curvature H.
10.33. Write a program or use a package to determine the curvatures of a
B´zier surface B(s, t) (or B-spline) at a mesh of parameter values
e
(si , tj ).

11

Rendering

11.1 Introduction
This chapter introduces techniques for object rendering. The two areas of CAD
and computer graphics have diﬀering opinions of what constitutes a good rendering. In the ﬁeld of CAD the user needs a highly accurate and well deﬁned
line drawing that conforms to international drawing standards. Further, the
objects must be drawn to scale so that they can be annotated with dimensions.
In contrast, the computer graphics user desires a photographic realism of objects in a scene showing qualities such as colour, surface texture, and shadow.
The position, shape, direction, and intensity of each light source play an important role. The following sections consider various elements that contribute
to both accurate CAD drawings and realistic object rendering. Colour is introduced in Section 11.2, and a model for reﬂected light is developed in Section
11.3. Shading algorithms, which apply the light intensities obtained from the
reﬂected light model, are discussed in Section 11.4. Section 11.5 introduces a
new geometric feature of a surface, namely, the silhouette. Silhouettes are an
essential feature in CAD drawings, and they are used in Section 11.6 to create
shadow eﬀects.

297

298

Applied Geometry for Computer Graphics and CAD

11.2 Colour
Colours are described in terms of hues that represent distinct colours such as
red, blue or yellow. Artists commonly refer to tints, shades and tones. A tint
is obtained from a hue by adding white. The amount of added white reﬂects
the level of saturation. For instance a “dark blue” is highly saturated (less
washed-out) while a “light blue” is unsaturated (more washed-out). Similarly,
a shade is obtained by adding black to decrease the intensity or lightness of
the hue. Addition of both white and black to a hue results in a tone. There are
several models that are used to specify colour. These include the red, green,
blue (RGB) and the hue, saturation, value (HSV) models used for monitors,
and the cyan, magenta, yellow (CMY) model for printing devices.
The RGB model speciﬁes the amounts of the three primary colours red
r, green g, and blue b, as a coordinate (r, g, b) in a unit cube as shown in
Figure 11.1(a). The primaries are additive meaning that the colours are mixed
to the give the desired colour. Equal amounts of red, green and blue give a
shade of grey ranging from white to black. Greys correspond to points on the
diagonal of the RGB cube with white at (0, 0, 0) and black at (1, 1, 1).

v

cyan (0,1,1)
blue (0,0,1) magenta (1,0,1)
white (1,1,1)

b
black (0,0,0)

r

des
sha
ey
gr
green (0,1,0)
g

red (1,0,0)

(a)
Figure 11.1

yellow (1,1,0)

green
cyan

yellow
white
red

blue

magenta

black

h

s

(b)
(a) RGB cube, and (b) HSV hexcone

In the RGB cube the “pure” hues are represented by a loop of vertices
(omitting black and white): red-yellow-green-cyan-blue-magenta-red. This leads
naturally to the HSV model for which colour is speciﬁed by a coordinate (h, s, v)
to indicate the values of hue h, saturation s, and shade value v. The vertices
are mapped to a plane to form a hexcone as shown in Figure 11.1(b). The
hexcone vertex at (0, 0, 0) represents black and the point (0, 0, 1) represents
white. The hue h speciﬁes the colour in the loop as an angle about the cone
axis with 0◦ representing red. The saturation s is the distance to the hexcone

11. Rendering

299

axis, and the value v denotes the darkness of the colour given by the distance
in the axis direction. The tints are represented by points in the plane of the
pure hues (shown shaded in Figure 11.1(b)). Points on the planar boundaries
of the hexcone represent shades, and points on the axis joining white and black
represent greys.
Printed colour performs diﬀerently to coloured light. For instance, when
white light shines on blue paper, green and red light is absorbed and only
blue light is reﬂected giving it a blue appearance. Therefore, printed colour is
subtractive, and behaves as a ﬁlter removing colour components from the light
that shines on it. The primary colours are cyan c, magenta m, and yellow y,
and speciﬁed by the coordinate (c, m, y) in the CMY cube. Cyan, magenta and
yellow absorb the complementary colours red, green and blue, respectively.
A variation of CMY is the CMYK model where the K stands for black. The
motivation for CMYK is that, in reality, cyan, magenta and yellow inks do not
mix to a true black but to a very dark brown. So many colour printers use an
amount of pure black ink k as well as the three primary colours. The CMYK
model represents each colour by a coordinate (c, m, y, k) which is obtained from
the colour’s (c, m, y) coordinate by taking k = min{c, m, y} and replacing c, m,
and y by c − k, m − k, and y − k respectively.

11.3 An Illumination Model for Reﬂected Light
The light in a scene can originate from either light-emitting sources such as
the sun, light bulbs or a television, or light-reﬂecting surfaces such as mirrors,
the walls of a room, and objects in a scene. In reality, light emanates from
an area such as the surface of a light bulb or a television screen. This kind of
light is referred to as distributed light. Distributed light is often simpliﬁed by
assuming that the light emanates from a point to give a point source. This is a
natural simpliﬁcation to make when the light source is far away or when it is
relatively small in comparison to the objects in the scene. A light source that
is located at inﬁnity produces rays of light that are parallel, and is referred to
as a directional light source. Sunlight is often treated as a directional source.
When light falls on the surface of an object it can be (i) reﬂected: light
bounces oﬀ the surface of the object, (ii) refracted: light passes through the
object, or (iii) absorbed: light does not pass through the object and it is not
reﬂected. The amalgamation of reﬂected light from several objects in a scene
is called the ambient or background light. When light is reﬂected oﬀ a surface, it scatters to give diﬀuse reﬂection. The light from point sources creates a
highlight or hotspot on a surface called specular reﬂection. The material prop-

300

Applied Geometry for Computer Graphics and CAD

erties of the object play an important role. Matte objects such as cardboard,
wood, copper and some textiles give little specular reﬂection. In contrast, shiny
surfaces such as polished metals and mirrors produce many highlights.
Let P be a point of a surface with unit normal N, and let L be the unit
vector pointing to the light source as shown in Figure 11.2(a). The incoming
incident ray is reﬂected along an outgoing reﬂected ray R, which is also assumed
to be a unit vector. The angles that the incident and reﬂected rays make with
the normal are called the angles of incidence and reﬂection respectively. The
Laws of Reﬂection state:
Law 1 : The angle of incidence is equal to the angle of reﬂection.
Law 2 : The surface normal, incident ray and reﬂected ray lie in the same plane.
Referring to Figure 11.2(b), the reﬂected ray R can be obtained as the vector
−→ −→
−
−
−→
−
sum R = PC + CD. Projection of the vector L onto N implies that PB has
−→
−
−→ −→
−
−
length N · L. By symmetry PC has length 2(N · L) and since CD = AP = −L
it follows that
R = 2(N · L)N − L .
(11.1)
The vector should be normalized to obtain a unit vector.

C

N
L q q

N

R
A

P

B
L

q q

D
R

P
(a)
Figure 11.2

(b)
Laws of reﬂection

11.3.1 Diﬀuse Reﬂection
The model for diﬀuse reﬂection assumes that the surface is perfectly diﬀusing,
that is, light is scattered equally in all directions. This is a reasonable assumption for matte surfaces, such as cardboard and chalk, which are microscopically

11. Rendering

301

rough so that light has an equal chance of being reﬂected in every direction.
Such surfaces are referred to as Lambertian surfaces as they satisfy Lambert’s
Law:
Lambert’s Law : Let φ be the angle between the surface normal and the view direction. Then the intensity of light reﬂected in the view direction is directly
proportional to cos φ.
Note that intensity is deﬁned to be the amount of light energy per unit of area.
ˆ
Consider a narrow beam of light, of intensity I, shining on an area of ∆A of
an objects’s surface. An application of elementary trigonometry, yields that the
light reﬂected from the area ∆A is directed towards the viewer (in the direction V) as a beam of area cos φ∆A as indicated in Figure 11.3(a). Therefore,
ˆ
the reﬂected beam has light energy I∆A acting on an area cos φ∆A. Then,
Lambert’s Law implies that the intensity of the reﬂected light is
I = cos φ

ˆ
I∆A
cos φ∆A

ˆ
=I.

It can be concluded that the intensity of the reﬂected light is independent of
the view direction.

N

N
cos f DA
f

DA
L

V

q
DA/cos q

DA
(a)

(b)
Figure 11.3

To compute the intensity I, consider a narrow beam of light with direction
L and area ∆A. Suppose that the angle of incidence is θ, and that the intensity
of the light source is Id . Then, by elementary trigonometry, the beam covers an
area ∆A/ cos θ as shown in Figure 11.3(b). Hence, the beam has energy Id ∆A
acting on an area ∆A/ cos θ, giving
I = Rd

Id ∆A
= Id Rd cos θ .
∆A/ cos θ

302

Applied Geometry for Computer Graphics and CAD

where 0 ≤ Rd ≤ 1 is the coeﬃcient of diﬀuse reﬂection that speciﬁes the
proportion of light reﬂected by the surface material of the object. If the ray of
light makes an angle of incidence that is greater than π/2, then the light is cast
from behind the surface. Therefore, the ray does not illuminate the surface,
and the surface is said to be self-occluding.
Finally, if N is the unit normal to the surface, and L is the unit vector
pointing to the light source, then cos θ = N · L. The reﬂected diﬀuse intensity
ID is given by
ID = Id Rd cos θ = Id Rd (N · L) ,
(11.2)
where 0 ≤ θ ≤ π/2, and 0 ≤ Rd ≤ 1. The colour of reﬂected diﬀuse light is the
colour of the object. Maximum reﬂected intensity is obtained when N · L = 1
which occurs when the light ray is perpendicular to the object’s surface, that
is, parallel to the surface normal.

11.3.2 Specular Reﬂection
Specular reﬂection is obtained when light from a point source is reﬂected at
a certain angle from a shiny surface. The colour of specular reﬂection is equal
to the colour of the light source. Unlike diﬀuse reﬂection, specular reﬂection is
dependent on the position of the viewer.

N
R

L

a

V

P

Figure 11.4
Referring to Figure 11.4, let V be the unit vector in the direction from a
surface point P to the viewpoint. (Note that, for a ﬁxed ﬁnite viewpoint, the
vector V is dependent on P.) Further, let α be the angle between V and the
(unit) reﬂected light ray R. Then, cos α = V · R. If the object is made from a
material that is perfectly reﬂecting, then the specular reﬂections have direction
R and are visible only when R = V and α = 0. In reality, however, there are
specular reﬂections in a range of angles about R. The intensity of reﬂected

11. Rendering

303

light that the eye receives depends on α, and is such that smaller angles yield
greater intensities. This results in a region of the surface with higher intensities
called a specular highlight or hotspot as illustrated in Figure 11.5.

Figure 11.5

Specular highlights

A model for specular reﬂection, based on empirical ﬁndings, has been introduced by Phong [19] and assumes that the intensity of specular reﬂection is
proportional to cosm α, for some positive number m. The graphs of cosm α for
various values of m can be seen in Figure 11.6. The cosine functions provide
reasonable proﬁles of intensity: values close to 1 for small angles, and rapidly
decreasing values as the angle increases. Let θ continue to denote the angle of
incidence. Then, using the fact that cos α = V · R, the specular intensity is
given by
(11.3)
IS = Is Rs (θ) cosm α = Is Rs (θ)(V · R)m ,
where 0 ≤ Rs (θ) ≤ 1 is the coeﬃcient of specular reﬂectance for the surface.
Note that Rs (θ) is dependent on the angle θ and is governed by the material
properties of the surface. The function Rs (θ) should be non-decreasing with increasing θ. One obvious simpliﬁcation of (11.3) is to assume that the coeﬃcient
of specular reﬂectance is constant: Rs (θ) = Rs .
1

m=1
m=2
m=5

0.5
m=20
m=50
m=100

0 0

0.5

Figure 11.6

a

1

1.5

cosm α for various m

304

Applied Geometry for Computer Graphics and CAD

When the light source is distant, it can be assumed that the light rays are
parallel, and that L is constant. A further simpliﬁcation is to assume that the
viewpoint is at inﬁnity so that V is constant. With both of these assumptions,
Equation (11.3) can be modiﬁed to give an alternative model for which the
computation of intensities is more eﬃcient. Let
B=

V+L
|V + L|

(11.4)

be the unit vector shown in Figure 11.7. Let β be the angle between N and
B so that cos β = N · B. (When V lies in the plane of N and L it is easily
shown that β = α/2.) The modiﬁed model for specular intensities is obtained
by replacing V · R by N · B in (11.3) to give
IS = Is Rs (θ)(N · B)m .

(11.5)

The computation of B requires fewer arithmetic operations than the computation of R using (11.1). Further, B is constant, and so ID and IS are functions
of N. It should be noted that the two models (11.3) and (11.5) do not give
identical results. The intensities of the second model are those of a surface
with normal vector B and R = V, and therefore the resulting intensities are
maximal in the view direction.

N

a

L

q

Figure 11.7

B
R

q

a

V

B is cheaper to compute than R

11.3.3 Ambient Reﬂection
Ambient (or background) reﬂection is diﬃcult to model due to the complexity
of multiple reﬂections from one object onto other. A simple model of ambient
lighting is obtained by assuming that every object receives the same amount
of light from all directions. The colour of reﬂected ambient light is the same as

11. Rendering

305

the colour of the object. If the uniform intensity of ambient light is Ia , then
the reﬂected ambient intensity of an object is given by
IA = Ia Ra ,

(11.6)

where 0 ≤ Ra ≤ 1 is the coeﬃcient of ambient reﬂection. The value of Ra
is dependent on the material characteristics of the object. When Ra = 0 the
object produces no reﬂected light, and when Ra = 1 the object reﬂects light at
full intensity.

11.3.4 Attenuation
When a light source is a ﬁnite distance from the objects in a scene, the distance
between the objects and the light source should be considered. The brightness
of reﬂected light is inversely proportional to the square of the distance d of the
object to the light source. This means that each reﬂected intensity should be
multiplied by an attenuation factor att(d) = 1/d2 giving
ID
IS

=

att(d)Id Rd cos θ = att(d)Id Rd (N · L) ,

=

att(d)Is Rs (θ)(N · B)

m

and

.

In practice the formulae give poor results for non-point light sources, and an
adapted multiplier
1
att(d) =
a2 d2 + a1 d + a0
is more commonly used (with a0 = 0 to prevent a divide by zero). The presence of the quadratic term can cause a wide range of intensity values so many
applications set a2 = 0 to give att(d) = 1/(a1 d + a0 ), or ignore attenuation
completely (att(d) = 1). An alternative is to cap the attenuation at a certain
value to remove the possibility of extreme values.

11.3.5 Total Intensity
The reﬂection model is completed by combining the ambient intensity, with the
diﬀuse and specular intensities for each light source, to give the total intensity
(Id Rd (N · Li ) + Is Rs (θ)(N · Bi )m ) ,

I = Ia Ra + att(d)

(11.7)

i

where i denotes summing over all light sources.
For a colour rendering device, the intensity formula (11.7) is applied to each
colour component and combined to give a colour intensity. For example, suppose

306

Applied Geometry for Computer Graphics and CAD

a device uses an RGB model. Then it is necessary to specify the coeﬃcients
of reﬂection and intensities for each colour component. For compactness, let
the red, green and blue coeﬃcients of ambient reﬂectance be represented by
the vector Ra = (Ra,r , Ra,g , Ra,b ). Similarly, let the coeﬃcients of diﬀuse and
specular reﬂectance be Rd = (Rd,r , Rd,g , Rd,b ) and Rs = (Rs,r , Rs,g , Rs,b ),
respectively. Further, let the ambient, diﬀuse, and specular intensities be Ia =
(Ia,r , Ia,g , Ia,b ), Id = (Id,r , Id,g , Id,b ), and Is = (Is,r , Is,g , Is,b ). Then the total
intensity for red is
(Id,r Rd,r (N · Li ) + Is,r Rs,r (θ)(N · Bi )m ) . (11.8)

Ired = Ia,r Ra,r + att(d)
i

There are similar equations for green and blue.

11.4 Shading Algorithms
The illumination model discussed in Section 11.3 determines the colour intensity of a point of an object surface. Shading algorithms determine how the
illumination model is applied across the entire surface. Ideally, intensities would
be calculated at every visible point of every surface in the scene (and computed
to the resolution of the display device). This is not feasible since each point
intensity calculation requires a surface unit normal to be computed, and this
entails expensive surface derivative evaluations and the application of a square
root (see Equation (9.1)). Therefore it is important to implement shading algorithms in a manner that minimises the number of intensity and surface normal
computations.
The shading algorithms described in the following sections require the object
surfaces to be faceted, that is, approximated by a mesh of planar polygonal faces
or facets. A simple way to facet a surface S(u, v) is to evaluate along the u and v
parameter lines to give a rectangular grid of points Pi,j = S(ui , vj ) for 0 ≤ i ≤
m and 0 ≤ j ≤ n. Triangular facets can be obtained by splitting the polygon
with vertices Pi,j , Pi+1,j , Pi,j+1 , Pi+1,j+1 into two triangles. More elaborate
faceting methods take the curvature of the surface into account in order to
obtain many facets in regions where the surface bends the most, and few facets
where the surface is ﬂat. B´zier and B-spline surfaces can be faceted using the
e
subdivision methods of Section 9.5. If the surface is subdivided suﬃciently, then
the control polygon can be used to obtain facets.

11. Rendering

307

11.4.1 Flat Shading
The ﬂat shading algorithm assigns one colour intensity value uniformly across
each facet. This gives a very cheap shading method as the intensity is computed
at just one point of each facet. However, since adjacent facets have diﬀerent
intensities the facets are clearly distinguishable, and the lack of variation in the
shading makes the facets look ﬂat. The facets of the sphere in Figure 11.8(a)
are fairly pronounced. Better shading can be obtained by taking very small
facets as shown in Figure 11.8(b).

(a)

(b)

(c)

(d)

Renderings of a sphere

Figure 11.8

11.4.2 Gouraud Shading
Gouraud shading tries to overcome the unnatural uniform intensity of the ﬂat
shading method. The illumination model (11.7) is used to determine the colour
intensities of the vertices of each triangular facet of the surface. Then, the intensities of each vertex are interpolated to give approximate intensities for other
points of the facet. The variation in intensities provided by the interpolation
reduces the ﬂat appearance of the facet.

A
L

M

l

P
C
B
Figure 11.9

Intensity calculation using a scanline

308

Applied Geometry for Computer Graphics and CAD

Consider the triangular facet in Figure 11.9. Let the intensities of the vertices A, B and C, be IA , IB and IC , respectively. Consider a line (called the
scanline) that moves across the triangle. Suppose intersects the facet edge
AB in the point L, and the edge AC in the point M. Then, by linear interpolation, L = (1 − s)A + sB, for some 0 ≤ s ≤ 1, and an approximation for the
intensity at L is taken to be
IL = (1 − s)IA + sIB .
Similarly, M = (1 − t)A + tC, for some 0 ≤ t ≤ 1, and the intensity of M is
taken to be
IM = (1 − t)IA + tIC .
Finally, let P be a point on , then P = (1 − u)L + uM for some 0 ≤ u ≤ 1,
and an approximate intensity for P is
IP = (1 − u)IL + uIM .

(11.9)

Since the scanline passes over the whole triangle, an intensity for every point
can be computed using Equation (11.9).
The Gouraud shading method described above can be implemented using
the facet normals in the intensity computations as they are less expensive to
compute than true surface normals. However, this results in uneven shading
since pairs of adjacent facets have diﬀerent intensity values along the edge where
the facets meet. Smoother shading can be obtained by averaging the normals of
the facets that contain the vertex, as shown in Figure 11.10. Note that a vertex
may be contained in more than three facets. The average vector is normalized
to obtain a unit vector (so there is no need to divide through by the number of
facets when computing the the average). Since the intensities along an edge are
identical for the two facets containing the edge, the resulting shading is smooth
across the facets. The Gouraud method achieves smoother shading is obtained
at the additional computational cost of averaging and normalizing the facet
normals at each vertex. Figure 11.8(c) shows a rendering of a sphere using the
Gouraud method.
N3 N=N1+ N2+ N3
3

N1

Figure 11.10

N2

Average facet normal

11. Rendering

309

11.4.3 Phong Shading
In Phong shading true surface normals are computed at the facet vertices.
Approximate surface normals at points in the facet are obtained by linearly
interpolating the vertex normals. If the exact surface normals of two vertices
A and B are N0 (x0 , y0 , z0 ) and N1 (x1 , y1 , z1 ), then the interpolated normal of
a point L = (1 − s)A + sB, for 0 ≤ s ≤ 1, is taken to be the normalization
of N = (1 − s)N0 + sN1 . The approximate normal of any point in the facet
can be obtained using a scanline method similar to the one used in Gouraud
shading, but normals are interpolated in place of intensities. Since approximate normals avoid computing surface derivatives, they are more eﬃcient to
use than true surface normals. The Phong method then applies (11.7), using
the approximate normals, to compute the intensities at points in each facet.
The gradual variation of normals across each facet means that Phong shading produces a smoother and more natural looking shading than both the ﬂat
and Gouraud methods. Figure 11.8(d) shows a rendering of a sphere using the
Gouraud method.

EXERCISES
11.1. Write a computer program that converts a RGB coordinate (r, g, b)
to a HSV coordinate (h, s, v) and vice versa.
11.2. Consider a point light source positioned at (0, 10, 20) shining on
the surface x(s, t) = (s, t, −s2 − t2 ), 0 ≤ s, t ≤ 1. Determine the
reﬂected vector R of the incident ray that hits the surface at the
point x(0.5, 0.5) = (0.5, 0.5, −0.5). Determine the angle of incidence.
11.3. Write a computer program to perform Flat, Gouraud or Phong shading of an object with polygonal faces.

11.5 Silhouettes
In contrast to the photorealism of computer graphics rendering, CAD drawings
are predominately line drawings with little or no shading. For objects with faces
that are planar, a CAD style drawing can be obtained using projections together
with edge and vertex information. In Section 4.3 it was shown that a parallel
or perspective projection maps a linear edge AB to the linear segment joining
the images of A and B. Projections of non-linear edges can be determined

310

Applied Geometry for Computer Graphics and CAD

by other methods. Sections 7.5.3 and 8.2.1 described techniques for projecting
B´zier and NURBS curves.
e
Objects with curved faces cannot be rendered by projecting edges alone.
For instance, a sphere, which has no edges, is rendered by drawing a circle to
represent the extremities of the sphere with respect to the view: the circle is an
example of a silhouette. The ability to compute silhouettes is an essential tool
for CAD drawings.

N
back
facing
point

N silhouette
point

V
N

S

front
facing
point

Figure 11.11
Consider a projection of a surface S from a viewpoint V (considered to
be at inﬁnity for a parallel projection) as shown in Figure 11.11. Let P be a
point on S and let N be the surface normal at P. In a neighbourhood of P the
surface is approximated by the tangent plane which passes through P and has
normal direction N. If N points towards the viewpoint then a neighbourhood
of P is front-facing and is visible in the given view. Similarly, if N points away
from the viewpoint, then a neighbourhood of P is back-facing and is invisible
in the given view. When N is neither front-facing nor back-facing then, in a
neighbourhood of P, the face is (in general) turning from front-facing to backfacing and P is called a silhouette point. For a given projection, the set of all
silhouette points of a surface is called the silhouette. The image of the silhouette
in the viewplane is called the apparent contour . Silhouette points are expressed
more precisely in the following deﬁnition.

Deﬁnition 11.1
Let P be a point of a surface S, and let N be a surface normal at P. Then P is
said to be a silhouette point of a parallel projection in the direction V whenever
V · N = 0. P is said to be a silhouette point of a perspective projection from a
viewpoint V whenever (V − P) · N = 0.

11. Rendering

311

Example 11.2
Consider the parallel projection of the surface x(s, t) = (s, t, st + s3 + t2 ) in the
direction V(0, 1, 0). Then xs (s, t) = (1, 0, t + 3s2 ) and xt (s, t) = (0, 1, s + 2t)
and the unit normal is
N=

1
(−t − 3s2 , −s − 2t, 1) .
|xs × xt |

The silhouette points satisfy V · N = −s − 2t = 0. Therefore s = −2t and
substituting for s in x(s, t) gives the silhouette curve (−2t, t, −t2 − 8t3 ). The
surface and its silhouette are shown in Figure 11.12. Note that the silhouette
calculation does not require the surface normal to be a unit vector, and so the
surface normal will not be normalized in the subsequent examples.

silhouette
curve

Figure 11.12

Surface and silhouette of Example 11.2

Example 11.3
Consider the parallel projection of the surface x(s, t) = s, t, st2 + t2 − 1 s3 in
3
the direction V(1, 0, 0). Then xs (s, t) = (1, 0, t2 − s2 ) and xt (s, t) = (0, 1, 2st +
2t) and a normal is
N = (s2 − t2 , −2st − 2t, 1) .
The silhouette points satisfy V · N = s2 − t2 = 0. Therefore s = t or s = −t.
Substituting s = t in x(s, t) gives the silhouette curve t, t, t2 + 2 t3 . Similarly,
3
substituting s = −t gives a second silhouette curve −t, t, t2 − 2 t3 . The surface
3
and the two silhouettes are shown in Figure 11.13(a) and viewed from above.
Figures 11.13(b) and (c) show the surface and silhouettes viewed along the
positive and negative x-axis.

312

Applied Geometry for Computer Graphics and CAD

(a)

(b)

(c)

Surface and silhouettes of Example 11.3

Figure 11.13

Example 11.4
Consider the perspective projection of the surface x(s, t) = (s, t, t2 − s2 ) from
the viewpoint V(0, 5, 0). Then xs (s, t) = (1, 0, −2s) and xt (s, t) = (0, 1, 2t) and
a normal is
N = (2s, −2t, 1) .
The silhouette points satisfy (V − x(s, t)) · N = −s2 + t2 − 10t = 0. Therefore
s = ± t(t − 10) for t ≤ 0 and t ≥ 10. Substituting for s into x(s, t) gives two
silhouette curves ( t(t − 10), t, 10t) and (− t(t − 10), t, 10t). An alternative
substitution can be obtained by parametrizing the conic −s2 +t2 −10t = 0 using
the method of Section 5.6.4: for instance, (s, t) = 10u/(1 − u2 ), 10/(1 − u2 ) .
The trigonometric parametrizations of the conic can also be used: (s, t) =
(5 tan θ, 5 sec θ + 5) or (s, t) = (5 sinh θ, ±5 cosh θ + 5). The surface and the two
silhouette curves are shown in Figure 11.14(a) and viewed from above. Figure
11.14(b) shows the surface and silhouettes viewed from V(0, 5, 0).

(a)
Figure 11.14

(b)
Surface and silhouettes of Example 11.4

11. Rendering

313

Example 11.5 (Silhouettes of a Sphere)
To show that the silhouette of a sphere is a circle, consider the sphere with
radius r and centred at C(x0 , y0 , z0 ). In implicit form the sphere is given by
(x − x0 )2 + (y − y0 )2 + (z − z0 )2 = r2

(11.10)

and a normal vector at the point P(x, y, z) is
N = (x − x0 , y − y0 , z − z0 ) = P − C .

(11.11)

The silhouette points of the sphere for a parallel projection with direction
V(v0 , v1 , v2 ) satisfy V · N = 0 giving
v0 (x − x0 ) + v1 (y − y0 ) + v2 (z − z0 ) = 0 .

(11.12)

Equation (11.12) deﬁnes the plane through C with normal direction V. Therefore, the silhouette curve is the intersection of the sphere with the plane (11.12),
that is, a circle centred at C with radius r.
For a perspective projection with viewpoint V(v0 , v1 , v2 ), the silhouette
points of the sphere (11.10) satisfy (V − P) · N = 0 and hence
(V − P) · (P − C) = 0 .

(11.13)

In vector form, the sphere (11.10) is given by
(P − C) · (P − C) = r2 .

(11.14)

Adding Equations (11.13) and (11.14) gives
(V − C) · (P − C) = r2 ,
which, after some rearrangement of the equation, gives
(V − C) · P = r2 + C · (V − C) .

(11.15)

Therefore, the silhouette points lie on a plane with normal direction V − C.
Intersecting the plane (11.15) with the sphere (11.10) gives a silhouette circle.
See Exercise 11.7 for further details.

314

Applied Geometry for Computer Graphics and CAD

EXERCISES
11.4. Determine the silhouette curve of the surface x(s, t) = (s, t, st + s2 −
1 3
3 t ) for a parallel projection in the direction V(0, 1, 0).
11.5. Determine the silhouette curve of the surface x(s, t) = (s, t, st2 −
s + 1 s3 ) for a parallel projection in the direction V(1, 0, 0). (Hint:
3
the substitution s = cos θ and t = sin θ might be helpful for the
parametrization of the silhouette curve.)
11.6. Determine the silhouette curve of the surface x(s, t) = (s, t, 9s2 t −
t − 3t3 ) for a parallel projection in the direction V(0, 1, 0).
11.7. Show that, for a parallel or perspective projection, a plane either
has no silhouette points or the entire plane is “in silhouette” (that
is, every point of the plane is a silhouette point).
11.8. Generalise the method shown for a sphere to determine the silhouette
2
2
2
plane of the ellipsoid x2 + y2 + z2 = 1 for a parallel projection in
a
b
c
the direction V(v0 , v1 , v2 ).
11.9. Show that, for a given projection, the silhouette of a surface is the
locus of points on the surface for which there is a tangent line passing
through the viewpoint (considered to be at inﬁnity for a parallel
projection).
11.10. Consider the perspective projection of the sphere of Example 11.6.
a) Show that the distance from the silhouette plane (11.12) to the
sphere centre C is d = r2 / |V − C|.
b) Let U = (V − C)/ |V − C| denote the silhouette plane unit
normal. Show that the silhouette circle has centre C1 and radius
r1 given by
C1 = C + dU,

and r1 = (r2 − d2 )1/2 .

c) Let X be a unit vector perpendicular to U, and let Y =
(U × X) /|U×X|. Using C1 as the origin, and X and Y as the xand y- axes for the silhouette plane, write down a parametrization for the silhouette circle.
11.11. Show that, for a perspective projection, the sphere (11.10) has no
silhouette points when the viewpoint is inside the sphere.
Silhouette curves of quadric surfaces are relatively straightforward to compute since they can be shown to lie in a silhouette plane. The intersection of

11. Rendering

315

the silhouette plane with the quadric yields silhouette curves that are conics.
Consider a quadric with the homogeneous equation
xQxT = 0 ,

(11.16)

and a projection with viewpoint V (using homogeneous coordinates). The aim
is to apply Exercise 11.6 to obtain the silhouette. Let P be a point on the
quadric so that PQPT = 0. The line through P and V is
x(s) = (1 − s)P + sV .

(11.17)

It follows that the point x(s) lies on the quadric whenever
x(s)Qx(s)T = ((1 − s)P + sV)Q((1 − s)PT + sVT ) = 0 .

(11.18)

Expanding (11.18), gives a quadratic equation in s
(1 − s)2 PQPT + s(1 − s)VQPT + s(1 − s)PQVT + s2 VQVT = 0 . (11.19)
Since PQPT = 0 and VQPT = PQVT (Exercise 11.12), it follows that Equation (11.19) simpliﬁes to
2s(1 − s)VQPT + s2 VQVT = 0 .

(11.20)

Applying Exercise 11.9, P is a silhouette point if and only if the line (11.17)
is tangent to the quadric at P, which can occur if and only if (11.20) has a
multiple root. Since s = 0 is a root, a multiple root can can only arise when
VQPT = 0 .

(11.21)

This is the condition for P to be a silhouette point of the quadric (11.16).

Example 11.6
Consider a projection of the sphere (x−x0 )2 +(y −y0 )2 +(z −z0 )2 −r2 = 0 from
a viewpoint V(v0 , v1 , v2 , v3 ). Condition (11.21) implies that P(X, Y, Z, W ) is a
silhouette point whenever
⎞⎛
⎛
⎞
X
1
0
0
−x0
⎟⎜ Y ⎟
⎜ 0
1
0
−y0
⎟⎜
⎟
v0 v1 v2 v3 ⎜
⎠⎝ Z ⎠ = 0 ,
⎝ 0
0
1
−z0
−x0

−y0

−z0

2
2
x2 + y0 + z0 − r2
0

W

yielding the silhouette plane,
(v0 − v3 x0 )X + (v1 − v3 y0 )Y + (v2 − v3 z0 )Z
2
2
−(v0 x0 + v1 y0 + v2 z0 + v3 (x2 + y0 + z0 − r2 ))W = 0 .
0

(11.22)

316

Applied Geometry for Computer Graphics and CAD

For a parallel projection, v3 = 0, and in aﬃne coordinates (11.22) gives
v0 x + v1 y + v2 z − (v0 x0 + v1 y0 + v2 z0 ) = 0 .
This agrees with Equation (11.12). For a perspective projection, set v3 = 1, so
that in aﬃne coordinates (11.22) yields
2
2
(v0 −x0 )x+(v1 −y0 )y +(v2 −z0 )z −(v0 x0 +v1 y0 +v2 z0 +(x2 +y0 +z0 −r2 )) = 0 .
0
(11.23)
It left as an exercise to the reader (Exercise 11.13) to verify that this equation
is equivalent to (11.15) .

Example 11.7
2

2

2

Consider the sphere x − 1 + y − 1 + (z − 1) = 1 with radius 1 and
2
2
4
2
centred at 1 , 1 , 1 . For a perspective projection with viewpoint (−1, 0, 2),
2 2
Equation (11.23) can be applied to yield the silhouette plane
1
1
3
− x− y+z− =0.
2
2
4
The silhouette curve is the circle of intersection of the silhouette plane and the
sphere. Using Exercise 11.7(a) and (b),
√
3 1
1
14
|V − C| = − , − , 1 =
, and d = √ .
2 2
2
2 14
It follows that the circle has radius r1 =
C=

1 1
1
, ,1 +
2 2
14

√
13
√
2 14

3 1
− ,− ,1
2 2

and centre
=

−

3
1 1
,− ,
28 28 14

.

A parametric equation for the silhouette circle can be obtained using Exercise
11.7(c). The silhouette plane has unit normal U = √1 (−3, −1, 2). The x-axis
14 √
√
for the silhouette plane is chosen to be X = (1/ 10, −3/ √10, 0), a unit vector
√
√
perpendicular to U. The y-axis is Y = (3/ 35, 1/ 35, 5/ 35), the unit vector
with direction U × X. In this coordinate system, the silhouette circle has the

11. Rendering

317

Figure 11.15

Silhouette of Example 11.7

parametric equation
C + r1 cos θX + r1 sin θY
√
1
1 1
13
3
3
=
− ,− ,
+ √ cos θ √ , − √ , 0
28 28 14
2 14
10
10
√
3
13
1
5
+ √ sin θ √ , √ , √
,
2 14
35
35
35
√
√
13 cos θ
3 13 sin θ
3
,
=
− + √ √ + √ √
28 2 14 10
2 14 35
√
√
√
1
3 13 cos θ
5 13 sin θ
13 sin θ 1
− − √ √
+ √ √
+ √ √ ,
28
2 14 10
2 14 35 14
2 14 35

.

The sphere and the circular silhouette are shown in Figure 11.15.

Example 11.8
Consider the torus x(s, t) = ((r cos s + R) cos t, (r cos s + R) sin t, r sin s) for
0 ≤ s ≤ 2π and 0 ≤ t ≤ 2π. The unit normal of the torus is
N(s, t) = (− cos s cos t, − cos s sin t, − sin s) .
The silhouette for a parallel projection in the direction V(v0 , v1 , v2 ) satisﬁes
V · N = 0 giving
v0 (cos s cos t) + v1 (cos s sin t) + v2 sin s = 0 ,
and therefore

v1
v0
cos t −
sin t .
(11.24)
v2
v2
Equation (11.24) deﬁnes the curve in the (s, t)-parameter space of the torus
that corresponds to the silhouette of the torus. A parametric equation for the
tan s = −

318

Applied Geometry for Computer Graphics and CAD

silhouette can be obtained, for instance, by using (11.24) to solve for s, and
then substituting for s in the parametric equation of the torus. Figures 11.16(a)
and (b) show the curve in the (s, t)-parameter space of the torus, and the
corresponding silhouette when r = 5, R = 10 and V(50, 50, 25). Part of the
silhouette curve is drawn using a dashed line to indicate that that it is hidden by
the torus in the given projection. Observe that the parameter-space curve has
two branches (taking the periodicity of the domain in account). Each branch
corresponds to a connected component of the silhouette curve.
6
5
4
3
2
1
0

0

1

2

3

4

5

6

(a)

(b)

Figure 11.16

Silhouette of a torus

In general, it is not possible to obtain an analytical solution for the silhouettes of a surface. Silhouettes of more complex surfaces such as B´zier and Be
spline surfaces are found by numerical methods. One approach is similar to that
used in Example 11.8. For a parametric surface x(s, t) = (x(s, t), y(s, t), z(s, t))
the normal direction is (xs × xt ). The silhouette for a parallel projection is
given by the vector triple product
V · (xs × xt ) = 0.

(11.25)

Equation (11.25) deﬁnes a curve C(s, t) = 0 in the (s, t) parameter space of
the surface. Points of this curve are obtained numerically using, for instance,
a marching method or subdivision (see [13]). The points of this curve correspond to the silhouette points of the surface. Perspective projections can be
determined similarly.
The CAD drawing in Figure 11.17(a) has been obtained by projecting the
edges and silhouettes of the surfaces. The CAD drawing is completed by performing a hidden line computation to determine the segments of the edges
and silhouettes that are visible. The silhouette plays an important part in the
hidden line calculation. In Figure 11.17(b), the line AC has a visible segment

11. Rendering

319

between points A and B, and an invisible segment BC that lies behind the
hemisphere. Similarly, the line DF has a visible segment between points D and
E, and an invisible segment EF that lies behind one of the blocks. Observe
that changes in the visibility of an edge (or a silhouette) correspond to points
in the viewplane where the projected image of the edge (or silhouette) intersects the projected images of itself, and other edges and silhouettes. However,
not all such intersections give rise to a change in visibility, and other information about the surfaces must be taken into account. Changes in visibility
can also arise at apparent cusps of a silhouette, that is, silhouette points that
correspond to cusps of the apparent contour. For instance, the visibility of the
torus silhouette in Figure 11.16 changes at two of the four apparent cusps.

A

B

C

F

(a)
Figure 11.17
lines drawn faint

E

D

(b)

CAD drawing with (a) hidden lines removed and (b) hidden

EXERCISES
11.12. Show that VQPT = PQVT .
11.13. Verify that Equations (11.15) and (11.23) are equivalent.
11.14. Compute the silhouette curves of the cylinder x2 + y 2 = 1 for the
perspective projection with viewpoint (λ, 0, 0), for λ > 1 or λ < −1.
11.15. Compute the silhouette curve of the quadric 4x2 −2xz+y 2 −z 2 −4 = 0
for the perspective projection with viewpoint (10, 0, 0).
11.16. Write a computer program (or use a computer package) that obtains
the silhouettes of a quadric surface. The user should input the coeﬃcients of the quadric and the viewpoint, and the program should
determine the conic silhouette in parametric form. Care should be
taken to identify the cases when there are no silhouette points; for
instance, when the viewpoint lies inside a sphere or ellipsoid. The

320

Applied Geometry for Computer Graphics and CAD

cases when the silhouettes are linear may need to be treated separately.
11.17. Consider the surface of revolution of the curve (f (u), 0, g(u)) (f (u) =
0) about the z-axis given by x(u, v) = (f (u) cos v, f (u) sin v, g(u)).
Show that the silhouettes for a parallel view in the z-direction are
circles lying in planes that are perpendicular to the z-axis.
11.18. Show that, for a parallel projection in the z-direction, the silhouette
curves of the torus of Example 11.5 are circles.
11.19. Show that, for a parallel projection in the x-direction, the silhouette
curves of the torus of Example 11.5 are circles.

11.6 Shadows
A shadow is a region of a object’s surface where illumination is reduced due to
the obstruction of light sources by other objects in the scene. The amount of
diﬀuse light is reduced, but there is still a contribution of ambient light. When
a shading algorithm is applied to a scene, shadows appear in regions where
the intensities are signiﬁcantly less than the surrounding intensities. Shading
algorithms do not always produce a satisfactory result. For some surfaces it is
possible to determine the boundary of the shadow region mathematically by
applying a projection with the light source as the viewpoint and the surfaces
of objects in the scene as “viewplanes”. The boundaries of an object’s shadow
are the projected images of edges and silhouettes of the obscuring objects onto
the surface.
The shadows cast by a polygonal surface onto a planar surface are straightforward to compute. A polygon is a union of triangular planar facets, and it
follows from Exercise 11.4 that each facet either has no silhouette, or is entirely
in silhouette and does not contribute to the shadow. Therefore, a polygon casts
a shadow that is bounded by the projected images of the polygon edges: these
can be found using the method of Section 4.3.

Example 11.9
The scene in Figure 11.18(a) consists of a sphere, with radius 1 and centre
2
1 1
, 2 , 1 , that has been embedded in a unit cube. The shadow cast onto the
2
plane z = 0 is determined by (i) computing the silhouette of the sphere, (ii)
projecting the silhouette and the edges of the cube using the light source as
viewpoint and the ﬂat surface as viewplane, and (iii) shading the bounded

11. Rendering

321

shadow region. The unit cube, viewpoint (−1, 0, 2) and viewplane z = 0 are

2

V

V

1
0
-1
0
1
2
2

3
4

1
0

(a)

(b)
Figure 11.18

as given in Example 4.18 and so the projection matrix M has already been
determined. The silhouette of the sphere was obtained in Example 11.7. The
projected vertices of the cube are calculated in the usual manner:
⎞
⎛
⎞
⎛
0
0 0 −2
0 0 0 1
⎜ −2
⎜ 1 0 0 1 ⎟
0 0 −2 ⎟
⎟
⎟
⎜
⎞ ⎜
⎜ −2 −2 0 −2 ⎟
⎜ 1 1 0 1 ⎟ ⎛ −2
0 0
0
⎟
⎜
⎟
⎜
⎟
⎜
⎟
⎜
0 ⎟ ⎜ 0 −2 0 −2 ⎟
⎜ 0 1 0 1 ⎟ ⎜ 0 −2 0
⎜
⎟=⎜
⎟ ,
⎟⎝
⎜
⎜ 0 0 1 1 ⎟
0 0 −1 ⎟
−1
0 0
1 ⎠ ⎜ −1
⎟
⎜
⎟
⎜
⎜ −3
⎜ 1 0 1 1 ⎟
0 0 −1 ⎟
0
0 0 −2
⎟
⎜
⎟
⎜
⎝ −3 −2 0 −1 ⎠
⎝ 1 1 1 1 ⎠
−1 −2 0 −1
0 1 1 1
giving the points with aﬃne coordinates (0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0),
(1, 0, 0), (3, 0, 0), (3, 2, 0) and (1, 2, 0). The image of the silhouette can be obtained by either computing points on the circle and applying the projection
matrix, or applying the projection matrix to the equation of the circle to yield
a parametric equation for the silhouette image. The shadow is shown in Figure 11.18(b).

Solutions

Chapter 1
1.2. −4x − 3y + 23 = 0.
1.4. Use Example 1.2 with θ = π/2, to give A1 A2 + B1 B2 = 0.
1.6. PQ has parametric equation (x(t), y(t)) = ((1 − t) p1 + tq1 , (1 − t) p2 + tq2 )
for 0 ≤ t ≤ 1. Then
L (x(t), y(t))

= (ax(t) + by(t) + c, dx(t) + ey(t) + f )
=

(a ((1 − t) p1 + tq1 ) + b ((1 − t) p2 + tq2 ) + c,
d ((1 − t) p1 + tq1 ) + e ((1 − t) p2 + tq2 ) + f )

=

(1 − t) (ap1 + bp2 + c, dp1 + ep2 + f )
+ t (ap1 + bp2 + c, dp1 + ep2 + f )

=

(1 − t) L (P) + tL (Q) .

The ﬁnal line deﬁnes the line segment with endpoints L (P) and L (Q).
1.7. (a) A (4, −1), B (6, −1), C (5, 0), D (4.5, 1).

(b) T(−3, 2).

1.8. A mirror image.
1.10. A (1, −1), B (3, −1), C (2, −2), D (1.5, −3).
1.13. For Rot (π/3) : P (−0.366, 1.366), Q (0.634, 3.10), R (−0.732, 2.732).
For Rot (π/4) : P (0, 1.414), Q (1.414, 2.828), R (0, 2.828).
1.15. No.
1.16. (a) v = (3/5, −4/5) , Sh ((3/5, −4/5) , 4) =
323

2. 92
1. 44

−2. 56
−0. 92

.

324

Solutions

(b) v = (8/10, 6/10), Sh ((8/10, 6/10) , −1) =

1. 48
−0. 64

0. 36
0. 52

.

1.17. Bottom left window is obtained from Square by a scaling of 0.5 in the
y-direction followed by a translation of 1.5 units in the x-direction and
1.5 units in the y-direction.
1.20. Apply Exercise 1.6 with t = 0.5.

Chapter 2
2.1. (2, 6, 4), (−1, −3, −2), (1, 3, 2), (4, 12, 8).
2.2. (2, −3, 1), (4, −6, 2) etc.
2.3. (−5, 20, 1), (10, −40, 2).
2.4. Reﬂexive: M1 ∼ M1 since M1 = 1M1 . Symmetric: if M1 ∼ M2 then M1 =
1
µM2 for some µ = 0. Then M2 = µ M1 and so M2 ∼ M1 . Transitive: if
M1 ∼ M2 and M2 ∼ M3 , then M1 = µM2 and M2 = ηM3 for some µ = 0
and η = 0. Then M1 = (µη) M3 and µη = 0. So M1 ∼ M3 . Hence ∼ is
an equivalence relation.
2.5. (6, −3, 0).
2.6. (3, 4, 0).
2.7. 3X + 4Y − 5W = 0.
2.8. (9, 2, 0).
2.9. (−b, a, 0).
2.10. A(1, 1), B(3, 1), C(2, 2), D(1.5, 3).
⎛
⎞
2
0 0
2.11. ⎝ 0 1.5 0 ⎠, A (2, 1.5), B (6, 1.5), C (4, 3), D (3, 4.5).
0
0 1
⎛
⎞
0 1 0
2.12. ⎝ −1 0 0 ⎠, A (−1, 1), B (−1, 3), C (−2, 2), D (1 − 3, 1.5).
0 0 1
⎛
⎞
1/2
0 0
2.13. ⎝
0 2/3 0 ⎠.
0
0 1

Solutions

325

⎛

⎞
cos θ − sin θ 0
2.14. ⎝ sin θ
cos θ 0 ⎠.
0
0 1
⎛
⎞
0 −3 0
2.16. ⎝ 2
0 0 ⎠.
0
0 1
In general, changing the order of transformations results in a diﬀerent
transformation.
⎛
⎞
−4
0
0
2.17. ⎝ 0 −0. 5 0 ⎠.
0
0
1
⎛
⎞
0 −1 0
2.18. ⎝ 1
0 0 ⎠.
−1
1 1
2.19.
−1

(T (−2, 5) · Rot (−π/3))

= Rot (−π/3)

−1

· T (−2, 5)

−1

= Rot (π/3) · T (2, −5)
⎛
⎞
0. 5 0. 866
0
= ⎝ −0. 866
0. 5
0 ⎠ .
2.0 −5.0 1.0
⎛

⎞
0. 3125
0
−0. 625
0 ⎠.
−2. 5 1.0
⎞
⎛
cos θ sin θ 0
2.21. (a) A = ⎝ − sin θ cos θ 0 ⎠.
y0 1
x0
⎛
cos θ
− sin θ
−1
⎝
(b) A =
sin θ
cos θ
−x0 cos θ − y0 sin θ x0 sin θ − y0 cos θ

0. 75
2.20. ⎝ 0. 5
−2.0

⎞
0
0 ⎠ giving
1

x

= x cos θ + y sin θ − y0 sin θ − x0 cos θ ,

y

= −x sin θ + y cos θ − y0 cos θ + x0 sin θ .

(d) The equations of the x - and y -axes are obtained by setting y = 0
and x = 0 in the previous equations.

326

Solutions

2.22. T(a, b) where a = x0 cos θ − x0 + y0 sin θ − x1 cos θ − y1 sin θ + x1 and
b = −y0 − x0 sin θ + y0 cos θ + x1 sin θ − y1 cos θ + y1 .
⎛
⎞
−21 20
0
2.23. ⎝ 20 21
0 ⎠.
−80 32 29
⎛
⎞
1
0 0
2.26. Bottom left window: ⎝ 0
0.5 0 ⎠.
1. 5 1. 5 1
2.27.

⎛

20
T (10, 5) · S (20, 20) · T (200, 200) = ⎝ 0
400

0
20
300

⎞
0
0 ⎠ .
1

2.28. (1, 3, 1) × (4, −2, 1) = (5, 3, −14), giving 5x + 3y − 14 = 0.
2.29. (1, −3, 7) × (4, 3, −5) = (−6, 33, 15), giving (−6/15, 33/15).

Chapter 3
3.1. (1.5, 3, 2.5), (0.5, 1.0, 1.5), (0, 0, 2), (1, 0, 0).
3.2. (3, 4, 1, 0), (7, 2, 0, 0).
⎛
0. 7071 0. 7071 0 0
⎜ −0. 7071 0. 7071 0 0
3.3. (a) ⎜
⎝
0
0 1 0
0
0 0 1
⎛
1.0
0
0
⎜ 0 −2. 5981
−1. 5
(b) ⎜
⎝ 0
0. 5
−0. 8660
2.0
2. 5
−4. 3301

⎞
⎟
⎟.
⎠
⎞
0
0 ⎟
⎟.
0 ⎠
1.0

(c) Translate (1, 0, −11/3) to the origin. Plane is 6x − 6y + 3z = 0 and
√
√
R = (2/3, −2/3, 1/3). Then sin θx = (−2/3) / √1 5 = − 2 5, cos θx =
3
5
√
√
(1/3) / 1 5 = 1 5, sin θy = 2/3, cos θy = 1 5, giving
3
5
3
⎛

0. 1111
⎜ 0. 8889
⎜
⎝ −0. 4444
−0. 7407

0. 8889
0. 1111
0. 4444
0. 7407

−0. 4444
0. 4444
0. 7778
−0. 3704

⎞
0
0 ⎟
⎟ .
0 ⎠
1.0

Solutions

327

(d) Then Q − P = (6,√ 3), and hence R = (6/7, 2/7, 3/7). √
2,
Then sin θx =
√
√
1
2
1
3
(2/7) / 7 13 = 13 13, cos θx = (3/7) / 7 13 = 13 13, sin θy =
√
6/7, and cos θy = 1 13, giving
7
⎛

0. 5049
⎜ 0. 2427
⎜
⎝ 0. 8283
−0. 9092

0. 6713
−0. 7137
−0. 2001
0. 7713

0. 5426
0. 6571
−0. 5233
1. 3043

⎞
0
0 ⎟
⎟ .
0 ⎠
1.0

3.4. (−11, 5, 27).
3.5. 10x + 16y + z − 25 = 0.
3.8. (a) The points are either collinear or lie on a plane through the origin.
3.9. (p12 , p20 , p01 , p03 , p13 , p23 ) = (x1 y2 − x2 y1 , x2 y0 − x0 y2 , x0 y1 − x1 y0 , x0 −
y0 , x1 − y1 , x2 − y2 ), so ω = (x0 − y0 , x1 − y1 , x2 − y2 ) = P − Q and v =
−→
−
(x1 y2 −x2 y1 , x2 y0 −x0 y2 , x0 y1 −x1 y0 ) = P×Q. Clearly QP = P−Q is the
−→
−
−→
−
direction vector of the line. OP and OQ are vectors parallel to the plane
−→ −→
−
−
containing P, Q, and O. The normal to the plane is OP × OQ = P × Q.
3.10. (p03 , p13 , p23 )·(p12 , p20 , p01 ) = (x1 y2 −x2 y1 , x2 y0 −x0 y2 , x0 y1 −x1 y0 )·(x0 −
y0 , x1 − y1 , x2 − y2 ) = (x0 − y0 ) (x1 y2 − x2 y1 ) + (x1 − y1 ) (x2 y0 − x0 y2 ) +
(x2 − y2 ) (x0 y1 − x1 y0 ) = 0.
3.11. The rotation is Rotx (θx ) Roty (−θy ) Rotz (θ) Roty (θy ) Rotx (−θx ), which
2
2
2
after simpliﬁcation using r1 + r2 + r3 = 1 (following the notation of
Section 3.2.4) yields
⎛
⎞
(cos θ+
(−r2 sin θ+
(r3 sin θ+
0 ⎟
⎜ r1 2 (1 − cos θ)
r1 r2 (1 − cos θ))
r1 r3 (1 − cos θ))
⎜
⎟
⎜
⎟
⎜
⎟
⎜
⎟
(cos θ+
(−r3 sin θ+
(r1 sin θ+
⎜
0 ⎟
⎜
⎟
2
r2 (1 − cos θ)
r2 r3 (1 − cos θ))
⎜ r1 r2 (1 − cos θ))
⎟
⎜
⎟
⎜
⎟
⎜
⎟
⎜
⎟
(−r1 sin θ+
(cos θ+
(r2 sin θ+
⎜
0 ⎟
2
⎜ r1 r3 (1 − cos θ))
⎟
r3 (1 − cos θ)
r2 r3 (1 − cos θ))
⎜
⎟
⎝
⎠
0

0

0

3.12. (a) (5 + 6i + 11j − 7k), (b) (2, (3, −1, 1)), (c) (8, (44, −22, 48)),
(d) (4, (34, 0, −40)), (e) (4, (8, 24, −46)).
3.13. (a) (1/27, −5/54, 1/18, −2/27), (b) (−3/26, −2/13, 0, 1/26).

1

328

Solutions

3.14. ijk = −1 implies iijk = −i. Since i2 = −1 it follows that jk = i. Then
jjk = ji and so k = −ji, etc.
3.17. Let qi = (si , v) for i = 1, 2, 3. Then
q1 (q2 + q3 )

=

(s1 (s2 + s3 ) − v1 · (v2 + v3 ),
s1 (v2 + v3 ) + (s2 + s3 )v1 + (v1 × (v2 + v3 )))

=

((s1 s2 + v1 · v2 ) + (s1 s3 − v1 · v3 ),
(s1 v2 + s2 v1 + (v1 × v2 )) + (s1 v3 + s3 v1 + (v1 × v3 ))

= q1 q2 + q1 q3 .
3.18. (a) q1 q2 = (s1 s2 − v1 · v2 , −s1 v2 − s2 v1 − (v1 × v2 )) and q2 q1 =
(s2 s1 − (−v2 ) · (−v1 ), −s2 v1 − s1 v2 + ((−v2 ) × (−v1 ))). The right hand
sides of the two equations are equal so q1 q2 = q2 q1 .
3.19. I2 = (0, v)(0, v) = ((0)(0) − v · v, (0)v + (0)v + (v × v)) = (−|v|2 , 0).
3.21. (a) |q| = 5, so (2, (1, 2, 4)) = 5 2 , 1 , 2 , 4 = 5(s, v). Lemma 3.11 can
√ 5 5 5 5
v
be applied to (s, v): |v| = 21/5, and I = |v| = √1 , √2 , √4 . Let
21
21
21
s = cos θ = 2/5 (θ = 1.1593 radians). Then (2, (1, 2, 4)) = 5(cos θ, sin θI).
3.22. (a)
q1 q2

= r1 (cos θ1 , sin θ1 I) r2 (cos θ2 , sin θ2 I)
= r1 r2 (cos θ1 cos θ2 − (sin θ1 I) · (sin θ2 I),
cos θ1 sin θ2 I + cos θ2 sin θ1 I + ((sin θ1 I) × (sin θ2 I)))
= r1 r2 (cos θ1 cos θ2 − sin θ1 sin θ2 , (cos θ1 sin θ2 + cos θ2 sin θ1 )I)
= r1 r2 (cos(θ1 + θ2 ), sin(θ1 + θ2 )I) .

3.25. I = − 1 , 2 , 2
3 3 3

and q = cos

π
4

, sin

π
4

√

I =

2
2 ,

−

√
√
√
2
, 32 , 32
6

−1

.

The rotation is given by q(0, (5, 6, 7))q = (0, (−5/3, 31/3, −2/3)). Thus
(5, 6, 7) rotates to the point (−5/3, 31/3, −2/3).
3.26. Using the fact that q1 q2 = q2 q1 , qq = qq = 1, and xx = 1, gives
|Cq (x)|2

= qxq qxq = q x q q x q = q x x q = q q |x|2 = |x|2

and the result follows.
3.30. φ = 1.0745, cos φ =

10
21 ,

√

and sin φ =

341
21 .

The motion is given by

sin(φt)
sin(φ(1 − t))
√
(6, 0, 18, −9) + √
(14, 14, 7, 0) .
341
341

Solutions

329

Chapter 4
⎛

4.1.

4.2.

4.3.

4.4.

4.6.

⎞
−127 −33
−3
⎝
24
11
12 ⎠.
−10 −55 −126
⎛
⎞
−10 −14
0
⎝ −15 −21
0 ⎠.
−6
4 −31
⎛
⎞
−12
−3
1
5
M = ⎝ −7 −16
−1 ⎠, and A − 2 , 13 , B 2 , 29 , C 2 , 29 .
2
3 3
3 3
63 −27 −10
⎛
⎞
4
8 0
M=⎝ 1
2 0 ⎠, and A 1 , 26 , B 11 , 35 , C 3 , 11 .
3 3
6
3
2
−8 32 6
⎛
⎞
5
1 −1 −1
⎜ 6
4
3
3 ⎟
⎜
⎟.
⎝ 4 −2
9
2 ⎠
−8

4 −4

3

⎛

⎞
−5
0
0
0
⎜ 2 −9
6
0 ⎟
⎟.
4.8. ⎜
⎝ 3 −6
4
0 ⎠
4 −8 12 −5
4.10. For Exercise 4.6: A (−8/3, 4/3, −4/3), B (−3/2, 5/2, −5/2),
C (−1/3, −4/3, −1/6), D (1, 1, 1).
For Exercise 4.8: A (−4/5, 8/5, −12/5), B (1/5, 8/5, −12/5),
C (−6/5, 17/5, −18/5), D (−4/5, 23/5, −22/5).
⎛
⎛
⎞
12/13
12/13
5/13 0 0
⎜ 5/13
4.12. K = ⎝ −5/13 12/13 0 0 ⎠, VC= ⎜
⎝
0
4
3 0 1
−63/13

−5/13
12/13
0
−16/13

⎞
0
0 ⎟
⎟,
0 ⎠
1

giving A (−63/11, −16/13), B (−3, −2), C (−24/13, 10/13), and
D (−48/13, 20/13), E (−97/26, −15/13), F (−56/13, −33/13).

330

4.13.

Solutions

√
√
⎞
0 5/ 34 0
3/ 34
K=⎝
0 −1
0 0 ⎠ ,
−1
1
1 1
⎛ 11 √
⎞
−20/49 −20/49
98 34
⎜
⎟
0
−1
0
⎟ .
VC = ⎜ 13 √
⎝
34
12/49
12/49 ⎠
98 √
1
17/49
− 49 34 17/49
√
√
√
1
Images of vertices: − 17 34, − 32 , − 22 34, 80 , (0, 2), − 3 34, 103 .
17
31
31
2
5
⎛
⎞
⎛
⎞
−12
0
0
0
0.7071 −0.7071
0
⎜
⎜
0 −12
0
0 ⎟
0.7071
0 ⎟
⎟, VC=⎜ 0.7071
⎟,
4.15. M=⎜
⎝
⎠
⎝ −0.1664
2
3 −4
1
0.4991 −0.2353 ⎠
8
12 32 −8
0.0416 −0.1248
0.0588
⎛
⎞
⎛
⎞
−678.8225
678.8225
0
80
0
0
⎜ −678.8225
−678.8225
0 ⎟
⎟.
DC = ⎝ 0
80
0 ⎠, VP = ⎜
⎝
1 ⎠
819.4113
746.8629
480 860 1
−3161.1775 −5296.0808 −8
⎛

Then A (431.51, 552.91), B (625.46, 358.96), C (722.44, 649.89), and
D (593.14, 520.59).
⎛
⎛
⎞
⎞
1
0
1
1
0
−0.333 0.333
⎜ −7 −6 −1 −1 ⎟
⎜
0.333 −0.333 ⎟
⎟, VC = ⎜ 1.414
⎟,
4.16. M = ⎜
⎝ 0
⎝
⎠
0 −6
0 ⎠
0
1
0
−7
0 −1 −7
−1.414 −0.667 0.667
⎛
⎞
⎛
⎞
64.645
83.333
1
25
0
0
⎜ −276.777 −83.333 −1 ⎟
⎟.
DC = ⎝ 0
100/9 0 ⎠, VP = ⎜
⎝
0
−66.667
0 ⎠
100 250/3 1
−452.513 −516.667 −7
A (64.65, 83.33), B (11.61, 133.33), C (185.86, 102.38), D (64.64, 116.67).
4.18. Consider the line segment through P(p1 , p2 , p3 ) in direction (v1 , v2 , v3 ),
from P to Q(p1 + tv1 , p2 + tv2 , p3 + tv3 ). The line segment has length
|t| |(v1 , v2 , v3 )|. Then
QM = (p1 + tv1 , p2 + tv2 , p3 + tv3 , 1)M = PM + t(v1 , v2 , v3 , 0)M .
The image of the segment has length |QM − PM| = |t| |(v1 , v2 , v3 , 0)M|.
The foreshortening ratio is |(v1 , v2 , v3 , 0)M| /|(v1 , v2 , v3 )| which depends
only on (v1 , v2 , v3 ). Therefore all segments with the same direction have
the same foreshortening ratio.

Solutions

331

4.19. Use the solution to Exercise 4.18. The direction of the x-axis is
(v1 , v2 , v3 ) = (1, 0, 0). Then
(v1 , v2 , v3 , 0)M = (1 0 0 0) M = n2 + n2 − n1 n2 − n1 n3 0
2
3
which has magnitude
n2 + n2
2
3

1/2

n2 + n2 + n2
1
2
3

1/2

= n2 + n2
2
3

1/2

The foreshortening ratio is |(v1 v2 v3 0)M| /|(1, 0, 0)| =
Similarly for the other principal directions.

.
n2 + n2
2
3

1/2

.

4.20. Let P (x y z w) be a point in the viewplane in world coordinates and let
the corresponding viewplane coordinates be (X Y W ). Then (x y z w) =
Xr1 + Y s1 + W q0 Xr2 + Y s2 + W q0 Xr3 + Y s3 + W q0 W .
Then (x y z w) is a point at inﬁnity if and only if (X Y W ) is a point at
inﬁnity. Similarly for the device coordinate transformation.

Chapter 5
5.1. (((6t − 2) t + 4) t − 5) t + 3 requires 4 ×’s and 4 ±’s. 3 − 5 · t + 4 · t · t −
2 · t · t · t + 6 · t · t · t · t requires 10 ×’s and 4 ±’s.
5.3. Horner requires n ×’s and n ±’s. The ordinary method requires n(n+1)/2
×’s and n ±’s. Saving n(n − 1)/2 ×’s – quite a saving!
5.5. (a) t(u) = (x(t) + ux (t), y(t) + uy (t)). (c) x (t)x + y (t)y + y (t)y(t) −
x (t)x(t) = 0.
√
5.6. (a)(i) (1, 1) corresponds to t = √ unit tangent is t(t) = 1/ 1 + 4t2 ,
1;
√
√
√
√
2t/ 1 + 4t2 , and so t(1) = 1/ 5, 2/ 5 . (ii) n(1) = −2/ 5, 1/ 5 .
√
√
(iii) 2/ 5(x − 1) − 1/ 5(y − 1) = 0.
(c) (i) t(t) =
(ii) n(t) =

√ 1
1+b2

√ 1
1+b2

(b cos t − sin t, b sin t + cos t) .

(−b sin t − cos t, b cos t − sin t) .

(iii) (b sin t + cos t) (x − x(t)) − (b cos t − sin t) (y − y(t)) = 0.
(d) (i) t(t) =
(ii) n(t) =

√

1
2+2 cos t

√ 1
2+2 cos t

(1 + cos t, sin t) .

(− sin t, 1 + cos t).

(iii) sin t(x − x(t)) − (1 + cos t) (y − y(t)) = 0.

332

Solutions

5.8. Rotation of C(t) = (x(t), y(t)) is the curve R(t) = (x(t) cos θ − y(t) sin θ,
x sin θ + y cos θ). Then
R (t) = (x (t) cos θ − y (t) sin θ, x (t) sin θ + y (t) cos θ) .
Then speed of R(t) is
2

2

(x (t) cos θ − y (t) sin θ) + (x (t) sin θ + y (t) cos θ)
=

(x (t))2 + (y (t))2

which is the speed of C(t).
5.10. (a) LC (t) =
(c) LC (t) =
0
sinh tc .

t
−π
t
t0

2

2

(1 + cos u) + (sin u) du = 4 sin 1 t + 4.
2
sinh

√
(e) LC (t) = a 1 + b2

t
t0

u
c

2

+ 1 du =

ebu du =

a
b

t
t0

cosh

u
c

du = sinh

t
c

−

√
1 + b2 ebt − ebt0 .

5.11. 8.
5.14. (a) Take t0 = 0 so that s(t) = LC (t) = 4 sin 1 t. Then t = 2 arcsin 1 s and
2
4
reparametrization gives
1
1
1
2 arcsin s + sin 2 arcsin s , 1 − cos 2 arcsin s
4
4
4

.

t
(c) Take t0 = 0 so that s(t) = sinh c . Then t = c arcsinh s, and
reparametrization gives (c cosh (arcsinh s) , c arcsinh s) which simpliﬁes to

c 1 + s2 , c arcsinh s
5.15. (x (t), y (t)) = −3 + 6t, 6t − 6t2 , n(t) =
Then the oﬀset is
1 − 3t + 3t2 , 3t2 − 2t3 +

.

1
1−2t+2t2

−2t + 2t2 , −1 + 2t .

d
−2t + 2t2 , −1 + 2t .
1 − 2t + 2t2

The curve and an oﬀset are shown in the following ﬁgure.
2
1
2

Solutions

333

5.16. (a) n(t) =

1
cosh(t/c)

(−1, sinh (t/c)) .

The oﬀset is (c cosh (t/c) , t) +
(b) n(t) =

√ 1
1+b2

d
cosh(t/c)

(−1, sinh (t/c)).

(−b sin t − cos t, b cos t − sin t) .

The oﬀset is (ebt cos t, ebt sin t) +

√ d
1+b2

(−b sin t − cos t, b cos t − sin t).

5.19. (d) Ellipse, (e) reducible (2x − 3)(x + y − 1) = 0, (f) hyperbola,
(g) hyperbola, (h) reducible (3x + 2y)(x − y + 2) = 0.
5.22. (a) a = 13, b = −5, c = 13, θ = π/4, x =

−

1
√ X
2

1
√ Y
2

2

and y =
2

+
puts conic in the form 8 (X + 3) + 18 (Y + 2) − 72 = 0.
Applying the translation T(−3, −2) puts the conic in the standard form
1
for an ellipse 1 x2 + 1 y 2 = 1. (b) y = 6x2 . (c) 1 x2 − 16 y 2 = 1.
9
4
4
1
√ X
2

1
√ Y
2

5.26. (d) (1, −1) and (1/3, −5/3). (e) (2.92, −2.39) and (1.52, −0.28).
5.29. (a)

−2t
−2t2
1−2t+2t2 , 1−2t+2t2

. (c) Consider lines through (1, 0): y = t(x − 1).
2

x +2x (t(x − 1))−(t(x − 1)) −1 = (x − 1) x − t2 x + 2xt + t2 + 1 = 0.
2

Then x =

2

t +1
t2 −2t−1 ,

y = t(x − 1) = t

t2 +1
t2 −2t−1

−1 =

2t+2t2
t2 −2t−1 .
2

5.30. (a) x = t2 − 1, y = t + 2. Then t = y − 2, x = (y − 2) − 1 giving
x − y 2 + 4y − 3 = 0. (c) x = 2t2 + t − 1, y = t2 − 3t + 3. Then
x − 2y = 2t2 + t − 1 − 2 t2 − 3t + 3 = 7t − 7. So t = 1 (x − 2y + 7).
7
2

Then x = 2 1 (x − 2y + 7) + 1 (x − 2y + 7) − 1 which simpliﬁes to
7
7
2x2 − 8xy − 14x + 8y 2 − 70y + 98 = 0.
⎛
⎞
−1 −1 −4
(e) ⎝ 0
0 −3 ⎠ has signed minors A0 = −6, A1 = −3, A2 = 0,
1 −2
4
B0 = 12, B1 = 0, B2 = −3, C0 = 3, C1 = −3, C2 = 0. Then the implicit
2
equation is (−3x − 3) − (−6x + 12y + 3) (−3y) = 0, which simpliﬁes to
x2 − 2xy + 4y 2 + 2x + y + 1 = 0.

5.31.

e1 e2
9
0
3
4
−4 −3

e3
1
0
1

e4
3
4
4

= −16e1 + 55e2 + 273e3 − 43e4 .

334

Solutions

Chapter 6
6.1. (1 − t)2 (−1, 5) + 2(1 − t)t(2, 0) + t2 (4, 6) = −1 + 6t − t2 , 5 − 10t + 11t2 .
B(0.75) = (2. 9375, 3. 6875). B(1.25) is not a point on the curve since
t = 1.25 is not in the interval [0, 1].
6.2. (1 − t)2 (p0 , q0 ) + 2(1 − t)t(p1 , q1 ) + t2 (p2 , q2 ) =
(p0 − 2p1 + p2 ) t2 + 2 (p1 − p0 ) t + p0 ,
(q0 − 2q1 + q2 ) t2 + 2 (q1 − q0 ) t + q0
which is the parametric equation of a parabola.
6.3. B(t) = (1 − t)3 (1, 0) + 3(1 − t)2 t (2, 3) + 3(1 − t)t2 (5, 4) + t3 (2, 1) =
1 + 3t + 6t2 − 8t3 , 9t − 6t2 − 2t3 . B(0) = (1, 0), B(0.5) = (3.0, 2. 75),
B(1) = (2, 1) .
6.5. (a) b1 − b0 and b1 − b0 . (b) 2b1 − 2b0 and 2b2 − 2b1 .
+b
6.7. B(t) = (1 − t)3 b0 + 3(1 − t)2 t 2b03 3 + 3(1 − t)t2 b0 +2b3 + t3 b3 .
3
Expanding gives B(t) = b0 − b0 t + tb3 = b0 (1 − t) + tb3 .

6.9. b0 (2, 2), b1 (2, 5), b2 (5, 6), b3 (8, 6) using endpoint interpolation and
knowledge of the end tangents.
6.10. b0 (3, 6), b1 (3, 8), b2 (4, 9), b3 (5, 9) using endpoint interpolation and
knowledge of the end tangents.
6.15.

6.16.

n
n
i + i+1
n+1
i+1 .
1
(1−t)3
0
1
4 , etc.

=

n!
i!(n−i)!

+

n!
(i+1)!(n−i−1)!

4

dt = − 1 (1 − t)
4

1
0

= 1,
4

1
0

=

n!(i+1)−n!(n−i)
(i+1)!(n−i)!

3(1−t)2 t dt =

3 4
4t

=

(n+1)!
(i+1)!(n−i)!

=

1
0

=

− 2t3 + 3 t2
2

6.17. (c) n = 130.
6.19. Bi,n (1 − t) =
n
n−i

=
6.20.

n
i

(1 − (1 − t))n−i (1 − t)i =

n
i

(1 − t)i tn−i

(1 − t)i tn−i = Bn−i,n (t).

i
n Bi,n (t)

=

n!
i
n i!(n−i)! (1

n
i
i=0 n Bi,n (t)

=

− t)n−i ti =

(n−1)!
(i−1)!(n−i)! (1

n
(n−1)!
i=1 (i−1)!(n−i)! (1

− t)n−i ti

n−1 (n−1)!
n−i−1 i
t =t
i=0 i!(n−i−1)! (1 − t)
n
i
i
1 − n a + n b Bi,n (t) =
i=0
n
n
i
i=0 Bi,n (t) − a
i=0 n Bi,n (t) + b

=t

a
ing the line segment ab.

− t)n−i ti so that

n−1
i=0

Bi,n−1 (t) = t. Then B(t) =

n
i
i=0 n Bi,n (t)

= a(1 − t)+bt yield-

Solutions

335

6.24. When the control points are collinear the convex hull is a line segment
implying that the B´zier curve is contained in a line segment.
e
6.25. (a) b0 (3, 4), b1 (5, 5), b2 (6, 3), b3 (4, 2). (b) b0 (0, 0), b1 (−1, 2), b2 (1, 3),
b3 (2, 1). (c) b0 (0, 0), b1 (1, 2), b2 (−1, 3), b3 (−2, 1).
6.27. b1 (1.5, 0.75), b1 (3.5, 3.5), b1 (5.5, 4.25), b2 (2, 1.4375), b2 (4, 3.6875),
0
1
2
0
1
b3 (2.5, 2.0). B(0.25) = (2.5, 2.0).
0
6.28. (3.456, 1.3776).
6.32. (a) b1 (0.4, 0.1), b1 (1.2, 0.6), b1 (2.2, 0.9), b2 (0.6, 0.225), b2 (1.45, 0.675),
0
1
2
0
1
b3 (0.8125, 0.3375). B(0.25) = (0.8125, 0.3375).
0
(b) Bleft : (0.2, 0.0), (0.4, 0.1), (0.6, 0.225), (0.8125, 0.3375);
Bright : (0.8125, 0.3375), (1.45, 0.675), (2.2, 0.9), (3.4, 0.0).
6.34. (a) B(1/3) = (0.7, 0.275).

Chapter 7
7.1. b1 (2.6, 6.7, 4.3), b1 (4.3, 6.6, 4.7), b1 (4.4, 7.1, 3.7), b2 (3.11, 6.67, 4.42),
0
1
2
0
b2 (4.33, 6.75, 4.40), b3 (3.476, 6.694, 4.414). B(0.3) = (3.476, 6.694, 4.414).
1
0
7.2. First derivative: 3 ((4, 3) − (6, 3)) = (−6, 0), 3 ((1, 2) − (4, 3)) = (−9, −3),
3 ((−1, 2) − (1, 2)) = (−6, 0). Second derivative: 2 ((−9, −3) − (−6, 0)) =
(−6, −6).
7.4. n (n − 1) (b2 − 2b1 + b0 ) and n (n − 1) (bn − 2bn−1 + bn−2 ).
7.5.
Bi,n (t)

n
n
i(1 − t)n−i ti−1 −
(n − i) (1 − t)n−i−1 ti
i
i
n−1
n−1
= n
(1 − t)n−i ti−1 − n
(1 − t)n−i−1 ti
i−1
i
= n (Bi−1,n−1 (t) − Bi,n−1 (t)) .
=

7.7. b0 (1, 4), b1 (1, 3), b2 (0, 5).
7.8. (−3 + 8t − 6t2 , −3 + 4t + t2 ).
7.14. C 0 since c0 = b3 = (3, 6). For visual continuity µ3(b3 − b2 ) = 3(−2, 2)
and µ3(c1 − c0 ) = 3(−1, 1). Then take µ = 1/2. Change b2 to (4, 5) to
obtain C 1 .

336

Solutions

7.20. (a)–(c) follow from formulae in the text with w0 = w2 = 1.
b0 (1−0.5)2 +w1 b1 2(0.5)(1−0.5)+b2 (0.5)2
(1−0.5)2 +w1 2(0.5)(1−0.5)+(0.5)2

= 1−

w1
1+w1

b0 +b2
2

w1
1+w1

+

=

b0 +2w1 b1 +b2
2(1+w1 )

b1 = S.

0
1
2
0
1
0
7.21. w1 = 2.6, w1 = 4.2, w1 = 2.6, w2 = 3.56, w2 = 3.24, w3 = 3.38, and
1
1
1
2
b0 (5.769, 4.769), b1 (5.571, 3.857), b2 (4.538, 2.308), b0 (5.629, 4.124),

b2 (5.074, 3.111), b3 (5.309, 3.539) .
1
0
⎞
⎛
⎞
⎛
1
−33
21
15
3
− 18 0 − 2
9
2 ⎟
⎜ 27 −39
⎜ 17
15
3 ⎟
⎟. VC = ⎜ 18 0 − 9 ⎟.
7.24. M = ⎜
⎝
⎠
⎝
0 1
0 ⎠
0
0 −60
0
2
1
−9 0
108
84
60 −48
9
⎛
⎞
⎛
⎞
2
4 −2
2
54
330
−78
⎜ 3/2 5/2 4/2 1/2 ⎟
⎜
−30
−12 ⎟
⎜
⎟ M · VC = ⎜ −24
⎟
⎝ −4
⎠
⎝ −216 −360 −168 ⎠.
12
12
4
0
3
6
3
135 −135 −135
The projected control points are (−0. 692, −4. 231), (2, 2.5), (1.286, 2.143),
(−1, 1) and weights −78, −12, −168, −135.
7.25. An integral curve is obtained when weights are equal. Rewrite the expression for the weights wi = (n1 , n2 , n3 ) · bi v4 − (n1 , n2 , n3 ) · (v1 , v2 , v3 ).
Weights are equal if and only if either (i) v4 = 0, projection is parallel
and wi = −(n1 , n2 , n3 ) · (v1 , v2 , v3 ) for all i, or (ii) v4 = 0, projection
is perspective, (n1 , n2 , n3 ) · bi = 0, and the control points lie in a plane
parallel to the viewplane.

Chapter 8
8.1. B0 (t) =

5
2

−t+

1
2

(t − 2)

for t ∈ [2, 3], B1 (t) =
1
2 (t

7
2

2

3
b0 + − 2 + t − (t − 2)

−t+

1
2

(t − 3)

2

2

b1 + 1 (t − 2)2 b2
2

b1 + − 5 + t − (t − 3)
2

2

b2 +

− 3) b3 for t ∈ [3, 4].
2

8.2. B0 (t) = 5 − 1 t + 1 (t − 3)2 − 1 (t − 3)3 b0 + 2 − (t − 3)2 + 1 (t − 3)3 b1
3
2
2
6
3
2
+ − 4 + 1 t + 1 (t − 3)2 − 1 (t − 3)3 b2 + 1 (t − 3)3 b3 for t ∈ [3, 4].
3
2
2
2
6
2

8.3. B0 (t) = (t − 1) b0 + 2t − 3 t2 b1 + 1 t2 b2 ,
2
2
B1 (t) =

3
2

−t+

1
2

(t − 1)

2

b1 + − 1 + t − (t − 1)
2

2

2

b2 + 1 (t − 1) b3 ,
2

Solutions

337

B2 (t) =

5
2

−t+

1
2

(t − 2)

2

b2 + − 3 + t −
2

3
2

(t − 2)

2

2

b3 + (t − 2) b4 .

8.5. B(2.5) = (6.25, −0.25), B(4.2) = (4.28, 4.0).
8.6. b5 (0, 0), b6 (2, 0), b7 (4, 2), t6 = 6, t7 = 7, t8 = 8, t9 = 9, t10 = 10,
t11 = 11.
8.12. B(2.5) = (6.25, −0.25), B(4.2) = (4.28, 4.0).
8.13. B(2.4) = (4.04, 2.48).
(1)

(1)

8.18. B (2.8) = (0.8022, −3.3045). b0 (1.875, 9.375), b1 (6.0, 0.0),
(1)
(1)
b2 (1.579, −3.158), b3 (−2.857, −4.286).
(1)

(1)

(1)

8.19. b0 (4/3, 2),
b1 (2, −2),
b2 (2, 4/3),
B (6.2) = (1.733, −0.4), B (7.4) = (2, −0.667).
8.24.

wi Ni,d (t)
n
j=0 wj Nj,d (t)

n
i=0

=

n
i=0
n
j=0

wi Ni,d (t)
wj Nj,d (t)

knots

4, 5, 7, 8, 10.

= 1.

8.27. B (2.2) = (1.715, −11.853).
8.28. B (0.5) = (0, −4). B (0.8) = (7.101, 2.959).
8.31. B(0.65) = (−0.6897, −0.7241).

Chapter 9
9.2. First derivative with respect to s:
(1,0)

p0,0 = 2 ((4, 3, 1) − (2, 2, 0)) = (4, 2, 2) ,
(1,0)

p1,0 = 2 ((6, 2, 0) − (4, 3, 1)) = (4, −2, −2) ,
(1,0)

p0,1

(1,0)

(1,0)

= 2 ((4, 5, 3) − (2, 4, 1)) = (4, 2, 4) , similarly p1,1

= (4, −4, −4) ,

(1,0)

p0,2 = (4, 0, 2) , p1,2 = (4, −2, −2) .
9.4. (a) The tangent vectors at S(0, 0): n (p1,0 − p0,0 ) and p (p0,1 − p0,0 );
S(0, 1): n (p0,p − p0,p−1 ) and p (p1,p − p0,p ); S(1, 0): n (pn,0 − pn−1,0 )
and p (pn,1 − pn,0 ); S(1, 1): n (pn,p − pn−1,p ) and p (pn,p − pn,p−1 ). (b)
The normal at S(0, 0) is np (p1,0 − p0,0 ) × (p0,1 − p0,0 );
at S(0, 1) is np (p0,p − p0,p−1 ) × (p1,p − p0,p ) etc.
9.5. (All the points listed in the order p0,0 , p1,0 , etc.)
(2, 0, 1), (1, 0, 2), (3, 0, 3), (1, 0, 4), (1, 0, 5);
(2, 2, 1), (1, 1, 2), (3, 3, 3), (1, 1, 4), (1, 1, 5);

338

Solutions

(−2, 2, 1), (−1, 1, 2), (−3, 3, 3), (−1, 1, 4), (−1, 1, 5);
(−2, 0, 1), (−1, 0, 2), (−3, 0, 3), (−1, 0, 4), (−1, 0, 5);
(−2, −2, 1), (−1, −1, 2), (−3, −3, 3), (−1, −1, 4), (−1, −1, 5);
(2, −2, 1), (1, −1, 2), (3, −3, 3), (1, −1, 4), (1, −1, 5);
(2, 0, 1), (1, 0, 2), (3, 0, 3), (1, 0, 4), (1, 0, 5).
9.6. b0,0 (2, 3, 0), b1,0 (1, 5, 2), b2,0 (1, 7, −1), b3,0 (2, 9, −3), b0,1 (4, 7, −4),
b1,1 (3, 9, −2), b2,1 (3, 11, −5), b3,1 (4, 13, −7).
9.7. Control points as for Exercise 9.6, weights w0,0 = w0,1 = 1, w1,0 = w1,1 =
2, w2,0 = w2,1 = 3, w3,0 = w3,1 = 1.
9.9. b0,0 (0, 0, 0), b1,0 (0, a, 0), b2,0 (a, 2a, 0), b0,1 (0, 0, 1), b1,1 (0, a, 1),
b2,1 (a, 2a, 1). Parabolic cylinder can be obtain by sweeping a line segment along a quadratic B´zier curve.
e
9.10. NURBS sphere has control points: (Listed in the order p0,0 , p1,0 , etc)
(1, 0, 0), (1, 0, 1), (−1, 0, 1), (−1, 0, 0), (−1, 0, −1), (1, 0, −1), (1, 0, 0);
(1, 1, 0), (1, 1, 1), (−1, −1, 1), (−1, −1, 0), (−1, −1, −1), (1, 1, −1),
(1, 1, 0);
(−1, 1, 0), (−1, 1, 1), (1, −1, 1), (1, −1, 0), (1, −1, −1), (−1, 1, −1),
(−1, 1, 0);
(−1, 0, 0), (−1, 0, 1), (1, 0, 1), (1, 0, 0), (1, 0, −1), (−1, 0, −1), (−1, 0, 0);
(−1, −1, 0), (−1, −1, 1), (1, 1, 1), (1, 1, 0), (1, 1, −1), (−1, −1, −1),
(−1, −1, 0);
(1, −1, 0), (1, −1, 1), (−1, 1, 1), (−1, 1, 0), (−1, 1, −1), (1, −1, −1),
(1, −1, 0);
(1, 0, 0), (1, 0, 1), (−1, 0, 1), (−1, 0, 0), (−1, 0, −1), (1, 0, −1), (1, 0, 0).
Weights: wi,0 = {1, 0.5, 0.5, 1, 0.5, 0.5, 1},
wi,1 = wi,2 = {0.5, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5},
wi,3 = {1, 0.5, 0.5, 1, 0.5, 0.5, 1},
wi,4 = wi,5 = {0.5, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5},
wi,6 = {1, 0.5, 0.5, 1, 0.5, 0.5, 1}.
Knots for s and t 0, 0, 0, 0.25, 0.5, 0.5, 0.75, 1, 1, 1.

Solutions

339

9.13. Control points: (−1, 0, 1), (0, 0, 0), (1, 0, 1); (−1, −1, 1), (0, 0, 0), (1, 1, 1);
(1, −1, 1), (0, 0, 0), (−1, 1, 1); (1, 0, 1), (0, 0, 0), (−1, 0, 1); (1, 1, 1), (0, 0, 0),
(−1, −1, 1); (−1, 1, 1), (0, 0, 0), (1, −1, 1); (−1, 0, 1), (0, 0, 0), (1, 0, 1).
Weights: wi,0 = wi,2 = {1, 0.5, 0.5, 1, 0.5, 0.5, 1},
wi,1 = {3, 1.5, 1.5, 3, 1.5, 1.5, 3}.
9.19.
(1 − s)(3t2 + 4, 2t2 , −t) + s(2t, −t4 , 2t + 4)
= (4 − 4s + 2st + 3t2 − 3st2 , 2t2 − 2st2 − st4 , 4s − t + 3st) .
9.20. (a)
(3(1 − 3s2 + 2s3 )t2 + (3s2 − 2s3 )(2t + 10) + s − 2s2 + s3 ,
2(1 − 3s2 + 2s3 )t2 + 3(3s2 − 2s3 )t + s − s2 ,
(1 − 3s2 + 2s3 )t + 2(3s2 − 2s3 )t2 )
= (3t2 − 9t2 s2 + 6t2 s3 + 6ts2 + 28s2 − 4ts3 − 19s3 + s,
2t2 − 6t2 s2 + 4t2 s3 + 9ts2 − 6ts3 + s − s2 ,
t − 3ts2 + 2ts3 + 6t2 s2 − 4t2 s3 ) .
(b)
3(1 − 3s2 + 2s3 )t2 + (3s2 − 2s3 )(2t + 10) + (s − 2s2 + s3 )s,
2(1 − 3s2 + 2s3 )t2 + 3(3s2 − 2s3 )t − 2s + 4s2 − 2s3 − (−s2 + s3 )s,
(1 − 3s2 + 2s3 )t + 2(3s2 − 2s3 )t2 + (s − 2s2 + s3 )s + 2(−s2 + s3 )s)
= (3t2 − 9t2 s2 + 6t2 s3 + 6ts2 + 31s2 − 4ts3 − 22s3 + s4 ,
2t2 − 6t2 s2 + 4t2 s3 + 9ts2 − 6ts3 − 2s + 4s2 − s3 − s4 ,
t − 3ts2 + 2ts3 + 6t2 s2 − 4t2 s3 + s2 − 4s3 + 3s4 .

340

Solutions

9.21.
5 (1 − s) (1 − t) − 20 (1 − s) t + 8 s (1 − t) − 27 st + (1 − s) (−5 + 25 t)
2

+ s −8 (1 − t) + 20 (1 − t) t + 27 t2
3

2

+ (1 − t) −5 (1 − s) − 18 (1 − s) s − 21 (1 − s) s2 − 8 s3
2

+ t 20 (1 − s) + 44 (1 − s) s + 27 s2 ,
5 (1 − s) (1 − t) − 3 (1 − s) t − 7 st + (1 − s) (−5 + 8 t)
+ s 32 (1 − t) t + 7 t2
3

2

+ (1 − t) −5 (1 − s) − 12 (1 − s) s − 6 (1 − s) s2
2

+ t 3 (1 − s) + 10 (1 − s) s + 7 s2 ,
2

− 10 s (1 − t) − 10 st + s 10 (1 − t) + 8 (1 − t) t + 10 t2
2

+ (1 − t) 9 (1 − s) s + 21 (1 − s) s2 + 10 s3 + t 8 (1 − s) s + 10 s2
= (−5 + 25 t − 3 s + 8 st − st2 + 3 ts2 ,
− 5 + 8 t + 3 s + 26 st − 25 st2 + 3 s2 − s3 − 3 ts2 + ts3 ,
9 s − 13 st + 12 st2 + 3 s2 − 2 s3 − ts2 + 2 ts3 ) .

Chapter 10
10.1. (a) C (t) = (1, sinh (t/c)), C (t) = 0, 1 cosh (t/c) ,
c
t(t) = (1/ cosh (t/c) , tanh (t/c)), n(t) = (− tanh (t/c) , 1/ cosh (t/c)).
κ = 1/c cosh2 (t/c) .

√
10.3. (a) θ(s) = arcsin s, and x = 1 s 1 − s2 + 1 arcsin s, y = 1 s2 . (b)
2 √
2
√
√ 2
√
√
θ(s) = 2 s, and x = 2 s sin ( s) cos ( s) + cos2 ( s) − 1, y =
√
√
√
√
√
sin ( s) cos ( s) − 2 s cos2 ( s) + s.
√
(c) θ(s) = − arctan(s/a), and x = a ln((s + a2 + s2 )/a), y = a −
√
a2 + s2 .
10.4. Reparametrize the curve so that C(s) is unit speed. If κ(s) = 0 for all
s, then C (s) = κ(s)N(s) implies that C (s) = (0, 0). Thus C (s) =
(a1 , a2 ) for some constants a1 and a2 . Finally, integrating gives C(s) =
(a1 s+b1 , a2 s+b2 ). The result can also be deduced from the fundamental
theorem of plane curves: θ = κ(u) du = 0 du etc.

Solutions

341

10.5. In polar coordinates: (x, y) = (r(θ) cos θ, r(θ) sin θ). Then (x , y ) =
(r (θ) cos θ − r(θ) sin θ, r (θ) sin θ + r(θ) cos θ). So the arclength is
b
2

2

(r (θ) cos θ − r(θ) sin θ) + (r (θ) sin θ + r(θ) cos θ) dθ
a

(r(θ)2 + (r (θ))2 )dθ .

=
Further,

(x , y )

=

(r (θ) cos θ − 2r (θ) sin θ − r(θ) cos θ,
r (θ) sin θ + 2r (θ) cos θ − r(θ) sin θ)

and substitution into the formula for curvature gives κ =
10.6. (a) κ =

1
.
2(2+2 cos t)1/2

2(r )2 −rr +r 2
.
(r 2 +(r )2 )3/2

E(t) = (t − sin t, 3 + cos t) .

˙
¨
(b) C(t) = (−a sin t, b cos t), C(t) = (−a cos t, −b sin t) .
√

−b cos t
,
a2 sin2 t+b2 cos2 t

n(t) =
κ(t) =

√

−a sin t
a2 sin2 t+b2 cos2 t

,

ab
.
(a2 sin2 t+b2 cos2 t)3/2
a2 −b2
a

Evolute is E(t) =

2

cos3 t, − a

10.7. (a) Oﬀset is (−3 sin t, 2 cos t) +
(b) κ(t) =

6
,
(4 sin2 t+9 cos2 t)3/2

−b2
b

sin3 t .

d
(9 sin2 t+4 cos2 t)1/2

κ(t) =
˙

(−2 cos t, −3 sin t).

90 sin t cos t
.
(4 sin2 t+9 cos2 t)5/2

Maxima and min-

ima occur when κ(t) = 0. Hence t = 0, π/2, π, 3π/2 corresponding to the
˙
points (3, 0), (0, 2), (−3, 0), (0, −2).
(c) Maximum and minimum values of curvature are 3 and 2 . Therefore
4
9
the maximum and minimum radii of curvature are 9 and 4 . Hence the
2
3
maximum radius the ball cutter can be is 9 , otherwise the cutter will
2
be too large to cut the ellipse at the points (0, 2) and (0, −2).
˙
˙
10.10. C(t) = (−4 sin t, −5 cos t, 3 sin t), C(t) = 5.
t = − 4 sin t, − cos t, 3 sin t . n = − 4 cos t, sin t, 3 cos t .
5
5
5
5
b = − 3 , 0, − 4 . κ = 1/5, τ = 0. Curve is a circle radius 5.
5
5
3
10.11. t = − 10 sin t −

n = − 3 cos t +
5
√

b=

3 3
10

2
5
4
5

2
5

sin t,

sin t, − 3 sin t −
5

4
5

cos t, 0 ,

√

sin t +

√
3
2

3
cos t, 10 cos t −

2 3
5

√

cos t, − 3103 cos t +

√
2 3
5

,

sin t, 1 .
2

342

Solutions

κ = 1/20, τ =
10.12. κ =

√
5
2

√

3/20.

2 − cos2 t

−3/2

, τ = 0. Curve is an ellipse.

10.13. (a) κ = τ = 1/3(1 + t2 )2 . (b) κ =
τ = 1/
10.14. κ = τ =

1 + cos2 t + 1
1
2

2 − 2t2

1/2

1 + cos2 t + 1

. (c) κ =

3 3
2t

1/2

/(3 + 2 cos t)3/2 ,
−3/2

1 + t2 + t4

, τ = 0.

−1/2

.
√
√ √
26
10.17. (a) a √
√ = 17, b = 13 2, c = 39 so κ = 867 2 17 = 0. 175, τ =
1
34 2 17 = 0. 171. (b) κ = 0.185, τ = 0.334.
√

10.24. (a) 2(1 + 4u2 + 4v 2 )−1/2 and 2(1 + 4u2 + 4v 2 )−3/2 . (c) r and cos u(R +
r cos u)−1 .
10.25. (a) K = −(1 + u2 + v 2 )−2 , H = −uv(1 + u2 + v 2 )−3/2 .
10.26. (b) (0, 0, 0).
1
π

π
0

1
π

10.32.

1
2

kmax cos2 θ + kmin sin2 θ dθ =
(θ + cos θ sin θ) kmax +

1
2

(θ − cos θ sin θ) kmin

π
0

=

1
2

(kmax + kmin ).

Chapter 11
1
1
11.2. N = √1+4s2 +4t2 (2s, 2t, 1). So at (0.5, 0.5, −0.5), N = √3 (1, 1, −1).
The incident ray has direction (0, 10, 20) − (0.5, 0.5, −0.5), giving L =
√
√
√
√
√
√
227
227
227
− 681 , 19681 , 41681 . R = − 43 227 , − 103 227 , − 77 227 . The an2043
2043
2043
gle of incidence is 1.272609737 radians.

11.4. V · N = (0, 1, 0) · (−t − 2s, −s + t2 , 1) = −s + t2 . So the silhouette points
satisfy s = t2 giving the curve t2 , t, 2 t3 + t4 .
3
11.5. V · N = (1, 0, 0) · (1 − t2 − s2 , −2st, 1) = 1 − s2 − t2 . So the silhouette
points satisfy s2 + t2 = 1 deﬁning the unit circle in the (s, t)-plane.
The circle may be parametrized as (s, t) = (cos θ, sin θ) and substituting
into the parametric equation of the surface gives the silhouette curve
cos θ, sin θ, cos θ sin2 θ − cos θ + 1/3 cos3 θ .
11.6. V · N = (0, 1, 0) · (−18st, 1 − 9s2 + 9t2 , 1) = 1 − 9s2 + 9t2 = 0.
The substitution (s, t) = ( 1 cosh θ, 1 sinh θ) gives the silhouette curve
3
3
2
3
1
1
1
1
1
3 cosh θ, 3 sinh θ, 3 cosh θ sinh θ − 3 sinh θ − 9 sinh θ .
11.7. The plane ax + by + cz + d = 0 has normal N = (a, b, c). For a parallel
projection in the direction V(v0 , v1 , v2 ), V · N = av0 + bv1 + cv2 . In

Solutions

343

general, av0 + bv1 + cv2 = 0 and there are no silhouette points. When
av0 + bv1 + cv2 = 0, every point is a silhouette point. (The condition
corresponds to when V is perpendicular to N).
For a perspective projection from the viewpoint V(v0 , v1 , v2 ), the condition for a silhouette is (v0 − x, v1 − y, v2 − z) · N = av0 + bv1 + cv2 −
(ax + by + cz) = 0 giving av0 + bv1 + cv2 + d = 0. The condition is
satisﬁed if and only if V is a point on the plane and every point of the
plane is a silhouette point.
11.11. If the viewpoint V lies inside the sphere centred at C, radius r, then
|V − C| < r. Using Exercise 11.7.(a), d > r and r1 , given by 11.7(b),
has no solution.
(λ1 − 1)/λ, t .

11.14. The silhouettes are two lines 1/λ, ±
11.15. V = (10, 0, 0, 1) and
⎛

4

⎜
⎜ 0
⎜
Q=⎜
⎜ −1
⎝
0

0 −1
1

0

0 −1
0

0

0

⎞

⎟
0 ⎟
⎟
⎟ .
0 ⎟
⎠
−4

The silhouette plane is: 40x−10z −4 = 0. Solving for x and substituting
into the equation of the quadric gives the conic: − 99 − 5/4 z 2 + y 2 = 0
25
which can be parametrized by
(y, z) = ± 99/25 cosh t,

396/125 sinh t

.

A parametrization for the silhouette follows.
11.17. V = (0, 0, 1), N = (−f (u)g (u) cos v, −f (u)g (u) sin v, f (u)f (u)) and
V · N = f (u)f (u) = 0. Since f (u) = 0 silhouette points satisfy f (u) =
0. For each u0 such that f (u0 ) = 0 there is a silhouette circle given by
(f (u0 ) cos v, f (u0 ) sin v, g(u0 )).
11.18. Since VQPT is a 1 × 1 matrix it is equal to its own transpose, namely,
PQVT .
11.20.

⎛
VQPT =

λ 0

Therefore x =

1
λ

0

1

1
⎜ 0
⎜
⎝ 0
0

and y = ±

√
λ2 −1
λ

0
1
0
0

⎞⎛
0 0
x
0 0 ⎟⎜ y
⎟⎜
0 0 ⎠⎝ z
0 −1
1

⎞
⎟
⎟ = λx − 1 = 0 .
⎠

1
giving two lines ( λ , ±

√

λ2 −1
, z).
λ

References

[1] Abhyankar, S S and Bajaj, C, ‘Automatic parametrization of rational
curves and surfaces I: Conics and conicoids. Computer-Aided Design Vol.
19, pp11–14, 1987.
[2] B´zier, P, ‘Style, mathematics and NC’. Computer-Aided Design Vol. 22
e
No. 9, pp523–526, 1990.
[3] Boehm, W and Prautzsch, H, ‘The insertion algorithm’. Computer-Aided
Design Vol. 17 No. 2, pp58–59, 1985.
[4] Braid, I C, Hillyard, R C, and Stroud I A, ‘Stepwise construction of polhedra in geometric modelling’ in Mathematical Methods in Computer Graphics and Design, ed. K W Brodlie, pp123-141, Academic Press, 1980.
[5] Coolidge, J L, A History of the Conic Sections and Quadric Surfaces.
OUP, 1945.
[6] Davis, P, ‘B-splines and geometric design’, SIAM News Vol. 29 No. 5,
1996.
[7] Dill, J. ‘An application of colour graphics to the display of surface curvature’. Computer Graphics Vol. 15, pp153–161, 1981.
[8] Do Carmo, M P, Diﬀerential Geometry of Curves and Surfaces. PrenticeHall, 1976.
[9] Farin, G, Curves and Surfaces for Computer-Aided Geometric Design.
Third Edition. Academic Press, 1993.
[10] Forrest, A R, ‘Interactive interpolation and approximation by B´zier polye
nomials’, Computer-Aided Design Vol. 22 No. 9, pp527–537, 1990. Originally published in The Computer Journal Vol. 15 No. 1, pp71–79, 1972.
345

346

References

[11] Gibson, C.G., Elementary Geometry of Algebraic Curves. Cambridge University Press, 1998.
[12] Haralick, R M and Shapiro, L G, Computer and Robot Vision. AddisonWesley, 1992.
[13] Hoschek, J and Lasser, D, Fundamentals of Computer Aided Geometric
Design. A K Peters, 1993.
[14] Howard, T L J, Hewitt, W T, Hubbold, R J, and Wyrwas, K M, A Practical
Introduction to PHIGS and PHIGS PLUS. Addison-Wesley, 1991.
[15] Lane, J and Riesenfeld, R, ‘A geometric proof for the variation diminishing
property of B-spline approximation’. J. of Approximation Theory Vol. 37,
pp1–4, 1983.
[16] M¨ntyl¨, M, An Introduction to Solid Modeling, Computer Science Press,
a
a
Maryland, 1988.
[17] Munchmeyer, F, ‘On surface imperfections’. In R.Martin, editor, The
Mathematics of Surfaces II, pp459–474. OUP, 1987.
[18] Munchmeyer, F, ‘Shape interrogation: a case study’. In G.Farin, editor,
Geometric Modelling: Algorithms and New Trends, pp291–301. SIAM,
Philadelphia, 1987.
[19] Phong, B-T, ‘Illumination for computer-generated pictures’. Comm. ACM,
Vol. 18, No. 6, pp311–317, June 1975.
[20] Piegl, L and Tiller, W, The NURBS Book . Springer-Verlag, 1995.
[21] Rogers, D F and Adams, J A, Mathematical Elements for Computer
Graphics. Second Edition. McGraw-Hill, 1990.
[22] Schoenberg, I, ‘Contributions to the problem of approximation of equidistant data by analytic functions’, Quart. Appl. Math. Vol. 4, pp45–99, 1946.
[23] Sederberg, Th W, Anderson, D C and Goldman, R N, ‘Implicit representation of parametric curves and surfaces’. Computer Vision, Graphics and
Image Processing Vol. 28, pp72–84, 1984.
[24] Semple, J G and Kneebone, G T, Algebraic Projective Geometry. OUP,
1952.
[25] Smith, G, Introductory Mathematics: Algebra and Analysis. SpringerVerlag, 1998.
[26] Sommerville, D M Y, Analytical Conics. Bell and Sons, 1945.
[27] Spivak, M, Calculus. W.A.Benjamin, 1967.

Index

aﬃne invariance 147, 177, 195, 214, 236
ambient light 299, 304
apparent contour 310
apparent cusps 319
attenuation 305
axonometric projection see projection
B-rep 263
B-spline 194
– basis 187, 192
– closed 200, 235
– curve 188
– derivatives 207, 216, 238
– integral 188
– NURBS 212
– open 196, 235
– open uniform 202
– periodic 200, 235
– rational 213
– surface 234
– uniform 198
Bernstein
– polynomial 141, 144
B´zier
e
– control point 135
– – homogeneous 175
– control polygon 135–137, 141
– cubic 137
– curve 136, 141, 161
– – curvature 283
– – torsion 283
– derivatives 162
– endpoint-interpolation 139, 147, 236
– integral 141
– linear 136

– piecewise 168
– properties 147
– quadratic 136
– rational 175
– rendering 157
– subdivision 154
– surface 234
binomial 142
blend 233
Boehm algorithm 221
breakpoints 169, 192
C k -continuity 99, 170, 226
CAD see computer-aided design, 260
Cartesian plane 2
catenary 273
cavalier projection see projection
centre of perspectivity 68
clip 76
clothoid 273
CMY 299
computer-aided design 49, 135
concatenation see transformation
conic 109
– applications 132
– central 113
– conversion 127
– degenerate 109
– directrix 110
– discriminant 112
– eccentricity 110
– ellipse 109, 116, 177
– focus 110
– hyperbola 109, 116, 134, 177
– irreducible 112, 114
347

348

Index

– parabola 109, 116, 132, 177
– parametrization 124
– reducible 112, 114
– spatial 130
continuity 99, 192, 195, 214, 226, 253
control point 187
conversion
– to B´zier form 166
e
convex hull 146, 147, 177, 195, 214, 236
Coons surface 256
coordinate
– functions 96
coordinate curve 226
coordinates
– Cartesian 1
– homogeneous 14, 20, 41
– Pl¨ cker 54
u
– viewplane see viewplane
Cornu spiral 273
CSG 261
curvature 267, 275
– B´zier curves 283
e
– normal 286
– principal 286
– vector 275
curve
– algebraic 96
– curvature 267, 275
– implicit 96
– non-parametric explicit 96
– parametric 96
– polynomial 96
– rational 96
– regular 99
– segment 96
cusp 138
cycloid 273

equivalence relation 21
Euler angles 51
Euler–Poincar´ formula 265
e
evolute 274
ﬂat point 291
ﬂat shading 307
font design 203
foreshortening ratio 85
Frenet frame 276
Frenet–Serret formulae 277
Gk -continuity 172, 253
geometric continuity 172
geometric modelling 260
gimbal lock 51, 64
Gordon–Coons surface 256
Gouraud shading 307
graphical primitive 1, 15
Hamilton 56
helix 279
Hermite 254
hidden line 318
homogeneous
– control point 213
– coordinates 19, 21
– equation 24, 38
Horner’s method 98
hotspot 303
HSV 298
hue 298
hyperbolic point 291
identity see transformation
image 3
implicit 2, 225
incident ray 300
inﬂection 138
instancing 1, 15, 36
intensity 301, 305
intersection
– line and B´zier curve 158
e
– line and conic 121
– three planes 53
– two B´zier curves 159
e
– two lines 39
inverse see transformation
isometric projection see projection

de Boor algorithm 205
– rational 218
de Casteljau 151, 152
– rational 180
deformation 204
degree 96, 187
degree raising 146
Denavit–Hartenberg 17
device coordinate transformation 37,
80
device window 76
diﬀuse reﬂection 300
dimetric projection see projection
dual 40

knot insertion 221
knot vector 187

elliptic point

Lambert’s Law

291

301

Index

349

Lambertian surfaces 301
light
– ambient 299
– attenuation 305
– directional 299
– distributive 299
– intensity 301
– point source 299
– specular 299
line 2
– through two points 39
line coordinates 54
line vector 39, 52
local control 195, 214
local support 192
lofting 254
logarithmic spiral 273
Monge patch 227
monomial form 166
morphing 203
natural equation 272
normal
– line 101
– vector 100
normal plane 276
numerically controlled machining
232
NURBS see B-spline

107,

– through three points 52
plane vector 52
point at inﬁnity 23, 25, 26, 41
positivity 192
principal curvature 286
principal direction 286
projection
– centre of perspectivity 72
– line 68
– of B´zier curve 181
e
– of NURBS curve 214
– parallel 69, 72
– – axonometric 86
– – cavalier 88
– – dimetric 87
– – isometric 87
– – oblique 87
– – orthographic 86
– – trimetric 87
– perspective 68, 72, 90
– – one-point 91
– – three-point 91
– – two-point 91
– viewpoint 72
projective invariance 178, 236
projective plane 19, 23, 24
P2 see projective plane
projective space 41

object 4
oblique projection see projection
oﬀset 107, 232, 296
order 187
orientation 50
orthogonal change of coordinates 33
orthographic projection see projection

quaternions 51, 56
– algebraic properties
– animation 65
– conjugate 59
– interpolation 65
– inverse 59
– polar form 60
– rotations 62
– unit 59

P3 see projective space
parabolic point 291
parallel curve 107
parallel projection see projection
parameter curve 226
parametric 2, 226
parametrization 96
partition of unity 192
perspective projection see projection
Phong 303, 309
picture elements 15
piecewise polynomial 170, 187, 192
plane
– Cartesian 2
– projective 19, 23, 24

R2 see Cartesian plane
rational 175, 213
rectifying plane 276
reﬂected ray 300
reﬂection see transformation
– ambient 304
– diﬀuse 300
– specular 302
regular 99, 226
relation 21
rendering 98
reparametrization 104
RGB 298
right inverse 77
robotics 17

58

350

rolling-ball blend 233
rotation see transformation
saturation 298
scaling see transformation
self-occluding 302
shade 298
shading
– ﬂat 307
– Gouraud 307
– Phong 309
shadow 320
shear see transformation
shelling 232
silhouette 309
skinning 251
specular light 299
specular reﬂection 302
speed 99, 275
subdivision 154, 248
surface
– B-spline 235
– B´zier 234
e
– bilinear 243
– constructions 241
– curvature 285
– – Gaussian 291
– – mean 291
– extruded 241
– Gordon–Coons 256
– implicit 225
– loft 254
– non-parametric explicit 227
– normal 227
– NURBS 235
– of revolution 49, 245
– parametric 226
– quadric 228
– regular 226
– ruled 242
– singular 226
– skin 251
– subdivision 248
– tangent vector 227
– translational swept 244

Index

tangent
– line 100, 101
– vector 100, 275
thickening 233
tint 298
tone 298
torsion 275
– vector 277
torus 232, 246, 295
trace 96
transformation 3
– aﬃne 21, 42
– concatenation 13, 30
– identity 6, 31
– inverse 6, 31, 32
– non-singular 4, 32
– projective 20, 42
– reﬂection 8
– – in arbitrary line 34
– – in arbitrary plane 47
– rotation 9, 29, 43
– – about arbitrary line 45
– – about arbitrary point 33
– scaling 7, 28, 43
– shear 11
– singular 4
– translation 5, 27, 42
translation see transformation
trimetric projection see projection
umbilic point

291

variation diminishing property 147,
177
viewing pipeline 80
viewplane
– coordinates 76
– window 76, 80
viewpoint see centre of perspectivity
viewport window see device window
visual tangent continuity 172
weight

175, 179

