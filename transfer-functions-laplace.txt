Lecture: Transfer functions
Automatic Control 1
Transfer functions
Prof. Alberto Bemporad
University of Trento
Academic year 2010-2011
1 / 28
Laplace transform
Consider a function f (t), f :
→ , f (t) = 0 for all t < 0.
Definition
The Laplace transform [f ] of f is the function
F : → of complex variable s ∈ defined by
f(t)
F(s) =
f (t)dt
−0.5
−1
for all s ∈
for which the integral exists
Once F(s) is computed using the integral, it’s
extended to all s ∈ for which F(s) makes sense
Pierre-Simon Laplace
Laplace transforms convert integral and differential
equations into algebraic equations. We’ll see how ...
(1749-1827)
Prof. Alberto Bemporad (University of Trento)
2 / 28
Examples of Laplace transforms
Unit step
f (t) = 1 =
I(t)
if t < 0
if t ≥ 0
⇒ F(s) =
Dirac’s delta (or impulse function1 )
f (t) = δ(t)
if t = 0
δ(t) = 1
such that
δ(t)e−st dt = e−s0 = 1, ∀s ∈
F(s) = 1 =
The function δ(t) is can be considered as the limit of the sequence of functions fε (t) for
ε→0
se 0 ≤ t ≤ ε
fε (t) =
0 otherwise
To be mathematically correct, Dirac’s δ is a distribution, not a function
3 / 28
Properties of Laplace transforms
Linearity
[k1 f1 (t) + k2 f2 (t)] = k1
Example: f (t) = δ(t) − 2 1
I(t) ⇒
[f1 (t)] + k2
[f ] = 1 −
[f2 (t)]
Time delay
[f (t − τ)] = e−sτ
Example: f (t) = 3 1 − 2) ⇒
[f (t)]
3e−2s
Exponential scaling
[eat f (t)] = F(s − a), where F(s) =
Example: f (t) = eat 1
Example: f (t) = cos(ωt) 1 =
s−a
s2 +ω2
4 / 28
Time derivative2 :
f (t)] = s
[f (t)] − f (0+ )
Example =⇒ f (t) = sin(ωt) 1
I(t) ⇒ L[f ] =
Multiplication by t
[tf (t)] = −
Example =⇒ f (t) = t 1
f (0+ ) = limt→0+ f (t). If f is continuos in 0, f (0+ ) = f (0)
5 / 28

[ _to('140518225600') ]
Initial and final value theorems [ continous time ]
Initial value theorem
Example: 
Final value theorem
Example: f (t) = 1 − e−t 1
I(t) ⇒ F(s) =
f (+∞) = 1 = lims→0 sF(s)
s→0

6 / 28
Convolution
The convolution h = f ∗ g of two signals f and g is the signal
f (τ)g(t − τ)dτ
h(t) =
It’s easy to see that h = f ∗ g = g ∗ f
The Laplace transform of the convolution:
[f (t) ∗ g(t)] =
[g(t)]
Laplace transforms turn convolution into multiplication !
7 / 28
Common Laplace transforms
ecific
δ (k)
In MATLAB use
F = LAPLACE(f)
,k≥0
sk+1
» f=exp(2*t)+t-tˆ2
» F=laplace(f)
1/2j
s2 + ω 2
sin ωt
cos(ωt + φ)
e−at cos ωt
e−at sin ωt
MATLAB
s cos φ − ω sin φ
1/(s-2)+1/sˆ2-2/sˆ3
(s + a)2 + ω 2
courtesy of S. Boyd, http://www.stanford.edu/~boyd/ee102/
8 / 28
Table of Laplace Transfer functions
Remember that we consider all functions (signals) as defined only on t ≥ 0.
General
f (t)
F (s) =
f (t)e−st dt
αf (α ∈ R)
sF (s) − f (0)
g(t) =
sk F (s) − sk−1 f (0) − sk−2
f (τ ) dτ
G(s) =
dk−1 f
(0) − · · · − k−1 (0)
F (s)
f (αt), α > 0
F (s/α)
eat f (t)
F (s − a)
tf (t)
tk f (t)
(−1)k
dk F (s)
F (s) ds
0≤t<T
, T ≥ 0 G(s) = e−sT F (s)
f (t − T ) t ≥ T
9 / 28
Transfer function
Let’s apply the Laplace transform to continuous-time linear systems
˙(t)
y(t)
Ax(t) + Bu(t)
Cx(t) + Du(t)
x(0) = x0
Define X(s) =
[x(t)], U(s) =
[u(t)], Y(s) =
[y(t)]
Apply linearity and time-derivative rules
sX(s) − x0
Y(s)
AX(s) + BU(s)
CX(s) + DU(s)
10 / 28
X(s)
(sI − A)−1 x0 + (sI − A)−1 BU(s)
C(sI − A)−1 x0
+ (C(sI − A)−1 B + D)U(s)
of natural response
of forced response
[ _to('140518222054') ]
»sys=ss(A,B,C,D);
»G=tf(sys)
11 / 28
u(t)
A,B,C,D
U(s)
G(s)
x0=0
Example: The linear system
 ˙(t)
−10
x(t) +
2 x(t)
has the transfer function
2s + 22
s2 + 11s + 10
Note: The transfer function does not depend on the
input u(t)! It’s only a property of the linear system.
»sys=ss([-10 1;
0 -1],[0;1],[2 2],0);
Transfer function:
2 s + 22
---------sˆ2 + 11 s + 10
12 / 28
[ _to('140518223130') ]
Example
¨ + 11˙ + 10y = 2˙ + 22u
»G=tf([2 22],[1 11 10])
+ 11s + 10
13 / 28
Differential equation
¨(t) + 3˙(t) + y(t) = u(t) + u(t)
The transfer function is
s2 + 3s + 1
The same transfer function G(s) can be obtained through a state-space
realization
 ˙(t) =
−1 −3
1 1 x(t)
y(t) =
from which we compute
−3
14 / 28
Some common transfer functions
Integrator
x(t)
u(τ)dτ
kω0
2 + 2ζω s + ω 2
Double integrator
 ˙1 (t)
˙2 (t)
x2 (t)
x1 (t)
Damped oscillator with frequency ω0 rad/s and damping factor ζ
−ω0 −2ζω0
1 0 x(t)
15 / 28
Impulse response
Remember that an input signal u(t) produces an output signal y(t) whose
Laplace transform Y(s) is
Y(s) = G(s)U(s)
where U(s) = [u], for initial state x(0) = 0
Speciale case: impulsive input u(t) = δ(t), U(s) = 1. The corresponding
output y(t) is called the impulse response
G(s) is the Laplace transform of the impulse response y(t)
Y(s) = G(s) · 1 = G(s)
0.35
impulse response y(t)
Example:
−2t
[G(s)] = 2te
0.25
0.15
0.05
16 / 28
Inverse Laplace transform
The impulse response y(t) is therefore the inverse Laplace transform of the
transfer function G(s), y(t) = −1 [G(s)]
The general formula for computing the inverse Laplace transform is
f (t) =
2πj
F(s)est ds
where σ is large enough that F(s) is defined for ℜs ≥ σ
This formula is not used very often
» F=2*s/(sˆ2+1)
» f=ilaplace(F)
f = ILAPLACE(f)
f = 2*cos(t)
17 / 28
Examples
δ(t)
−1 1
s2 + 1
I(t)t
[ s1 ] = 1
Undamped oscillator
[ s21 ] = 1 sin t
18 / 28
[ _to('140518224705') ]
19 / 28
Example 1
poles: {−1, − 2 + j
,−1
+ 2s2
+ 3s + 2
(s + 1)(s2 + s + 2)
zeros: {−2}
Example 2
2(s + 11)
(s + 10)(s + 1)
poles: {−10, −1}, zeros: {−11}
» G=tf([2 22],[1 11 10])
» zpk(G)
Zero/pole/gain:
2 (s+11)
-------(s+10) (s+1)
20 / 28
Partial fraction decomposition
The partial fraction decomposition of a rational function G(s) = N(s)/D(s) is
(assuming pi = pj )3
s − p1
αi is called the residue4 of G(s) in pi ∈
αi = lim (s − pi )G(s)
s→pi
The inverse Laplace transform of G(s) is easily computed by inverting each
term
[G(s)] = α1 ep1 t + · · · + αn epn t
For multiple poles pi with multiplicity k we have the terms
αi1
(s − pi )
d(k−j)
, αij =
lim (k−j) [(s − pi )k G(s)]
(k − j)! s→pi ds
(s − pi )k
αik
and the inverse Laplace transform is
αi1 epi t + · · · + αik
tk−1
(k − 1)!
epi t
Residues of conjugate poles are conjugate of each other: pi = pj ⇒ αi = αj
21 / 28
Linear algebra recalls
The inverse of a matrix A ∈
 a21
A= .
is the matrix A−1 such that A−1 A = AA−1 = I
The inverse A−1 can be computed using the adjugate matrix Adj A
A−1 =
Adj A
det A
The adjugate matrix is the transpose of the cofactor matrix C of A
Adj A = CT , Cij = (−1)i+j Mij
where Mij is the (i, j) cofactor of A, that is the determinant of the
(n − 1) × (n − 1) matrix that results from deleting row i and column j of A
22 / 28
Numerical caveat
Consider the linear system of n equalities Ax = b in the unknown vector
x ∈ n (A ∈ n×n , b ∈ n )
If det A = 0, the unique solution is x = A−1 B
However, computing A−1 is not a smart thing to do for finding x !
Numerical example: n=1000; A=rand(n,n)+10*eye(n); b=rand(n,1);
» tic; x=inv(A)*b; toc
» tic; x=A\ b; toc
elapsed_time =
2.2190
0.8440
First A is inverted, an operation that
The linear system is solved using Gauss
costs O(n3 ) arithmetic operations
method, an operation that costs O(n2 )
arithmetic operations
23 / 28
Poles, eigenvalues, modes
Linear system
˙(t) =
x(0) = 0
G(s) = C(sI − A)−1 B + D
NG (s)
DG (s)
Use the adjugate matrix to represent the inverse of sI − A
C(sI − A)−1 B + D = C
C Adj(sI − A)B
det(sI − A)
The denominator DG (s) = det(sI − A) !
The poles of G(s) coincide with the eigenvalues of A
Well, not always ...
24 / 28
Some eigenvalues of A may not be poles of G(s) in case of pole/zero
cancellations
det(sI − A) = (s − 1)(s + 1)
s−1
The pole s = 1 has no inﬂuence on the input/output behavior of the system
(but it has inﬂuence on the free response x1 (t) = et x10 )
We’ll better understand cancellations when investigating reachability and
observability properties
25 / 28
[ _to('140518225725') ]
26 / 28
DC gain - Example
DC gain: − [ 1
G(0)=3
2s+3
4s2 +2s+1
Transfer function: G(s) =
−2 −1
−2
Output y(t) for different initial
conditions and input u(t) ≡ 1
ans =
»sys=tf([2 3],[4 2 1]);
»dcgain(sys)
27 / 28
English-Italian Vocabulary
transfer function
unit step
delay
damped oscillator
impulse response
inverse Laplace transform
partial fraction decomposition
DC gain
steady-state
funzione di trasferimento
trasformata di Laplace
gradino unitario
ritardo
oscillatore smorzato
risposta all’impulso
antitrasformata di Laplace
decomposizione in fratti semplici
guadagno in continua
regime stazionario
Translation is obvious otherwise.
28 / 28
